<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Information Collect System Project</title>
    <link href="/blog/dots/dots_ICSP/"/>
    <url>/blog/dots/dots_ICSP/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d6864d6c43dbbc6e5bfd92aed01e95a958e4cf43619381930329a84d47062690">ad431f2a3300d7670f579e43b729b4b48bf6524cf79cf8a8ceb6d23cdb320a31</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/blog/lib/hbe.js"></script><link href="/blog/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标建议及纲要</title>
    <link href="/blog/dots/dots_dream_of_china/"/>
    <url>/blog/dots/dots_dream_of_china/</url>
    
    <content type="html"><![CDATA[<h2 id="中共中央关于制定国民经济和社会发展第十四个五年规划和二〇三五年远景目标的建议"><a href="#中共中央关于制定国民经济和社会发展第十四个五年规划和二〇三五年远景目标的建议" class="headerlink" title="中共中央关于制定国民经济和社会发展第十四个五年规划和二〇三五年远景目标的建议"></a>中共中央关于制定国民经济和社会发展第十四个五年规划和二〇三五年远景目标的建议</h2><p>在线阅读： <a href="http://www.gov.cn/zhengce/2020-11/03/content_5556991.htm">Go</a></p><h2 id="中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要"><a href="#中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要" class="headerlink" title="中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要"></a>中华人民共和国国民经济和社会发展第十四个五年规划和2035年远景目标纲要</h2><p>在线阅读： <a href="http://www.gov.cn/xinwen/2021-03/13/content_5592681.htm">Go</a></p><p>PDF版本： <a href="https://static-docs-1253741713.cos.ap-beijing.myqcloud.com/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%B0%91%E7%BB%8F%E6%B5%8E%E5%92%8C%E7%A4%BE%E4%BC%9A%E5%8F%91%E5%B1%95%E7%AC%AC%E5%8D%81%E5%9B%9B%E4%B8%AA%E4%BA%94%E5%B9%B4%E8%A7%84%E5%88%92%E5%92%8C2035%E5%B9%B4%E8%BF%9C%E6%99%AF%E7%9B%AE%E6%A0%87%E7%BA%B2%E8%A6%81.pdf">Down</a></p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中国梦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《中华人民共和国民法典》</title>
    <link href="/blog/dots/dots_Civil_code_2021/"/>
    <url>/blog/dots/dots_Civil_code_2021/</url>
    
    <content type="html"><![CDATA[<p>《中华人民共和国民法典》被称为“社会生活的百科全书”，是新中国第一部以法典命名的法律，在法律体系中居于基础性地位，也是市场经济的基本法。</p><p>《中华人民共和国民法典》共7编、1260条，各编依次为总则、物权、合同、人格权、婚姻家庭、继承、侵权责任，以及附则。通篇贯穿以人民为中心的发展思想，着眼满足人民对美好生活的需要，对公民的人身权、财产权、人格权等作出明确翔实的规定，并规定侵权责任，明确权利受到削弱、减损、侵害时的请求权和救济权等，体现了对人民权利的充分保障，被誉为“新时代人民权利的宣言书”。 </p><p>2020年5月28日，十三届全国人大三次会议表决通过了《中华人民共和国民法典》，自2021年1月1日起施行。婚姻法、继承法、民法通则、收养法、担保法、合同法、物权法、侵权责任法、民法总则同时废止。</p><h2 id="中华人民共和国民法典（全文）"><a href="#中华人民共和国民法典（全文）" class="headerlink" title="中华人民共和国民法典（全文）"></a>中华人民共和国民法典（全文）</h2><p>在线阅读： <a href="http://www.moj.gov.cn/Department/content/2020-06/01/592_3249871.html">Go</a></p><p>PDF版本： <a href="https://static-docs-1253741713.cos.ap-beijing.myqcloud.com/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E6%B0%91%E6%B3%95%E5%85%B8.pdf">Down</a></p><p>Doc版本： <a href="https://static-docs-1253741713.cos.ap-beijing.myqcloud.com/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E6%B0%91%E6%B3%95%E5%85%B8.doc">Down</a></p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>法律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>比特宇宙之 TCP/IP 的诞生</title>
    <link href="/blog/dots/dots_Byte_World_TCP_IP/"/>
    <url>/blog/dots/dots_Byte_World_TCP_IP/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文转载自微信公众号：<strong>编程技术宇宙</strong></p>          </div><div class="note note-info">            <p>比特宇宙创世不久，宇宙中开始出现文明。</p>          </div><div class="note note-info">            <p>文明不断碰撞、融合、进化，逐渐分化为几大派系：</p>          </div><div class="note note-success">            <p>施行 Unix 体制的帝国，出现时间最早，在宇宙中最有威望。</p>          </div><div class="note note-success">            <p>施行 Windows 体制的帝国，数以十亿计，成为宇宙中最庞大的军团。</p>          </div><div class="note note-success">            <p>施行 Linux 体制的帝国，后起之秀，曾和 Windows 帝国军团爆发多次战争，后握手言和，割据一方。</p>          </div><div class="note note-info">            <p>随着文明的发展，宇宙之间的各帝国逐渐意识到需要发展经贸合作，互通有无。</p>          </div><div class="note note-info">            <p>终于有一天，几大派系的帝国派了代表聚在一起，商讨比特宇宙的经贸合作框架协议。</p>          </div><h2 id="☆-第一天-☆"><a href="#☆-第一天-☆" class="headerlink" title="☆ 第一天 ☆"></a>☆ 第一天 ☆</h2><p>会议第一天的议题，商讨经贸合作的最重要的基础：<strong>制定比特宇宙通信标准</strong>。</p><p>Unix 代表首先发言：我们需要制定一套普世的宇宙标准，让全宇宙的帝国都能互相通信，大家有什么想法，请畅所欲言。</p><p>Linux：最简单有效的办法，帝国之间都建一条专有线路，就像这样，构成一张巨大的网络，我们就能和任何帝国通信了。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_2.jpg"></p><p>Windows：你想的也太简单了，你知道咱们 Windows 星系有多少帝国吗？建专有线路，这得花多少钱？就算你有钱，帝国要建这么多线路，那也不堪重负。</p><p>Linux：别着急，我还有办法。咱们找一个帝国作为网络中心节点，专门负责数据转发，其他帝国只需和中心建一条专线就可以，这一下能省很多线路的钱。诺，就像这样：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_3.jpg"></p><p>Windows：确实省了不少，但你有没有想过，这个中心节点得多么重要，工作负担巨大倒是其次，一旦中心帝国覆灭，全宇宙的通信全部中断，这是多么严重的后果？</p><p>Linux 皱了眉头，不再说话。</p><p>Unix：其实这个方法挺不错的，不过需要一点改进会更好。就像你说的，一个中心节点不够，咱们可以弄多个啊，然后这多个中心节点之间再互相连接，把一个中心变成多个中心。嗯，其实这里就不再存在中心了，就是一个去中心的分布式网络了，你们觉得怎么样？</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_4.png"></p><p>Linux：唉，这个好！我还想到了一招，既然咱们宇宙中帝国众多，就把你说的中间这些节点再进一步划分层级，也就是划分为一个个子网络，然后子网之间连接组成大的网络，然后大的网络之间再连接构成更大的网络！我是不是个天才！</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_5.png"></p><p>Windows：嗯，听起来挺不错的，不过有一个问题还没解决，就是非常遥远的两个帝国之间要通信，网络通道该怎么建立呢？中间节点要如何给这两个帝国搭建出一条专线，让他们通信呢？</p><p>·······<br>一阵沉默<br>·······</p><p>Unix：为什么非得建立专线呢？这样效率太低了，如果一条线路给你们占用了，别人要经过这条线的是不是得一直等着？</p><p>Linux：说的有道理，那你有什么好主意？</p><p>Unix：<strong>我们可以把数据拆分为一个个的单元，分组传输，每个单元写好发件人、收件人，中间的节点负责存储转发就可以了嘛，这样大家都可以用这个网络，效率大大提升。</strong></p><p>Windows 代表拍案而起，“这简直是划时代的想法！大佬果然是大佬！”</p><p>Linux：非常棒的想法，我们给这种技术取个名字吧，既然是分组，然后存储转发，要不然叫<strong>分组交换技术</strong>怎么样？</p><p>Unix：嗯，这名字很贴切，就叫它！</p><p>Linux：我们给这个巨大的网络也取一个名字吧，叫 Internet 怎么样？</p><p>Unix：Internet，因特网，听起来还不错</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_6.jpg"></p><p>Windows：大佬，既然要通信，接下来咱们需要要讨论下通信协议了吧。</p><p>Unix：通信协议？</p><p>Windows：对啊，咱们得制定一套规范标准，所有帝国按照这套规范来收发信息，才能互相理解对方在说什么。</p><p>Unix：嗯，确实需要这么一套标准协议。既然网络叫 Internet，那咱这套标准协议就叫 Internet Protocol，那具体协议内容怎么制定呢？</p><p>Linux：等下，给我个表现机会，让我先说说。</p><p>Windows：洗耳恭听。</p><p>Linux：咱们给所有帝国编一个号，用4个字节的整数来表示，嗯，我想想，从0x00000000到0xFFFFFFFF，差不多能表示42亿多个帝国了，绰绰有余了。这个编号，就叫 Internet Protocol Address，也就是 IP 地址。</p><p>Windows：嗯，用是够用了，不过我建议不要用16进制表示，不太好书写，人类那智商肯定记不住。既然是4个字节整数，要不就用人类熟悉的4个十进制整数来写，用点来隔开，像这样：0.0.0.0～255.255.255.255，把这种写法叫做IP地址的点分十进制表示法，怎么样？</p><p><strong>IP: 192.168.1.1</strong></p><p>Linux：嗯，这个建议好，可以采纳。我刚才还没讲完，通信的时候，数据前面加一个头部，头部里面写上发件人的IP地址、收件人的IP地址，这样发送出去，然后交给网络中的中间节点，让他们转发出去…</p><p>Windows：等一下，有一个问题，中间节点该如何知道转发给谁呢？</p><p>·······<br>又是一阵沉默<br>·······</p><p>Linux：有了，人类收发快递的时候，他们的地址是分了省，市，县到街道，一层层分级了，逐级进入就能找到收件人的地方。咱们的网络也可以这样效仿，把网络分不同大区，大区里面分子网。然后负责转发的这些中间节点，记录一张表，表里面记录不同地区的地址该交给谁，如此，不同层级负责不同的地区，整个网络就能运转起来，收发信息了。</p><p>Unix：这个办法好，咱就把这种技术叫路由技术，这个表叫做路由表。</p><p>Windows：确实很有头脑嘛，不过我想到有一种情况可能比较难办。</p><p>Linux：什么情况，别卖关子了。</p><p>Windows：如果写了一个不存在的收件人，或者是中间节点的路由表里面都没有记录这个帝国，甚至有些中间节点之间踢皮球，谁都不知道交给谁，互相推诿，那发出去的数据包裹岂不是要在网络里面转圈圈，没完没了浪费资源了？</p><p>Linux：额，好像确实是有这么个麻烦问题，你解决问题没啥能力，挑刺倒是一把好手嘛！</p><p>Unix：<strong>有了！咱们在在这个头部里面除了写上收发地址外，再加一个计数器，表示这个包裹的生命周期，发件人初始设置一个数字，表示允许最多在网络中传递几次。中间节点收到后，就把数字减1，如果某个节点拿到后发现减1后变成0，那就丢掉它不再传输了。</strong></p><p>Linux：嗯，这个办法好，这个计数器也取一个名字，叫 Time to Live 吧，就是生存时间的意思，简写成 <strong>TTL</strong>。</p><p>Windows：大佬，果然有经验，佩服佩服。不过原谅我还要继续提问题哦。</p><p>Linux：你的问题怎么这么多，快说！</p><p>Windows：帝国之内有许多的公司都需要经贸合作，如何能进一步区分是哪家公司的信息呢？</p><p>Linux：这样看来，4个字节整数不够用啊，再加一点怎么样，给每个公司都弄一个编号。</p><p>Windows：这恐怕不太现实，帝国的公司经常在变化，每天诞生消亡不计其数，还有些公司根本不做国际化贸易，不需要网络通信，这种办法不好操作。</p><p>Linux：这。。。</p><p>Unix：今天时间也不早了，要不明天继续讨论这个议题如何，今天的收获已经不少了。</p><p>Linux：好的，我回去再琢磨琢磨。</p><h2 id="☆-第二天-☆"><a href="#☆-第二天-☆" class="headerlink" title="☆ 第二天 ☆"></a>☆ 第二天 ☆</h2><p>Unix：两位昨晚休息的如何？</p><p>Windows：还不错。</p><p>Linux：还行吧，对了，昨天最后那个问题我有新的解决方案了。</p><p>Windows：哦，是吗，我也想到了一个办法，要不你先说。</p><p>Linux：昨天的 IP 地址技术方案还是不变，IP 地址只用来在网络中标识一个帝国，至于帝国内部的公司，由帝国内部自己管理。帝国内部再给自己的公司编个码，既然你说到公司会不断消亡和诞生，那这个号码就动态生成。</p><p>Windows：跟我想的差不多，帝国负责网络通信的部门给需要通信的公司分配一个号码，我取名叫端口号，用2个字节来表示，总共65535个端口号，公司要通信的时候，向帝国网络通信部门申请，用完就回收。通信过程中，把这个端口号也带上，帝国网络通信部门收到来自网络的信息包裹后，根据上面收件人的端口号，就能交给具体业务的公司了！</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_7.png"></p><p>Linux：对对对，跟我想的简直一摸一样！</p><p>Unix：嗯，不错不错，其实我也想到了这个办法。好了现在怎么通信的问题解决了，大家觉得我们的标准还差什么不？</p><p>Linux：我觉得整体框架已经很完善了，有一个可以再优化一点的地方。</p><p>Unix：额哦，是什么呢？</p><p>Linux：目前的方案通信是没有问题了，但因为咱们的包裹都是拆开了一个个发，由于中间网络的路况变化，可能后发的先到，有些还可能丢掉了，需要补发，还有可能发重复了，还有可能后面发的优先级更高，需要加快处理等等各种复杂的情况其实还挺多的，咱们可能还得想一套办法来解决这个问题。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_8.png"></p><p>Unix：呀，听你这么一说，我瞬间觉得问题还挺大的啊</p><p>Windows：看来简单的分组转发还不行，得有一套传输控制协议，来专门来解决上面的问题。</p><p>Linux：是的，你继续说下去。</p><p>Windows：我们来改造下原来的 IP 协议，除了把刚才说到的端口号也加进去，同时再设置一些标记，对包裹编号，这样收到后才好排序，去重。</p><p>Linux：嗯，想法不错，不过我不建议改造原来的 IP 协议，IP 协议只负责帝国之间的传送，负责网络路由送达，至于数据的问题，不应该他来负责。我建议在 IP 协议后面再扩展一层出来，单独来做传输控制。</p><p>Unix：嗯， 我同意，不要把所有事情都搅合在一起，分层处理，每层只负责自己的职责。</p><p>Windows：也好，我也同意。</p><p>Linux：不过如何知道包裹丢失呢？</p><p>Windows：要不然这样，收到包裹后，得给一个答复，告诉发件人我收到了。</p><p>Linux：那其他问题呢？</p><p>Windows：额，暂时还没想好。</p><p>Unix：让我也出出注意，我们给这些数据包裹再加一些标志字段，用来对数据包裹进行编号，发送速度调节，优先级标识等等。</p><p>Windows：看起来可行，不过这双方可能在传输数据之前得先做些初始化工作。</p><p>Linux：嗯，要不在通信之前，双方先建立一个连接。</p><p>Unix：连接，怎么又要建立连接，不是分组转发吗？</p><p>Windows：是啊，你要开倒车吗？</p><p>Linux：两位先别急，此连接非彼连接，这是一个逻辑上的虚拟连接。正式通信之前先确认网络通达性，彼此做好初始化操作，可以理解为通过网络远程握手。通信完成后，再断开连接。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_9.jpg"></p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_10.jpg"></p><p>Windows：这样啊，倒是一个好办法。不过感觉这一套工作下来挺复杂的，有些公司业务比较简单，数据量小，信息包裹丢失大不了一会儿重发，弄这些感觉成本高，不一定所有公司会买账。</p><p>Unix：你说的这种情况也确实存在，要不这些比较简单的业务就不要走这套流程了，不用这套控制传输协议，单独弄一个简单版本的。</p><p>Linux：老大说的在理，刚才这套复杂的协议咱们取名叫 TCP 协议，就是传输控制协议的意思，老大说的简单版本的要不叫 UDP，用户数据报协议，只记录收发公司的端口号就行，非常简单。</p><p>Unix：非常好，就这么愉快的决定了！</p><p>Linux：老大，咱们这套标准改个名吧，叫 TCP/IP 协议如何？</p><p>Windows：这是两个协议，加上其他协议，这是一个家族了，应该叫 TCP/IP 协议族。</p><p>Unix：同意！应该叫协议族才对！</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_11.jpg"></p><h2 id="☆-第三天-☆"><a href="#☆-第三天-☆" class="headerlink" title="☆ 第三天 ☆"></a>☆ 第三天 ☆</h2><p>Unix、Linux、Windows 三大帝国集团代表发布《关于比特宇宙推进经贸合作的联合声明》，比特宇宙迎来全新的历史时期！</p><p>会议达成的网络通信标准 TCP/IP 协议族很快在比特宇宙中流行开来，无数的帝国纷纷拥抱因特网，没过多久，各种各样的网络业务便发展起来，因特网一片欣欣向荣。这其中发展最为迅速的要数 Web 业务，无数的帝国通过因特网相连，传输网页供人类浏览，后来人类又给他们取了一个新名字：<strong>互联网</strong>。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>后续：随着 Web 业务的不断发展，虽然我们提供了点分十进制的书写方法，不过记忆力低下的人类仍然觉得过 IP 地址来标记一个提供网页服务的帝国还是太难了。比特宇宙中一些精明的帝国公司发现了新的商机……</p><p>于是，为了便于人类记忆，有了域名这样的概念。例如，当用户想要访问百度公司的服务器时，用户并不想记住百度公司的服务器 IP 地址。而是在地址栏里输入百度公司的域名 <a href="http://www.baidu.com/">www.baidu.com</a> 后回车进行访问。</p><p>但在实际访问服务器时，在这个访问过程中最终是通过 IP 地址访问服务器的，那么在访问过程中是谁将域名转换成 IP 地址呢？是 <strong>DNS</strong>。</p><blockquote><p>DNS：域名系统（英文：Domain Name System，缩写：DNS）是互联网的一项服务。它作为将域名和 IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 UDP 端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。</p></blockquote><p>当我们想知道域名对应的 IP 地址怎么办呢？</p><p>按下键盘上 Win + R 打开运行窗口并输入 cmd 后回车</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_12.png"></p><p>接下来在命令行输入 <code>ping www.baidu.com</code>，即 ping + 域名。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Byte_World_TCP_IP/dots_Byte_World_TCP_IP_13.png"></p><p>我们看到来自 110.242.68.3 的回复。 </p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP/IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP S</title>
    <link href="/blog/study/HTTPS_study_0001/"/>
    <url>/blog/study/HTTPS_study_0001/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文转载自微信公众号：<strong>小林coding</strong></p>          </div><p>我很早之前写过一篇关于 HTTP 和 HTTPS 的文章，但对于 HTTPS 介绍还不够详细，只讲了比较基础的部分，所以这次我们再来深入一下 HTTPS，用<span class="label label-info">实战抓包</span>的方式，带大家再来窥探一次 HTTPS。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_1.png"></p><p>对于还不知道对称加密和非对称加密的同学，你先复习我以前的这篇文章<a href="https://mp.weixin.qq.com/s/bUy220-ect00N4gnO0697A"><strong>「硬核！30 张图解 HTTP 常见的面试题」</strong></a>，本篇文章默认大家已经具备了这些知识。</p><h2 id="TLS-握手过程"><a href="#TLS-握手过程" class="headerlink" title="TLS 握手过程"></a>TLS 握手过程</h2><p>HTTP 由于是明文传输，所谓的明文，就是说客户端与服务端通信的信息都是肉眼可见的，随意使用一个抓包工具都可以截获通信的内容。</p><p>所以安全上存在以下三个风险：</p><div class="note note-danger">            <p><strong>窃听风险</strong>，比如通信链路上可以获取通信内容，用户号容易没。</p>          </div><div class="note note-danger">            <p><strong>篡改风险</strong>，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。</p>          </div><div class="note note-danger">            <p><strong>冒充风险</strong>，比如冒充淘宝网站，用户钱容易没。</p>          </div><p>HTTP <strong>S</strong> 在 HTTP 与 TCP 层之间加入了 TLS 协议，来解决上述的风险。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_2.jpg"></p><p>TLS 协议是如何解决 HTTP 的风险的呢？</p><div class="note note-info">            <p><strong>信息加密</strong>：HTTP 交互信息是被加密的，第三方就无法被窃取；</p>          </div><div class="note note-info">            <p><strong>校验机制</strong>：校验信息传输过程中是否有被第三方篡改过，如果被篡改过，则会有警告提示；</p>          </div><div class="note note-info">            <p><strong>身份证书</strong>：证明淘宝是真的淘宝网；</p>          </div><p>可见，有了 TLS 协议，能保证 HTTP 通信是安全的了，那么在进行 HTTP 通信前，需要先进行 TLS 握手。TLS 的握手过程，如下图：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_3.png"></p><p>上图简要概述了 TLS 的握手过程，其中每一个「框」都是一个<strong>记录（record）</strong>，记录是 TLS 收发数据的基本单位，类似于 TCP 里的 segment。多个记录可以组合成一个 TCP 包发送，<span class="label label-info">所以通常经过「四个消息」就可以完成 TLS 握手，也就是需要 2个 RTT 的时延</span>，然后就可以在安全的通信环境里发送 HTTP 报文，实现 HTTPS 协议。</p><p>所以可以发现，HTTPS 是应用层协议，需要先完成 TCP 连接建立，然后走 TLS 握手过程后，才能建立通信安全的连接。</p><p>事实上，不同的密钥交换算法，TLS 的握手过程可能会有一些区别。</p><p>这里先简单介绍下密钥交换算法，因为考虑到性能的问题，所以双方在加密应用信息时使用的是对称加密密钥，而对称加密密钥是不能被泄漏的，为了保证对称加密密钥的安全性，所以使用非对称加密的方式来保护对称加密密钥的协商，这个工作就是密钥交换算法负责的。</p><p>接下来，我们就以最简单的 <strong>RSA</strong> 密钥交换算法，来看看它的 TLS 握手过程。</p><details><summary>继续阅读</summary><h2 id="RSA-握手过程"><a href="#RSA-握手过程" class="headerlink" title="RSA 握手过程"></a>RSA 握手过程</h2><p>传统的 TLS 握手基本都是使用 RSA 算法来实现密钥交换的，在将 TLS 证书部署服务端时，证书文件中包含一对公私钥，其中公钥会在 TLS 握手阶段传递给客户端，私钥则一直留在服务端，一定要确保私钥不能被窃取。</p><p>在 RSA 密钥协商算法中，客户端会生成随机密钥，并使用服务端的公钥加密后再传给服务端。根据非对称加密算法，公钥加密的消息仅能通过私钥解密，这样服务端解密后，双方就得到了相同的密钥，再用它加密应用消息。</p><p>我用 Wireshark 工具抓了用 RSA 密钥交换的 TLS 握手过程，你可以从下面看到，一共经历来四次握手：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_4.png"></p><p>对应 Wireshark 的抓包，我也画了一幅图，你可以从下图很清晰地看到该过程：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_5.png"></p><p>那么，接下来针对每一个 TLS 握手做进一步的介绍。</p><h3 id="TLS-第一次握手"><a href="#TLS-第一次握手" class="headerlink" title="TLS 第一次握手"></a>TLS 第一次握手</h3><p>客户端首先会发一个「Client Hello」消息，字面意思我们也能理解到，这是跟服务器「打招呼」。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_6.png"></p><p>消息里面有客户端使用的 TLS 版本号、支持的密码套件列表，以及生成的<strong>随机数（Client Random）</strong>，这个随机数会被服务端保留，它是生成对称加密密钥的材料之一。</p><h3 id="TLS-第二次握手"><a href="#TLS-第二次握手" class="headerlink" title="TLS 第二次握手"></a>TLS 第二次握手</h3><p>当服务端收到客户端的「Client Hello」消息后，会确认 TLS 版本号是否支持，和从密码套件列表中选择一个密码套件，以及生成随机数（Server Random）。</p><p>接着，返回「Server Hello」消息，消息里面有服务器确认的 TLS 版本号，也给出了随机数（Server Random），然后从客户端的密码套件列表选择了一个合适的密码套件。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_7.png"></p><p>可以看到，服务端选择的密码套件是 “Cipher Suite: TLS_RSA_WITH_AES_128_GCM_SHA256”。</p><p>这个密码套件看起来真让人头晕，好一大串，但是其实它是有固定格式和规范的。基本的形式是「<strong>密钥交换算法</strong> + <strong>签名算法</strong> + <strong>对称加密算法</strong> + <strong>摘要算法</strong>」， 一般 WITH 单词前面有两个单词，第一个单词是约定密钥交换的算法，第二个单词是约定证书的验证算法。比如刚才的密码套件的意思就是：</p><div class="note note-info">            <p>由于 WITH 单词只有一个 RSA，则说明握手时密钥交换算法和签名算法都是使用 RSA；</p>          </div><div class="note note-info">            <p>握手后的通信使用 AES 对称算法，密钥长度 128 位，分组模式是 GCM；</p>          </div><div class="note note-info">            <p>摘要算法 SHA256 用于消息认证和产生随机数；</p>          </div><p>就前面这两个客户端和服务端相互「打招呼」的过程，客户端和服务端就已确认了 TLS 版本和使用的密码套件，而且你可能发现客户端和服务端都会各自生成一个随机数，并且还会把随机数传递给对方。</p><p>那这个随机数有啥用呢？其实这两个随机数是后续作为生成「会话密钥」的条件，所谓的会话密钥就是数据传输时，所使用的对称加密密钥。</p><p>然后，服务端为了证明自己的身份，会发送「<strong>Server Certificate</strong>」给客户端，这个消息里含有数字证书。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_8.png"></p><p>随后，服务端发了「<strong>Server Hello Done</strong>」消息，目的是告诉客户端，我已经把该给你的东西都给你了，本次打招呼完毕。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_9.png"></p><h4 id="客户端验证证书"><a href="#客户端验证证书" class="headerlink" title="客户端验证证书"></a>客户端验证证书</h4><p>在这里刹个车，客户端拿到了服务端的数字证书后，要怎么校验该数字证书是真实有效的呢？</p><h4 id="数字证书和-CA-机构"><a href="#数字证书和-CA-机构" class="headerlink" title="数字证书和 CA 机构"></a>数字证书和 CA 机构</h4><p>在说校验数字证书是否可信的过程前，我们先来看看数字证书是什么，一个数字证书通常包含了：</p><ol><li>公钥；</li><li>持有者信息；</li><li>证书认证机构（CA）的信息；</li><li>CA 对这份文件的数字签名及使用的算法；</li><li>证书有效期；</li><li>还有一些其他额外信息；</li></ol><p>那数字证书的作用，是用来认证公钥持有者的身份，以防止第三方进行冒充。说简单些，证书就是用来告诉客户端，该服务端是否是合法的，因为只有证书合法，才代表服务端身份是可信的。</p><p>我们用证书来认证公钥持有者的身份（服务端的身份），那证书又是怎么来的？又该怎么认证证书呢？</p><p>为了让服务端的公钥被大家信任，服务端的证书都是由 CA （<strong>Certificate Authority</strong>，证书认证机构）签名的，CA 就是网络世界里的公安局、公证中心，具有极高的可信度，所以由它来给各个公钥签名，信任的一方签发的证书，那必然证书也是被信任的。</p><p>之所以要签名，是因为签名的作用可以避免中间人在获取证书时对证书内容的篡改。</p><h4 id="数字证书签发和验证流程"><a href="#数字证书签发和验证流程" class="headerlink" title="数字证书签发和验证流程"></a>数字证书签发和验证流程</h4><p>如下图图所示，为数字证书签发和验证流程：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_10.png"></p><p>CA 签发证书的过程，如上图左边部分：</p><ol><li>首先 CA 会把持有者的公钥、用途、颁发者、有效时间等信息打成一个包，然后对这些信息进行 Hash 计算，得到一个 Hash 值；</li><li>然后 CA 会使用自己的私钥将该 Hash 值加密，生成 Certificate Signature，也就是 CA 对证书做了签名；</li><li>最后将 Certificate Signature 添加在文件证书上，形成数字证书；</li></ol><p>客户端校验服务端的数字证书的过程，如上图右边部分：</p><ol><li>首先客户端会使用同样的 Hash 算法获取该证书的 Hash 值 H1；</li><li>通常浏览器和操作系统中集成了 CA 的公钥信息，浏览器收到证书后可以使用 CA 的公钥解密 Certificate Signature 内容，得到一个 Hash 值 H2 ；</li><li>最后比较 H1 和 H2，如果值相同，则为可信赖的证书，否则则认为证书不可信。</li></ol><h4 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h4><p>但事实上，证书的验证过程中还存在一个证书信任链的问题，因为我们向 CA 申请的证书一般不是根证书签发的，而是由中间证书签发的，比如百度的证书，从下图你可以看到，证书的层级有三级：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_11.png"></p><p>对于这种三级层级关系的证书的验证过程如下：</p><p>客户端收到 baidu.com 的证书后，发现这个证书的签发者不是根证书，就无法根据本地已有的根证书中的公钥去验证 baidu.com 证书是否可信。于是，客户端根据 baidu.com 证书中的签发者，找到该证书的颁发机构是 “GlobalSign Organization Validation CA - SHA256 - G2”，然后向 CA 请求该中间证书。</p><p>请求到证书后发现 “GlobalSign Organization Validation CA - SHA256 - G2” 证书是由 “GlobalSign Root CA” 签发的，由于 “GlobalSign Root CA” 没有再上级签发机构，说明它是根证书，也就是自签证书。应用软件会检查此证书有否已预载于根证书清单上，如果有，则可以利用根证书中的公钥去验证 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，如果发现验证通过，就认为该中间证书是可信的。</p><p>“GlobalSign Organization Validation CA - SHA256 - G2” 证书被信任后，可以使用 “GlobalSign Organization Validation CA - SHA256 - G2” 证书中的公钥去验证 baidu.com 证书的可信性，如果验证通过，就可以信任 baidu.com 证书。</p><p>在这四个步骤中，最开始客户端只信任根证书 GlobalSign Root CA 证书的，然后 “GlobalSign Root CA” 证书信任 “GlobalSign Organization Validation CA - SHA256 - G2” 证书，而 “GlobalSign Organization Validation CA - SHA256 - G2” 证书又信任 baidu.com 证书，于是客户端也信任 baidu.com 证书。</p><p>总括来说，由于用户信任 GlobalSign，所以由 GlobalSign 所担保的 baidu.com 可以被信任，另外由于用户信任操作系统或浏览器的软件商，所以由软件商预载了根证书的 GlobalSign 都可被信任。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_12.png"></p><p>操作系统里一般都会内置一些根证书，比如我的 MAC 电脑里内置的根证书有这么多：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_13.png"></p><p>这样的一层层地验证就构成了一条信任链路，整个证书信任链验证流程如下图所示：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_14.png"></p><p>最后一个问题，为什么需要证书链这么麻烦的流程？Root CA 为什么不直接颁发证书，而是要搞那么多中间层级呢？</p><p>这是为了确保根证书的绝对安全性，将根证书隔离地越严格越好，不然根证书如果失守了，那么整个信任链都会有问题。</p><h3 id="TLS-第三次握手"><a href="#TLS-第三次握手" class="headerlink" title="TLS 第三次握手"></a>TLS 第三次握手</h3><p>客户端验证完证书后，认为可信则继续往下走。接着，客户端就会生成一个新的<strong>随机数 (pre-master)**，用服务器的 RSA 公钥加密该随机数，通过「</strong>Change Cipher Key Exchange**」消息传给服务端。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_15.png"></p><p>服务端收到后，用 RSA 私钥解密，得到客户端发来的随机数 (pre-master)。</p><p>至此，客户端和服务端双方都共享了三个随机数，分别是 <strong>Client Random</strong>、<strong>Server Random</strong>、<strong>pre-master</strong>。</p><p>于是，双方根据已经得到的三个随机数，生成<strong>会话密钥（Master Secret）</strong>，它是对称密钥，用于对后续的 HTTP 请求/响应的数据加解密。</p><p>生成完会话密钥后，然后客户端发一个「<strong>Change Cipher Spec</strong>」，告诉服务端开始使用加密方式发送消息。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_16.png"></p><p>然后，客户端再发一个「Encrypted Handshake Message（Finishd）」消息，把之前所有发送的数据做个摘要，再用会话密钥（master secret）加密一下，让服务器做个验证，验证加密通信是否可用和之前握手信息是否有被中途篡改过。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_17.png"></p><p>可以发现，「Change Cipher Spec」之前传输的 TLS 握手数据都是明文，之后都是对称密钥加密的密文。</p><h3 id="TLS-第四次握手"><a href="#TLS-第四次握手" class="headerlink" title="TLS 第四次握手"></a>TLS 第四次握手</h3><p>服务器也是同样的操作，发「<strong>Change Cipher Spec</strong>」和「<strong>Encrypted Handshake Message</strong>」消息，如果双方都验证加密和解密没问题，那么握手正式完成。</p><p>最后，就用「<strong>会话密钥</strong>」加解密 HTTP 请求和响应了。</p><h2 id="RSA-算法的缺陷"><a href="#RSA-算法的缺陷" class="headerlink" title="RSA 算法的缺陷"></a>RSA 算法的缺陷</h2><p><strong>使用 RSA 密钥协商算法的最大问题是不支持前向保密</strong>。因为客户端传递随机数（用于生成对称加密密钥的条件之一）给服务端时使用的是公钥加密的，服务端收到到后，会用私钥解密得到随机数。所以一旦服务端的私钥泄漏了，过去被第三方截获的所有 TLS 通讯密文都会被破解。</p><p>为了解决这一问题，于是就有了 DH 密钥协商算法，这里简单介绍它的工作流程。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/study/HTTPS_study_0001/HTTPS_study_0001_18.png"></p><p>客户端和服务端各自会生成随机数，并以此作为私钥，然后根据公开的 DH 计算公示算出各自的公钥，通过 TLS 握手双方交换各自的公钥，这样双方都有自己的私钥和对方的公钥，然后双方根据各自持有的材料算出一个随机数，这个随机数的值双方都是一样的，这就可以作为后续对称加密时使用的密钥。</p><p>DH 密钥交换过程中，<strong>即使第三方截获了 TLS 握手阶段传递的公钥，在不知道的私钥的情况下，也是无法计算出密钥的，而且每一次对称加密密钥都是实时生成的，实现前向保密。</strong></p><p>但因为 DH 算法的计算效率问题，后面出现了 ECDHE 密钥协商算法，我们现在大多数网站使用的正是 ECDHE 密钥协商算法。</p></details>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>善待自己，珍视他人。</title>
    <link href="/blog/life/life_0002/"/>
    <url>/blog/life/life_0002/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>善待自己，珍视他人。</p>          </div><div align="center"><video poster="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/life/life_0002/life_0002_1.jpg" src="https://static-video-1253741713.cos.ap-beijing.myqcloud.com/Steve_Jobs_last_words.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" preload="meta">Your browser does not support the video tag.</video></div>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is React ?</title>
    <link href="/blog/study/React_study_0001/"/>
    <url>/blog/study/React_study_0001/</url>
    
    <content type="html"><![CDATA[<p>React 到底是什么？为什么它那么受欢迎？它到底解决了什么问题？</p><div class="note note-success">            <p>答案：React 是一个用于构建用户界面的、声明式、组件化的 JavaScript 库。</p>          </div><p>JavaScript 库？声明式？组件化？不是说好了是小白秘籍吗？</p><p>好吧，上面那行字是从官方网站拷过来拼凑的。接下来，让我用另一种方式为你讲解 React。很负责任地说，只要你对 HTML 有大致的了解（例如，HTML 标签的格式），应该就能看懂这篇文章、理解 React 的核心概念。</p><p>具体什么方式呢？先卖个关子放几个表情符：</p><p>🌴</p><p>✈️</p><section style="line-height: 1.75em;margin-top: 5px;margin-bottom: 20px;"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 -48 512 512" style="color: rgb(0, 0, 0);font-family: Montserrat, ui-sans-serif, system-ui, -apple-system, &quot;Segoe UI&quot;, Roboto, Ubuntu, Cantarell, &quot;Noto Sans&quot;, sans-serif, system-ui, &quot;Helvetica Neue&quot;, Arial, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;, &quot;Noto Color Emoji&quot;;font-size: medium;text-align: start;white-space: normal;"><g fill="#40404c"><path d="M211.023 137.027h89.95v145.938h-89.95zm0 0M298.3 72.402V52.211c0-24.637 19.973-44.61 44.614-44.61a44.665 44.665 0 0124.809 7.528 44.657 44.657 0 0116.425 20.066l7.207 17.473"></path><path d="M279.29 123.621v171.84l128.757-23.563 89.082-16.308L430.344 93.69a78.505 78.505 0 00-28.906-35.308 78.457 78.457 0 00-47.641-13.153c-41.5 2.067-74.508 36.383-74.508 78.391zm0 0"></path></g><path fill="#5b5b68" d="M353.797 45.23l54.25 226.668 89.082-16.308L430.344 93.69a78.505 78.505 0 00-28.906-35.308 78.457 78.457 0 00-47.641-13.153zm0 0"></path><path fill="#e4e4ef" d="M504.398 295.457c0 62.164-50.394 112.559-112.558 112.559-62.164 0-112.555-50.395-112.555-112.559 0-62.164 50.39-112.559 112.555-112.559 62.164 0 112.558 50.395 112.558 112.559zm0 0"></path><path fill="#40404c" d="M471.434 295.457c0 43.957-35.637 79.59-79.594 79.59-43.953 0-79.59-35.633-79.59-79.59s35.637-79.59 79.59-79.59c43.957 0 79.594 35.633 79.594 79.59zm0 0"></path><path fill="#589ce0" d="M314.191 277.918c7.985 35.52 39.715 62.062 77.641 62.062 37.922 0 69.664-26.542 77.648-62.062-7.984-35.52-39.714-62.055-77.64-62.055-37.934 0-69.664 26.535-77.649 62.055zm0 0"></path><path fill="#40404c" d="M120.645 52.668l7.203-17.473a44.69 44.69 0 0116.43-20.066 44.665 44.665 0 0124.808-7.527c24.637 0 44.613 19.972 44.613 44.609v20.191"></path><path fill="#5b5b68" d="M232.71 123.621v171.84l-128.757-23.563-89.082-16.308L81.656 93.69a78.522 78.522 0 0128.903-35.308 78.479 78.479 0 0147.644-13.153c41.5 2.067 74.508 36.383 74.508 78.391zm0 0"></path><path fill="#40404c" d="M158.203 45.23l-54.25 226.668-89.082-16.308L81.656 93.69a78.522 78.522 0 0128.903-35.308 78.479 78.479 0 0147.644-13.153zm0 0"></path><path fill="#e4e4ef" d="M232.715 295.457c0 62.164-50.39 112.559-112.555 112.559-62.164 0-112.558-50.395-112.558-112.559 0-62.164 50.394-112.559 112.558-112.559 62.164 0 112.555 50.395 112.555 112.559zm0 0"></path><path fill="#40404c" d="M199.75 295.457c0 43.957-35.637 79.59-79.59 79.59-43.957 0-79.594-35.633-79.594-79.59s35.637-79.59 79.594-79.59c43.953 0 79.59 35.633 79.59 79.59zm0 0"></path><path fill="#589ce0" d="M197.809 277.918c-7.985 35.52-39.715 62.062-77.641 62.062-37.922 0-69.664-26.542-77.648-62.062 7.984-35.52 39.714-62.055 77.64-62.055 37.934 0 69.664 26.535 77.649 62.055zm0 0"></path><path fill="#357fbc" d="M89.21 295.46c0 15.548 4.45 30.04 12.165 42.29-29.281-7.094-52.234-30.371-58.863-59.832 7.988-35.52 39.718-62.055 77.64-62.055a79.306 79.306 0 0124.325 3.793C112.422 229.93 89.21 259.98 89.21 295.461zm0 0M360.89 295.46c0 15.548 4.45 30.04 12.165 42.29-29.282-7.094-52.235-30.371-58.864-59.832 7.989-35.52 39.72-62.055 77.641-62.055 8.484 0 16.66 1.328 24.324 3.793-32.054 10.274-55.265 40.324-55.265 75.805zm0 0"></path><path d="M120.16 208.266c-48.078 0-87.191 39.113-87.191 87.191s39.113 87.191 87.191 87.191c48.074 0 87.188-39.113 87.188-87.191s-39.114-87.191-87.188-87.191zm0 15.203c33.645 0 61.961 23.203 69.817 54.445-3.766 15.024-12.426 28.625-24.551 38.45-12.75 10.327-28.824 16.015-45.262 16.015-16.441 0-32.516-5.688-45.27-16.016-12.124-9.824-20.789-23.425-24.554-38.449 7.855-31.242 36.172-54.445 69.82-54.445zm0 143.976c-33.863 0-62.32-23.504-69.96-55.05a87.387 87.387 0 0015.128 15.78c15.45 12.516 34.922 19.407 54.836 19.407 19.91 0 39.383-6.89 54.832-19.406a87.712 87.712 0 0015.121-15.778c-7.644 31.543-36.097 55.047-69.957 55.047zm0 0"></path><path d="M504.188 252.852a225.242 225.242 0 00-2.055-5.059l-64.762-157c-7.98-19.344-22.355-34.59-40.105-43.727l-6.09-14.77A52.095 52.095 0 00371.94 8.81 52.135 52.135 0 00342.911 0c-28.79 0-52.212 23.422-52.212 52.21v17.528c-11.883 14.766-19.02 33.504-19.02 53.887v5.8h-31.363v-5.8c0-20.383-7.136-39.121-19.02-53.887V52.211C221.297 23.42 197.876 0 169.087 0c-10.36 0-20.399 3.047-29.04 8.816a52.092 52.092 0 00-19.226 23.48l-6.09 14.77C96.984 56.203 82.605 71.45 74.63 90.793l-16.625 40.3a7.6 7.6 0 004.129 9.927 7.593 7.593 0 009.922-4.13l16.625-40.3c10.992-26.645 36.718-43.86 65.539-43.86 39.09 0 70.894 31.801 70.894 70.895V237.02c-20.566-36.79-59.902-61.723-104.957-61.723-28.219 0-54.191 9.785-74.719 26.129l16.407-39.774c1.601-3.879-.25-8.324-4.13-9.925-3.878-1.602-8.323.25-9.925 4.128L9.867 247.79c-.594 1.367-2.215 5.414-2.289 5.672C2.684 266.539 0 280.69 0 295.457c0 66.254 53.902 120.156 120.16 120.156 66.254 0 120.156-53.902 120.156-120.156v-4.89h31.368v4.89c0 66.254 53.902 120.156 120.156 120.156 66.258 0 120.16-53.902 120.16-120.156 0-14.996-2.77-29.355-7.813-42.605zM154.217 37.527c-6.874 0-13.6.82-20.081 2.36l.738-1.793a36.915 36.915 0 0113.621-16.64 36.969 36.969 0 0120.59-6.255c20.406 0 37.012 16.606 37.012 37.012v2.754c-14.438-10.934-32.41-17.438-51.88-17.438zM342.915 15.2c7.344 0 14.461 2.164 20.578 6.246a36.926 36.926 0 0113.633 16.649l.738 1.793a86.64 86.64 0 00-20.086-2.36c-19.465 0-37.437 6.504-51.875 17.438V52.21c0-20.406 16.602-37.012 37.012-37.012zm-56.027 108.426c0-39.094 31.8-70.895 70.894-70.895 28.82 0 54.547 17.215 65.535 43.86l43.247 104.836c-20.528-16.344-46.504-26.13-74.723-26.13-45.055 0-84.39 24.934-104.953 61.72zm-15.203 21.004v72.969h-31.368v-72.97zM120.16 400.414c-57.875 0-104.957-47.082-104.957-104.957S62.285 190.5 120.16 190.5c57.871 0 104.953 47.082 104.953 104.957S178.031 400.414 120.16 400.414zm120.156-125.05v-42.567h31.368v42.566zm151.524 125.05c-57.871 0-104.953-47.082-104.953-104.957S333.969 190.5 391.84 190.5c57.875 0 104.957 47.082 104.957 104.957S449.715 400.414 391.84 400.414zm0 0"></path><path d="M450.883 241.547c-3.356 2.523-4.024 7.289-1.5 10.644 5.844 7.758 9.976 16.438 12.289 25.66-3.758 15.047-12.426 28.676-24.57 38.512-12.747 10.328-28.82 16.016-45.262 16.016-16.438 0-32.516-5.688-45.266-16.016-12.125-9.82-20.789-23.422-24.554-38.441 7.851-31.246 36.171-54.453 69.82-54.453 14.426 0 28.344 4.25 40.242 12.289a7.599 7.599 0 0010.555-2.043 7.6 7.6 0 00-2.043-10.555c-14.422-9.742-31.282-14.894-48.754-14.894-48.078 0-87.192 39.113-87.192 87.191s39.114 87.191 87.192 87.191 87.191-39.113 87.191-87.191c0-19.082-6.054-37.207-17.508-52.41-2.52-3.356-7.285-4.027-10.64-1.5zM391.84 367.445c-33.856 0-62.313-23.5-69.953-55.043a87.422 87.422 0 0015.12 15.774c15.45 12.515 34.923 19.406 54.837 19.406 19.91 0 39.383-6.89 54.832-19.406A87.382 87.382 0 00461.8 312.39c-7.64 31.55-36.098 55.054-69.961 55.054zm0 0"></path></svg></section><p>来，跟我一起到高处俯瞰 React 的全貌，然后拿起望远镜，拉近、放大、观察细节，挽起袖子写一个真正的 React 组件。没错，不懂 JavaScript 也照样写！</p><details><summary>准备好启程了吗？</summary><h2 id="Web-二三事"><a href="#Web-二三事" class="headerlink" title="Web 二三事"></a>Web 二三事</h2><p>第一站，我们先从一个你或许听说过很多次的概念说起：<strong>DOM</strong>。</p><h2 id="DOM-是什么？"><a href="#DOM-是什么？" class="headerlink" title="DOM 是什么？"></a>DOM 是什么？</h2><p>当你将一个网址输入浏览器的时候，你的电脑和远方的另一台电脑就开始对话。这台远方的电脑一般被称之为服务器。你的电脑发出请求，向服务器索取某种信息，服务器随即做出应答：</p><blockquote><p>你的电脑：伙计，这个网站靠不靠谱啊？网址是：learnreact.design</p></blockquote><blockquote><p>服务器：少安毋躁，让我查查。嘀。嘟。</p></blockquote><p>服务器的应答数据主要包括了三个部分：HTML、CSS 和 JavaScript。</p><p>HTML 列举出一个网页的内容并描述其结构。例如，页面上有多少个标题和段落？给用户显示什么图片？这个按钮和那个文本输入框是不是应该放到同一个容器里？</p><p>利用 HTML 里的信息，浏览器将会创建一个叫做 DOM 的家伙。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_1.jpg"></p><p>嗯？等等，DOM 是一棵树？回答正确，就是一棵树！我们电脑里有很多东西都看起来像一棵树，我知道这听起来有点奇怪。我们给这位大树朋友起个名字吧，叫“朵模（Domo）”如何？</p><p>朵模在一间名为“Web 浏览器”的艺术工作室里做人体模特（哦，不对，是树体模特）。跟其他的模特一样，朵模的工作是摆出各种姿势，让画家给他画一副“树”体写生。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_2.jpg"></p><p>DOM 是 Document Object Model 的缩写。从某种意义上说，它确实是一个模特，更确切地说是模型、网页文档的模型。当 DOM 摆出一个姿势时，浏览器就开始写生。这些所谓的写生画就是我们在网页上所看到的内容：文本框、段落、图片等等。程序员的职责就是告诉朵模如何穿戴和如何摆姿势。这就决定了网页上最终显示什么内容。</p><p>如果你使用桌面电脑的浏览器（如 Chrome）看这篇文章，在页面上右击鼠标、选择“Inspect”，就可以在 Element 标签页里看到 DOM 的真实模样。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_3.jpg"></p><h2 id="DOM-的-API"><a href="#DOM-的-API" class="headerlink" title="DOM 的 API"></a>DOM 的 API</h2><p>我们经常希望一个网页是动态和交互式的，也就是说，网页的内容会时不时发生变化。一会儿在这里加点文字，一会儿又显示一个对话框，一会儿又根据从服务器下载的数据更新图表。</p><p>记住，任何时候如果希望网页内容发生变化，我们都需要更改 DOM。朵模如果不改变姿势，浏览器里的画家就不可能画出新的作品。</p><p>那么，怎样才能让朵模改变姿势呢？</p><p>我们直接告诉他就行了，他会听的。有意思的是，朵模的耳朵还有一个专属的名字：<strong>API</strong>。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_4.jpg"></p><p>程序员们使用 JavaScript 书写代码来向 DOM API 下达命令，于是，网页内容便随着 DOM 的更改而发生变化。</p><h2 id="越来越复杂的-web-开发"><a href="#越来越复杂的-web-开发" class="headerlink" title="越来越复杂的 web 开发"></a>越来越复杂的 web 开发</h2><p>多年来，直接与 DOM 对话一直是 web 开发的标准方法，特别是当大多数 web 内容是静态页面的时候。程序员们典型的做法是，在静态页面的基础上加一点点 JavaScript 代码来点缀一些交互效果。</p><p>然而，当众多的 SPA （Single Page Application）出现后，例如，Gmail 和 Google 地图，用户们开始对 web 有了更高的期望。他们不再只满足于大多数情况下都是静态的 web 页面，他们更希望看到的是交互性强、响应迅速的 web 应用。</p><p>为了开发满足这些条件的 web 应用，代码变得越来越复杂，与 DOM 直接对话这种方式越来越显得低效而繁琐，Web 开发的传统方法越来越显得捉襟见肘。人们开始寻找更高效、更便捷的开发方法。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_5.jpg"></p><h2 id="React-的核心思想"><a href="#React-的核心思想" class="headerlink" title="React 的核心思想"></a>React 的核心思想</h2><p>女士们、先生们，让我们隆重欢迎 React 出场！</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_6.jpg"></p><p>在 React 的帮助下，程序员们不再直接与朵模对话。React 充当起了程序员的代言人。他让程序员与朵模之间的沟通变得无比顺畅，将写生的过程管理得井井有条。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_7.jpg"></p><p>React 由 JavaScript 开发而成，它的设计目标之一是让我们在大多数情况下不再需要直接操作 DOM API。取而代之的是，我们只需要编写相对简单的代码，而 React 将其翻译为 DOM 理解的语言。</p><p>React 的超能力归纳起来有三条，完美地处理了与日俱增的 web 开发复杂度：</p><ul><li>组件（Component）</li><li>声明式界面编程（Declarative UI）</li><li>响应式 DOM 更新机制（Reactive DOM updates）</li></ul><p>如果这几个名词听起来像天书，别担心！我会用简单的语言和插画来帮你理解。其实没有想象的那么难，相信我没错的。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>组件是 React 的旗舰功能。其核心思想基于一个简单的策略：<strong>分而治之</strong>。如果一个问题作为一个整体很难理解透彻和解决，我们就把它拆分为多个小问题，各个击破，最后再将结果综合起来。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_8.jpg"></p><p>使用 React 写程序的时候，几乎所有的时间都是在跟组件打交道：将整个应用分割为组件、寻找最合适的组件、将不同组件拼装起来、在原有组件基础上制作新组件，如此等等。</p><p>现今的设计工具也支持组件功能，例如 Framer 和 Figma，再如 Sketch 中的 symbol。这些组件与 React 中的组件属于同一个概念，只不过后者更加灵活和功能强大。事实上，这些工具中组件的设计灵感直接来自于软件工程中的组件概念。</p><p>一旦一个组件创建完成，我们可以多次使用它（创建组件实例），可以用这个组件创建另外的组件。当一个组件发生变动时，包含这个组件的所有其他组件也会自动发生相应变化。</p><p>React 组件有两条重要的属性：</p><ol><li>组件是可组合的（composable）。组件的目的在于重用，我们可以使用现有组件创建新组件。</li><li>一个组件独立于其它组件（independent）。当修改一个组件时，不相干的组件不会受到干扰。</li></ol><p>太抽象？别担心，等会看了例子你就明白了。</p><h3 id="声明式用户界面（Declarative-UI）"><a href="#声明式用户界面（Declarative-UI）" class="headerlink" title="声明式用户界面（Declarative UI）"></a>声明式用户界面（Declarative UI）</h3><h3 id="命令式与声明式"><a href="#命令式与声明式" class="headerlink" title="命令式与声明式"></a>命令式与声明式</h3><p>当直接操作 DOM API 时，我们需要明确写出在具体什么时刻、以何种顺序来修改哪个元素。这种操作就像手把手、一步一步地指导朵模该怎么摆姿势：头该怎么偏、手摆哪儿、脚怎么站。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_9.jpg"></p><p>这听起来是不是繁琐又容易出错？为什么我们不能直接告诉朵模我们想要什么，而不是怎么做？使用 React 写程序就是这个思路！程序员画一个简图描述所期待的结果，React 代劳向朵模解释怎么摆姿势。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_10.jpg"></p><p>因为我们编写的应用是动态的，我们经常希望朵模很快速地变换姿势。于是我们就一次性画很多简图拿给 React。React 将这些简图摞成一叠，像用手翻书一样手指一翻，一个动态的用户界面就跃然眼前了！</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_11.jpg"></p><p>用技术术语来讲，如果一段代码定义的是如何做一件事的步骤，我们称之为<strong>命令式</strong>；相反，如果定义的是我们所预期的最终结果，它就是<strong>声明式</strong>。直接操作 DOM API 的传统 web 开发方式是命令式，而 React 是声明式。</p><h3 id="虚拟-DOM（Virtual-DOM）"><a href="#虚拟-DOM（Virtual-DOM）" class="headerlink" title="虚拟 DOM（Virtual DOM）"></a>虚拟 DOM（Virtual DOM）</h3><p>除了让程序员们更轻松，声明式的 React 还提供了性能优化的机会。</p><p>当 React 事先拿到了所有的简图，他可以将其整理归类、删除重复部分，以此保证朵模和艺术家只做最少的事，节省了大量的时间。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_12.jpg"></p><p>这些所谓的简图被称为<strong>虚拟 DOM</strong>。操作虚拟 DOM 比操作正常的 DOM 要快捷很多，程序员们大部分时候都是在跟虚拟 DOM 打交道，由 React 来代理管理那缓慢的 DOM。</p><h3 id="响应式-DOM-更新（Reactive-DOM-updates）"><a href="#响应式-DOM-更新（Reactive-DOM-updates）" class="headerlink" title="响应式 DOM 更新（Reactive DOM updates）"></a>响应式 DOM 更新（Reactive DOM updates）</h3><p>更炫的是，想像一下如果我们能在简图里留下一些占位空白来代表同一个姿势的变体。这样的话，当有人索要朵模戴不同帽子的写生画时，我们就不需要再次跟 React 沟通，只需要坐下来看着 React 为我们更换就行了。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_13.jpg"></p><p>这里的帽子是决定用户界面动态内容的原始数据，我们写程序时只需要将该数据与相应界面元素关联好，就不需要再做任何后续干涉。当数据发生变化时，React 将自动对相关 DOM 元素做相应的调整。这样看起来就像是 DOM 响应了数据变化（的号召）而自发地做出更改，我们并不需要手动跟踪数据的变化，也不需要担心何时去更改 DOM（实质上是 React 代劳）。这就是响应式（reactive）界面开发方法。这个点子极大地简化了用户界面的开发工作。</p><h2 id="也许是你人生中第一个-React-组件"><a href="#也许是你人生中第一个-React-组件" class="headerlink" title="也许是你人生中第一个 React 组件"></a>也许是你人生中第一个 React 组件</h2><p>现在，让我们来复习一下刚刚学到的知识，并且写一个真实的 React 组件来练练手。为了让你能够轻松理解，我在代码里省略了一些细节，例如 JavaScript。这样做的目标是为了突出核心概念，而不至于让其淹没在 JavaScript 的语法细节中。如果你熟悉 JavaScript，不妨看看真实的源代码：</p><p><a href="https://codesandbox.io/s/domos-hat-shop-4x7n0?file=/src/App.js">https://codesandbox.io/s/domos-hat-shop-4x7n0?file=/src/App.js</a></p><details><summary>App.js</summary><figure class="highlight js"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Dependencies</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;<br><br><span class="hljs-comment">// Styles</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">"./tailwind.output.css"</span>;<br><br><span class="hljs-keyword">import</span> imgThinker <span class="hljs-keyword">from</span> <span class="hljs-string">"./thinker.png"</span>;<br><br><span class="hljs-keyword">import</span> imgXmas <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_xmas.png"</span>;<br><span class="hljs-keyword">import</span> imgWool <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_wool.png"</span>;<br><span class="hljs-keyword">import</span> imgPolice <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_police.png"</span>;<br><span class="hljs-keyword">import</span> imgPirate <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_pirate.png"</span>;<br><span class="hljs-keyword">import</span> imgFlower <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_ladyFlower.png"</span>;<br><span class="hljs-keyword">import</span> imgHarry <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_Harry.png"</span>;<br><span class="hljs-keyword">import</span> imgElegant <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_elegant.png"</span>;<br><span class="hljs-keyword">import</span> imgChef <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_chef.png"</span>;<br><span class="hljs-keyword">import</span> imgCap <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_cap.png"</span>;<br><span class="hljs-keyword">import</span> imgBall <span class="hljs-keyword">from</span> <span class="hljs-string">"./hat_ball.png"</span>;<br><br><span class="hljs-keyword">import</span> { FiShoppingCart } <span class="hljs-keyword">from</span> <span class="hljs-string">"react-icons/fi"</span>;<br><span class="hljs-keyword">import</span> {<br>  useState,<br>  useContext,<br>  useEffect,<br>  useLayoutEffect,<br>  useRef<br>} <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;<br><span class="hljs-keyword">import</span> { AnimatePresence, AnimateSharedLayout, motion } <span class="hljs-keyword">from</span> <span class="hljs-string">"framer-motion"</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SearchBar</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    &lt;form<br>      id=<span class="hljs-string">"SearchBar"</span><br>      className=<span class="hljs-string">"space-x-0.5 flex"</span><br>      onSubmit={<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {<br>        e.preventDefault();<br>        alert(<span class="hljs-string">"Hang on, I'll search it for you!"</span>);<br>      }}<br>    &gt;<br>      &lt;input type=<span class="hljs-string">"string"</span> className=<span class="hljs-string">"text-black px-1"</span> /&gt;<br>      &lt;button className=<span class="hljs-string">"border-white border p-0.5 px-2 rounded-sm"</span>&gt;<br>        Search<br>      &lt;/button&gt;<br>    &lt;/form&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShoppingCart</span>(<span class="hljs-params">{ count }</span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">"relative m-1"</span> id=<span class="hljs-string">"ShoppingCart"</span>&gt;<br>      &lt;FiShoppingCart size={<span class="hljs-number">20</span>} /&gt;<br>      &lt;div<br>        className=<span class="hljs-string">"absolute -right-2 -top-2 rounded-full w-4 h-4 flex justify-center items-center bg-pink-600"</span><br>        style={{ <span class="hljs-attr">fontSize</span>: <span class="hljs-string">"0.5rem"</span>, <span class="hljs-attr">right</span>: -<span class="hljs-number">8</span>, <span class="hljs-attr">top</span>: -<span class="hljs-number">8</span> }}<br>      &gt;<br>        &lt;AnimatePresence&gt;<br>          &lt;motion.div<br>            className=<span class="hljs-string">"absolute"</span><br>            key={count}<br>            initial={{ <span class="hljs-attr">y</span>: -<span class="hljs-number">10</span>, <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span> }}<br>            animate={{ <span class="hljs-attr">y</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">opacity</span>: <span class="hljs-number">1</span> }}<br>            exit={{ <span class="hljs-attr">y</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">opacity</span>: <span class="hljs-number">0</span> }}<br>          &gt;<br>            {count}<br>          &lt;/motion.div&gt;<br>        &lt;/AnimatePresence&gt;<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Header</span>(<span class="hljs-params">{ countInCart }</span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    &lt;header id=<span class="hljs-string">"Header"</span>&gt;<br>      &lt;ul className=<span class="hljs-string">"flex space-x-6 items-center p-3 text-sm bg-gray-900 text-white"</span>&gt;<br>        &lt;li&gt;Home&lt;/li&gt;<br>        &lt;li&gt;<br>          &lt;SearchBar /&gt;<br>        &lt;/li&gt;<br>        &lt;li&gt;Account&lt;/li&gt;<br>        {<span class="hljs-comment">/* &lt;li&gt;Return &amp;amp; Orders&lt;/li&gt; */</span>}<br>        &lt;li className=<span class="hljs-string">"flex-1 flex justify-end"</span>&gt;<br>          &lt;ShoppingCart count={countInCart} /&gt;<br>        &lt;/li&gt;<br>      &lt;/ul&gt;<br>    &lt;/header&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Domo</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"Domo"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{imgThinker}</span> <span class="hljs-attr">width</span>=<span class="hljs-string">{220}</span> <span class="hljs-attr">height</span>=<span class="hljs-string">{220}</span> /&gt;</span></span>;<br>}<br><br><span class="hljs-keyword">const</span> hats = {<br>  <span class="hljs-comment">// Cap: imgHatCap,</span><br>  <span class="hljs-comment">// 'Harry Potter': imgHatHarryPotter,</span><br>  <span class="hljs-comment">// Leprechaun: imgHatLeprechaun,</span><br>  <span class="hljs-comment">// Pirate: imgHatPirate,</span><br>  <span class="hljs-comment">// Propeller: imgHatPropeller,</span><br>  Cap: imgCap,<br>  Christmas: imgXmas,<br>  Wool: imgWool,<br>  Police: imgPolice,<br>  Pirate: imgPirate,<br>  Flower: imgFlower,<br>  <span class="hljs-string">"Harry Potter"</span>: imgHarry,<br>  Elegant: imgElegant,<br>  Chef: imgChef,<br>  Ball: imgBall<br>};<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hat</span>(<span class="hljs-params">{ type, className, small, style }</span>) </span>{<br>  <span class="hljs-keyword">const</span> ratio = <span class="hljs-number">396</span> / <span class="hljs-number">865</span>;<br>  <span class="hljs-keyword">const</span> smallWidth = <span class="hljs-number">80</span>;<br>  <span class="hljs-keyword">const</span> largeWidth = <span class="hljs-number">200</span>;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className={className} style={style}&gt;<br>      &lt;motion.img<br>        alt={type}<br>        className=<span class="hljs-string">"rotate-12 transform"</span><br>        style={{ <span class="hljs-attr">rotate</span>: <span class="hljs-number">12</span> }}<br>        src={hats[type]}<br>        width={small ? smallWidth : largeWidth}<br>        height={small ? smallWidth * ratio : largeWidth * ratio}<br>      /&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DomoWithHat</span>(<span class="hljs-params">{ hat }</span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">"relative flex-shrink-0"</span> id=<span class="hljs-string">"DomoWithHat"</span>&gt;<br>      &lt;Domo /&gt;<br>      &lt;Hat<br>        type={hat}<br>        className=<span class="hljs-string">"absolute left-12 -top-1"</span><br>        style={{ <span class="hljs-attr">left</span>: <span class="hljs-number">8</span>, <span class="hljs-attr">top</span>: -<span class="hljs-number">10</span>, <span class="hljs-attr">transform</span>: <span class="hljs-string">"translateX(40px)"</span> }}<br>      /&gt;<br>    &lt;/div&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Main</span>(<span class="hljs-params">{ onAddToCart }</span>) </span>{<br>  <span class="hljs-keyword">const</span> hatNames = <span class="hljs-built_in">Object</span>.keys(hats);<br>  <span class="hljs-keyword">const</span> [activeHat, setActiveHat] = useState(hatNames[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">return</span> (<br>    &lt;main className=<span class="hljs-string">"p-3 flex justify-around min-h-full"</span> id=<span class="hljs-string">"Main"</span>&gt;<br>      &lt;DomoWithHat hat={activeHat} /&gt;<br>      &lt;div className=<span class="hljs-string">"flex flex-col justify-center space-y-3 items-start"</span>&gt;<br>        &lt;h2 className=<span class="hljs-string">"text-2xl"</span>&gt;{activeHat}&lt;/h2&gt;<br>        &lt;div&gt;$<span class="hljs-number">50</span>&lt;/div&gt;<br>        &lt;div className=<span class="hljs-string">"grid gap-1 grid-cols-5"</span>&gt;<br>          {hatNames.map(<span class="hljs-function">(<span class="hljs-params">hat</span>) =&gt;</span> (<br>            &lt;div<br>              key={hat}<br>              className={<span class="hljs-string">`border border-indigo-200 rounded-sm flex justify-center items-center cursor-pointer  hover:border-purple-500 <span class="hljs-subst">${</span></span><br><span class="hljs-string"><span class="hljs-subst">                hat === activeHat &amp;&amp; <span class="hljs-string">"border-2 border-purple-700"</span></span></span><br><span class="hljs-string"><span class="hljs-subst">              }</span>`</span>}<br>              onClick={<span class="hljs-function">() =&gt;</span> setActiveHat(hat)}<br>            &gt;<br>              &lt;Hat type={hat} small /&gt;<br>            &lt;/div&gt;<br>          ))}<br>        &lt;/div&gt;<br>        &lt;p className=<span class="hljs-string">"text-sm"</span>&gt;<br>          A covering <span class="hljs-keyword">for</span> the head usually having a shaped crown and brim.<br>        &lt;/p&gt;<br>        &lt;button<br>          className=<span class="hljs-string">"rounded-sm bg-pink-600 text-white text-sm py-1 px-2"</span><br>          onClick={onAddToCart}<br>        &gt;<br>          Add To Cart<br>        &lt;/button&gt;<br>      &lt;/div&gt;<br>    &lt;/main&gt;<br>  );<br>}<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Footer</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    &lt;footer<br>      className=<span class="hljs-string">"p-2 text-xs flex justify-around items-center bg-gray-900 text-white"</span><br>      id=<span class="hljs-string">"Footer"</span><br>    &gt;<br>      &lt;div&gt;© <span class="hljs-number">2021</span> Domo<span class="hljs-string">'s Hat Shop&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/footer&gt;</span><br><span class="hljs-string">  );</span><br><span class="hljs-string">}</span><br><span class="hljs-string"></span><br><span class="hljs-string">function DomoHatShop() {</span><br><span class="hljs-string">  const [countInCart, setCountInCart] = useState(2);</span><br><span class="hljs-string">  return (</span><br><span class="hljs-string">    &lt;div className="bg-white top-0 sticky min-h-screen"&gt;</span><br><span class="hljs-string">      &lt;Header countInCart={countInCart} /&gt;</span><br><span class="hljs-string">      &lt;Main onAddToCart={() =&gt; setCountInCart((c) =&gt; c + 1)} /&gt;</span><br><span class="hljs-string">      &lt;Footer /&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  );</span><br><span class="hljs-string">}</span><br><span class="hljs-string"></span><br><span class="hljs-string">const App = () =&gt; {</span><br><span class="hljs-string">  return &lt;DomoHatShop /&gt;;</span><br><span class="hljs-string">};</span><br><span class="hljs-string"></span><br><span class="hljs-string">export default App;</span><br></code></pre></div></td></tr></tbody></table></figure></details><p>好了，让我们帮朵模写一个在线帽子店 🧢 。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_14.jpg"></p><h3 id="组件的可组合特性"><a href="#组件的可组合特性" class="headerlink" title="组件的可组合特性"></a>组件的可组合特性</h3><p>我们可以将整个界面拆分为如下三个部分：</p><ul><li>Header: 页面顶部</li><li>Main: 页面的主要内容</li><li>Footer: 页面底部注脚</li></ul><p>这个拆分方案可以用如下代码表达:</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// DomoHatShopHome<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Header</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Main</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Footer</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>以上代码看起来像 HTML，对吧？有几个例外是那几个首字母大写的标签：<code>&lt;Header&gt;</code>、<code>&lt;Content&gt;</code> 和 <code>&lt;Footer&gt;</code>。它们并不是标准的 HTML 标签，而是自定义标签。</p><p>那这些自定义标签到底是什么？我们如何告知 React，Header 是由一个标准的 header 标签、一些列表标签和一个搜索条组成的？</p><p>方法就是写一个 Header 组件！</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// Header<br><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SearchBar</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Account<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ShoppingCart</span> /&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>Header 组件包括另外两个自定义标签：<code>&lt;SearchBar&gt;</code>和 <code>&lt;ShoppingCart&gt;</code>。它们又包含些什么呢？看代码。</p><figure class="highlight html"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// SearchBar<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"string"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>// ShoppingCart<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">FiShoppingCart</span> <span class="hljs-attr">size</span>=<span class="hljs-string">{20}</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    2<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>还记得吗？React 组件的第一个重要性质：它们是可组合的。这代表了组件可以用来创建新的组件，这恰恰就是我们刚刚做的事。</p><p>现在，如果你想亲手做一个练习的话，请在桌面浏览器上访问如下网址：</p><p><a href="https://learnreact.design/posts/what-is-react/zh">https://learnreact.design/posts/what-is-react/zh</a></p><p>轻松加一行代码就可以在 Footer 上也加一个搜索框。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_15.jpg"></p><h3 id="组件为重用而生"><a href="#组件为重用而生" class="headerlink" title="组件为重用而生"></a>组件为重用而生</h3><p>所谓的组件可组合是指可以用已有组件拼装出新组件，这跟我们所处的自然界的工作方式很相似。不过在 React 世界有一个很重要的细节：当我们在一个组件里使用另外一个组件的时候，那个组件跟原先的组件仍然相互联系。当原来的组件发生变化时，它的所有实例将随之改变。</p><p>如果修改如下 SearchBar 的代码里的文字，你会看到在 Header 和 Footer 上的两个搜索框都发生了变化，这跟设计工具 Framer 和 Figma 中的组件工作方式十分相似。（还是在桌面浏览器里就可以改代码并看到效果）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"string"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Search<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>React 组件是可重用的。一个组件定义好以后，我们可以用它作为自定标签放到其他组件里，想放多少次都行。如果我们修改了这个组件，包含这个自定义标签的所有其它组件都会做出相应变化。</p><h3 id="组件是相互独立的"><a href="#组件是相互独立的" class="headerlink" title="组件是相互独立的"></a>组件是相互独立的</h3><p>还记得吗？React 组件还是彼此独立的。也就是说，当我们修改一个组件时，其它不包含它的组件不会有任何变化。</p><p>当我们修改 SearchBar 组件时，只有 Header 和 Footer 发生了变化。这点或许看起来太明显不过了，但这是软件工程中的一个基础概念，在提高软件可维护性上起到了重要的作用。</p><h3 id="声明式和响应式"><a href="#声明式和响应式" class="headerlink" title="声明式和响应式"></a>声明式和响应式</h3><p>最后再来看看 React 的另外两个绝招：<strong>声明式用户界面</strong>和<strong>响应式 DOM 更改</strong>。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/_posts/study/React_study_0001/React_study_0001_16.jpg"></p><p>在这个界面里，点击右边表格将更改“选定的帽子”这项数据，因为我们事先已经将 DomoWithHat 与该数据关联，朵模头上戴的帽子就会自动更改。还记得吧？这就是 React 的响应式 DOM 更改。</p><p>如下是 DomoWithHat 组件的代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">// DomoWithHat<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Hat</span> <span class="hljs-attr">type</span>=<span class="hljs-string">{hat}</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Domo</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></tbody></table></figure><p>在代码里，我们只需要定义想要的最终结果（一个 div，包含了朵模和一顶帽子），然后把数据关联好（type = {hat}）。当数据 hat 发生变化时（用户在表格里选择了一顶帽子），界面就会随之自动更改。我们不需要担心如何去修改 DOM 以及修改的时机，也不需要去跟踪数据何时发生变化。我们只需要“画”一个简图就够了，也就是上面的代码。这就是 React 的声明式用户界面外加响应式 DOM 更改，两者相辅相成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如下是本文涉及到的术语列表：</p><ul><li>DOM (Document Object Model)</li><li>DOM API</li><li>React 组件</li><li>组件是可重用并且彼此独立的</li><li>命令式编程与声明式编程</li><li>虚拟 DOM</li><li>响应式 DOM 更改</li></ul></details><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://learnreact.design/posts/what-is-react/zh">React 是什么东东</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>Study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>张小龙：微信十年的产品思考</title>
    <link href="/blog/dots/WeChat_10_years/"/>
    <url>/blog/dots/WeChat_10_years/</url>
    
    <content type="html"><![CDATA[<div align="center" style="max-height :100%; max-width: 100%; display: block;"><a class="btn" href="https://mp.weixin.qq.com/s/6gfhdh5HgbVcxvnvSdmbhw" target="_blank">微信公开课张小龙微信十年的产品思考视频链接</a></div><div class="note note-info">            <p>张小龙 2021年1月20日于深圳</p>          </div><div class="note note-success">            <p>本文转载自微信公开课，张小龙阐述了微信十年的产品思考。</p>          </div><p>下面是微信的最新三组数据，就这些数据来看，国内没有任何软件可以与之比肩。</p><div class="note note-success">            <p>有 10.9 亿用户打开微信，3.3 亿用户进行了视频通话；</p>          </div><div class="note note-success">            <p>有 7.8 亿用户进入朋友圈，1.2 亿用户发表朋友圈；</p>          </div><div class="note note-success">            <p>有 3.6 亿用户读公众号文章，4 亿用户使用小程序；</p>          </div><p>张小龙一直秉承着一个观点：“希望微信能一直保持自己的风格，一直像一个小而美的产品一样，有自己的灵魂，有自己的审美，有自己的创意，有自己的观念。而不仅仅是数字的奴隶。”</p><blockquote><p>下面是微信公开课，张小龙的演讲：</p></blockquote><details><summary>张小龙 演讲</summary><h2 id="00-正文"><a href="#00-正文" class="headerlink" title="00 正文"></a>00 正文</h2><p>各位朋友，晚上好！</p><p>谢谢来到公开课现场的朋友们，让我感受到这是一个面对面的交流，而不是一个人面对屏幕的直播。</p><p>2020，对很多人来说都是很不容易的一年。包括我们的公开课，也改为线上进行了。虽然在几年前的一次公开课上，我说公开课应该线上开就好了，效率最高，但没有想到今天是因为疫情的原因被迫做到了。</p><p>去年这个时候我们也没有想到，这次我们已经通过视频号来进行直播了。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/WeChat_10_years/WeChat_10_years_1.jpg" alt="张小龙"></p><p>因为疫情，很多公司的年会都改线上了，所以这个时候，我的同事们正在努力给视频号直播加一个能力，就是只有白名单的人才能进入直播间的企业内直播，希望能给需要线上开年会的企业一些帮助吧。</p><p>回头看十年前，当时的想法只是，希望有一个适合自己的通讯工具来用。于是就开始了微信的第一版。但当时绝对没有想到，十年后的微信会是现在这个样子。对此，我自己感觉特别幸运，我想我一定是那个被上帝选中的人，因为光靠个人努力是做不到这一点的。</p><p>我分享一组数据吧，到今天，每天：</p><p>有10.9亿用户打开微信，3.3亿用户进行了视频通话；</p><p>有7.8亿用户进入朋友圈，1.2亿用户发表朋友圈；</p><p>有3.6亿用户读公众号文章，4亿用户使用小程序；</p><p>还有很多，包括微信支付，企业微信，微信读书，搜索等，就不一一说了。如微信支付，它就像你以前的钱包一样，已经变成了生活常用品。而微信，也真的成为了“一个生活方式”。</p><p>今天是公开课，应该有很多的创作者参与，所以，也在这里感谢微信平台的每一个创作者，公众号的，小程序的，视频号的创作者。因为你们的创作，让微信的生态充满活力。</p><p>大家知道视频号今年的变化特别大。这里也想分享一下视频号的一些想法。</p><h2 id="01-视频号的起源"><a href="#01-视频号的起源" class="headerlink" title="01 视频号的起源"></a>01 视频号的起源</h2><p>可能在2017年吧，我跟公众号的团队说，我们现在公众号只适合少数人写长文章，但是大部分人写不了文章。我们应该在朋友圈下面加一个“非朋友圈”，只能发短文或者照片视频。</p><p>但后来就不了了之了，确实是很大的工程。因为帐号体系可能都完全不同了，就完全是个新的比公众号还复杂的系统。</p><p>随着时间的推移，视频化表达其实越来越成为普通人的习惯。来看几个数据，最近5年，用户每天发送的视频消息数量上升33倍，朋友圈视频发表数上升10倍。这时候，我们再思考短内容的时候，就会想，不应该基于短文字来做，而是应该基于视频化内容来做了。</p><p>视频化表达应该是下一个十年的内容领域的一个主题。虽然我们并不清楚，文字还是视频才代表了人类文明的进步，但从个人表达，以及消费程度来说，时代正在往视频化表达方向发展。</p><p>于是在2019年，我们组织了一个特别小的小团队，开始了视频号的开发。</p><p>我们也没有问公司要什么资源专门去做，甚至没有在公司开会立项，就自己悄悄做了。我觉得这很微信风格啊，基本上微信做东西，都是成立小团队开始做起，而不是大规模的兵团作战。</p><p>并且我说，我们要做，就一定要做成做大。这并不是公司给的任务，因为完成任务是枯燥无味的，并且会因此动作变形。应该说是我们要给自己一些挑战性的目标，不然工作会显得很无聊。</p><h2 id="02-视频号是什么？"><a href="#02-视频号是什么？" class="headerlink" title="02 视频号是什么？"></a>02 视频号是什么？</h2><p>视频号是一个人人都可创作的短内容平台。</p><p>所以它是公开领域的内容平台，就不能基于微信号来创作了。</p><p>因此遇到的第一个问题是，需要有一种新的ID（身份）。长期以来，微信的最大价值是每个人的微信ID。比如微信支付能很顺畅，因为钱包跟着个人ID走，这是非常自然的。就像你现在只拿身份证也能取钱一样。但这个ID是通讯和社交领域的，因此是私密的。因此，微信的用户并不能公开对非好友说话。即便评论了，别人也无法联系你。这对于社交领域当然没有问题。但对于公开领域，需要新的身份。而在一个产品里，承担两个身份，其实是很有挑战的。</p><p>而这个新的ID，还必须特别方便，不至于在各个场景里遇到身份的冲突。所以处理得不好，双ID会让系统变得非常复杂。比如你评论，就需要选择用哪个ID来评论。</p><p>但是这个ID的意义又特别大，一旦走出这一步，意味着微信不再局限于社交领域，而是进入到公开信息领域。</p><p>因此视频号的意义，与其说是视频，不如说是“号”。因为有了一个公开的号，意味着每个人都有了一个公开发声的身份。</p><p>比如，直播，在视频号里做得很顺利。在视频号之前，我们是没法做直播的，最多做到群内直播，那还是属于群通信的范畴。但有了视频号这个ID，每个人可以迅速开通自己的直播。这里，ID才是基石。它可以承载视频内容，可以承载直播，可以承载小程序等。</p><p>我记得当时有个方案是，每个进视频号的人要创建一个视频号ID，用这个ID来浏览和评论内容。我说不对，浏览者应该是微信身份，而不应该强迫每个人开一个新的身份才能看和评论。幸好当时选择了这样一条路径，不然就没有后来的社交推荐体系了。其实产品的迭代是由无数这样的选择组成的。</p><p>ID还有一个重要的意义是针对机构的。</p><p>大家知道PC时代每个机构都有一个官方网站。其实微信一直在寻找PC时代的“官方网站”的替代物。做公众号的时候，我们希望公众号就是一个机构比如企业的官网。做小程序的时候，我们希望小程序就是官网。现在，我们希望视频号是每个机构的官网。这是合理的，官网是需要进化的。所以未来视频号会承接一个机构的很多服务内容，并不局限于视频。比如一个企业的服务，可以通过小程序的方式，展示在视频号下面。</p><p>所以我开玩笑说，如果有一天我们在每一个广告牌下面，都能看到广告主的视频号的二维码，那就说明视频号做成了想要的官网了。</p><p>第一个版本其实只是搭建了这样一个ID体系。和公众号的很类似，但是比公众号的门槛低很多，普通微信用户可以立即开通它。</p><p>内容表现上，只是一个简单的信息流，混合了关注的，朋友匿名点赞的，和系统推荐的内容在里面。</p><p>但这样的效果并不好。因为是灰度，量不大，因此也吸引不到大量的创作者来贡献内容，因此推荐的内容也一般般。</p><p>但即使如此，我们还是希望推荐的质量能够好起来。我们组建了三个做推荐算法的团队，每个团队十几个工程师。希望各自用不同方法去找到推荐的最优解。</p><p>应该说我们在算法领域沉淀应该还是很深的，搜一搜背后是个几百工程师的搜索技术团队，同时我们自己研发的语音识别和机器翻译，都是国内的一流水准。对了，外界一直有人说我们的语音识别用的是第三方的技术，其实我们从未用过第三方的，一直都是我们自己研发的。现在微信里面的语音识别每天翻译的语音条目在五亿条以上。</p><p>虽然搜索团队有很强的算法技术人员，但是，我还是把他们从搜索团队抽调出来进入到视频号团队来工作。因为闭环的小团队才能迅速迭代。</p><p>推荐团队很努力，但头几个月的滚动特别困难，似乎陷入了死结，就是内容不好看就没有浏览量，就导致没有人贡献内容，所以推荐系统也推不出好内容，然后继续没有好的内容看。</p><p>5月份的时候，我们做了视频号最重大的一个改变。因为经过几个月的灰度，表明在现有的内容下，基于机器推荐是走不通的。对比朋友点赞的内容，虽然当时朋友点赞还是匿名的，和机器推荐的内容来对比，我发现，机器推荐的远不如人工（或者说朋友）推荐的精彩。既然这样，就应该以实名点赞的社交推荐为主，机器推荐为辅。</p><p>当时我给的理由是，我们所看的书，大部分是因为周围有人推荐而去看，而不是网上书店推荐的书。你少看几个机器推荐的内容不会觉得可惜，但错过了朋友们都在看的内容会觉得可惜。这是视频号能借助社交推荐起来的理由。</p><p>于是五月份开始了变更最频繁的两周，几乎每两天就要更新一个版本。然后发布了基于朋友点赞的新的灰度版本，终于看到了上扬的数据，用户的留存非常高。</p><p>所以6月视频号的用户到了一个量级。数字其实不重要，但对于一个内容形态的产品来说，一定量级的用户意味着解决了生死问题，即流量的循环起来了。</p><p>这是一种典型的微信style的产品方法，即通过产品而非运营的方法，找到事情的撬动点，通过产品能力让事情运转起来。</p><p>有这个用户基数说明生存下来了，这时候就可以开始做基础功能的完善了，比如直播能力等。没有过生死线的话，做再多功能也是白搭。</p><p>在这里，是社交推荐发挥了作用，当时机器推荐的占比非常小，留存也非常低，我们也差点就放弃了机器推荐。但是，并不是说机器推荐没有用，而是要在内容丰富的情况下才能发挥作用。</p><p>插一个小故事，6月份的时候，那时社交推荐的新版还在开发吧，我在黑板上写下一个断言：未来有一天，视频的播放量，关注，好友推荐，机器推荐的消耗比例，应该是1:2:10。即，一个人应该平均看10个关注的视频，20个朋友赞的视频，100个系统推荐的视频这样的比例。</p><p>当时是这么解释的：</p><p>内容分两种，一种是你需要花脑力去理解的知识性信息，是学习；一种是不需要花脑力的思维舒适区的消费类的信息，是娱乐。朋友赞是朋友强迫你去获取你未必感兴趣的知识性信息，属于学习类的；机器推荐，是系统投其所好而让你很舒服的浏览你喜欢的消费性信息，属于娱乐类的。关注里面两种信息都有。</p><p>因为关注的东西你已经知道大概会是什么了，反而不会太有吸引力，因此是1。朋友赞虽然看起来累，但是不能错过，所以是2。而系统推荐，符合懒人原则，是大多数人都更容易消费且获得舒适感的信息，所以是10。</p><p>但是我们现在的大盘数据，并不是这个比例。现在朋友赞产生的整体vv，是机器推荐的2倍。</p><p>于是我让数据同事统计了一下，只拿有关注的用户来看。有关注的用户目前极少，属于活跃用户，所以代表了未来活跃用户的行为。前几天的数据是，有关注的用户，人均在三个tab产生的vv，差不多是1：2：9。拿到这个结果时我非常吃惊。它只是一种粗略的估计，并不是说预测特别准确，而是说我们做东西的习惯是，如果这样做，应该先推理出来一个结果，然后用数据去验证，才能检验方向是不是对的。</p><p>我估计未来这个9还会变得更大。因为这是和内容丰富度相关的。</p><p>说到这里，可能会有人说当机器推荐这个9变得越来越大，不是不符合用完即走吗。用完即走跟时间长短无关，跟效率有关。我们从来不会关注用户在微信里停留的时长，那不是我们的目标。当用户想要看内容的时候，不管是文章还是视频，如果他花了很多时间看，只能说明微信里面有很多值得看的内容，而不是要刻意去消耗他的时间。</p><h2 id="03-什么是视频"><a href="#03-什么是视频" class="headerlink" title="03 什么是视频"></a>03 什么是视频</h2><p>过程中还解决了另一个问题，即究竟什么是视频的问题。</p><p>说到视频，大家会想到手机相册里面的视频文件。就像朋友圈，只能上传相册的视频。我们也确实是通过这个方式，来希望朋友圈里的视频更多的是用户自己拍摄的视频。</p><p>但视频文件其实是会消失的。</p><p>从 Windows 转到苹果手机的用户，都会遇到一个问题，以前的文件和文件夹去哪里了。在 iOS 里，没有了文件的概念。文件被各个应用自己定义了。这是把文件应用化了，即文件不能脱离应用而存在，一旦脱离了，就是没有意义无法解释的数据。</p><p>这是一种很好的观念。</p><p>原始视频只是数据，它没法关联到其他信息，如创作者，观众数，评论等。它还需要存在本地，数据丢了就丢了。</p><p>因此未来的视频应该是一种结构化数据。它存在云端，有所有的创作者信息，有观众的互动信息，能够很方便的分享。</p><p>文字和视频等内容，存在的价值在于有人看到，也就是分享。而分享，如果还需要copy整个原始数据，是很落后的。分享应该只是一个链接的传递。</p><p>这会让我反思，朋友圈里面上传视频，以后会一直用这种原始方式吗？</p><p>所以在6月的时候，我们需要把视频号内容分享到朋友圈来，遇到一个问题，它应该长得像一个链接呢，还是像一个本地视频呢？其实是归类，它应该归类到文章链接，还是一个视频文件。我的答案是，云端化的结构化的视频，才是视频，本地的视频文件，反而是裸数据，是应该被淘汰的。所以你看到的朋友圈里的视频号的视频，和现在的本地视频的展现没什么区别。</p><p>在这里，视频号是结构化的视频内容的载体。我相信以后微信里面流通的视频，越来越多的会以视频号视频的形式存在，而不是视频文件的方式。</p><p>这种变化，其实在公众号体系里体现过一次。公众号是一个文章的载体。它让文章因为分享而变得有价值。并且，公众号定义了文章的展现形式，是所有的用户在阅读不同的文章时，能以一种相对一致的体验来阅读和互动。在我看来，这是对网页时代阅读体验的一次大的体验提升。</p><p>不管是文章还是视频，他们存在的价值在于被人看到，或者说被分享。显然，文章和视频需要一个载体来传播。</p><p>如果你能理解公众号对于文章分享的价值，那么，可以用同样的思路去理解视频号对于视频分享的价值。</p><p>载体的含义还体现在，我们自己不做内容，也不会去买内容。我们不关注具体的内容是什么。我们只做内容的承载和传递。</p><h2 id="04-长视频和短视频"><a href="#04-长视频和短视频" class="headerlink" title="04 长视频和短视频"></a>04 长视频和短视频</h2><p>我们也遇到了超过一分钟视频的问题。自然而然地，大家会认为长视频和短视频是两种东西，因此应该设计成两种不同的内容对象。</p><p>中间有个版本确实是视频号有专门的长视频这一栏的，甚至长视频和短视频的评论点赞还是分开的。</p><p>但如果仔细思考，在微信号体系里，是不应该做这种区分的。长短视频的区别只是消费的场景不一样。短视频适合碎片时间的连续消费，而长视频适合有一大段时间来看。</p><p>对视频号来说，简化这个问题的方法，是把一分钟以内的视频视为短视频，一分钟以上的视频的开头一分钟视为这个视频的摘要或简介。我把它称为封面。这样的话，视频号不区分长视频短视频，但是又能兼容短视频的体验。</p><p>关于长视频，我希望视频号逐渐积累越来越多的长视频，成为长视频的云端仓库。将来有一天，也许我们会提供一个检索或推荐入口，这样用户可以找到丰富的长视频内容。</p><p>这个其实也是未来非常有想象力的。</p><h2 id="05-视频号和个人的关系"><a href="#05-视频号和个人的关系" class="headerlink" title="05 视频号和个人的关系"></a>05 视频号和个人的关系</h2><p>视频号的初衷是让人人都能很容易通过视频化的方式去公开表达内容。但做产品的人都知道，让用户去发表内容去表达是最困难的。</p><p>现阶段我们也并没有做到让很多人在视频号去发表自己的日常。但我们有个举措，让我们能看到希望。我们上线了将自己的视频号内容关联到自己的微信名片的功能。我们发现结果比预料的要好很多，到现在已经有非常多的人在名片展示了自己的视频号内容，并且还在持续增长。这是个很好的趋势。</p><p>这里有一个很有意思的话题，有的时候大家会觉得微信做东西特别保守。其实并不是保守，而是说很多东西是不对或不应该做的。举个例子，我们可以把视频号的内容挂在名片上，我们以前为什么不做一个类似这样的展示自己的一些精选的照片和视频的功能？我们内部讨论过好多次，因为很多人朋友圈设置了三天可见，越来越多了，我们打开名片有的时候几乎看不到东西。为什么不给他们提供一个可以把一些照片精选放在那里的功能，这样朋友进来至少可以看到一些。</p><p>之前我们不愿意做这个功能是因为，一旦这样做了，你可能只是把你历史上最好的照片放到那里，永远就不去修改它了。这次我们愿意这样做是因为，如果你关联到你的视频号的内容，那它就是活的，因为你会不停地更新你的视频号内容，而不是说我选几个历史上最好的照片作为精美的装饰就永远不变了。</p><p>毕竟，视频号希望的是人人都能表达，而不是只有网红和大v的表演。</p><h2 id="06-信息展现的方式"><a href="#06-信息展现的方式" class="headerlink" title="06 信息展现的方式"></a>06 信息展现的方式</h2><p>信息展现形式一直是互联网产品里的最基础部分，也是争议最大的。这里说的是指对信息列表的展现形式。</p><p>常见比如有瀑布流，通俗称呼的信息流，以及全屏。他们的区别是一屏里放多少条内容合适。全屏就是一屏只放一条内容。</p><p>以我自己的经验来说，我把这些式样的选择总结为一个粗略的规律，就是一屏里的内容条数，应当跟命中率成反比。</p><p>命中率是指用户可能感兴趣的内容条数的比例。比如10个邮件，只有一个是我想要看的，命中率是10%。</p><p>以朋友圈举例，因为你并不是要看每一个朋友发的内容的，所以命中率并不高，如果改为全屏，就是灾难。同时，如果你添加的好友越来越多，命中率还会降低，因此就更不能增加每条内容的显示面积。如果我们要增大显示面积，就必须提高命中率。但朋友圈的命中率是很难提高的，因为朋友圈的命中率取决于朋友跟你的关系，而非他发的内容，而我们很难知道你对哪个朋友更感兴趣。</p><p>而往往关注内容越多的人，命中率就越低。所以公众号改版的时候，其实是一屏里的内容条数变少了，虽然带来了点击次数的减少，但关注多的人还是会抱怨，因为选择的难度增大了。但对于关注少的人，阅读量是上升了，因为只关注了几个号的话，命中率本来就高。后来我们在订阅号的顶部增加了常读号的展示，其实是提升了命中率。</p><p>视频号的上半年，平台的内容丰富度不够，命中率是很低的。所以当时半屏式的信息流是合适的，一屏显示超过一项内容，用户有选择的余地。那时候如果直接上全屏，可能死的很快。到下半年，内容开始丰富了，命中率开始提高了。并且全屏对于单个视频的展现效果当然也会比半屏要好，我们开始灰度的切换到全屏模式。</p><p>这里说个有意思的数据。我们把关注和机器推荐灰度切换到全屏，并且和没有灰度全屏的用户来对比观察。发现全屏后，关注tab的人均vv（video view，视频播放量）下降了，推荐tab的上升了。这应该可以推导出来，关注tab的命中率不够高，以至于全屏后带来了轻微的选择困难。</p><p>我们在公众号里在给关注的号的内容做排序，以及在视频号里，也会通过算法对关注的内容做排序，也是为了提高命中率。特别是全屏之后，因为用户的选择余地是零了，更需要算法来做排序。</p><h2 id="07-直播"><a href="#07-直播" class="headerlink" title="07 直播"></a>07 直播</h2><p>互联网历史上，个人在公开领域的表达方式一直在演变。最早的时候，需要你会写HTML来做网页。后来有了博客，博客之后是微博这样的短文字。现在是图片和短视频。演变的方向是往更能被普通人生产和消费的方向去走的。所以会体现为更短更碎片化。</p><p>所以我在想，还有什么内容形态是比短视频更能被更多人接受的。</p><p>我觉得直播有这个机会。直播比短视频的生产更容易，是因为拍一段短视频是需要有内容准备的。而直播，是不需要准备内容的，它就是日常聊天。这是一个非常巨大的差别，直接降低了直播的门槛。这是一种轻松的表达，普通人也能够去生产出来，朋友也更愿意去消费。</p><p>虽然直播已经发展了很多年，大家对直播的认知还是带货的领域，这是作为内容形态的方式来思考，就是个人表达的形态方面来思考的。</p><p>所以，直播在未来有可能会成为一种很多人在用的个人表达方式。</p><p>做一个未来的设想，很久以后，每个人的微信名片应该是活的，意思是，我打开你的名片，如果你刚好戴了一个可以直播的眼镜正在直播，那我就能直接看到你看到的东西。这可能是个人直播的终极形态。</p><p>前不久有一场流星雨的直播，有超过100万人观看了，有点超出我们的意料了。因为，我们并没有做任何中心化的流量分发去推它，它自然就吸引了100万人。在这里，是社交推荐在发生作用，通过朋友圈，群聊等进行了人群的扩散。当然，在视频号和直播的入口里面，我们还是会用机器推荐来给用户推荐适合的直播。当直播多了以后，除了你的朋友，我们也希望系统能告诉你哪个直播值得你看一下，这使我们的机器推荐有更大的考验。但社交推荐，仍然会是非常重要的传播途径。</p><p>其实我们现在还没有直播的入口，下一个版本可能就有了。我们现在有一个附近的直播和人，把它调一下，可能叫直播和附近。</p><p>我们也在丰富直播电商的能力，包括直播里可以挂接到第三方的小程序。</p><p>春节快到了，我们都习惯了在群里发红包抢红包来拜年了。但其实线下传统的拜年是走家串户面对面的行为。直播其实更能模拟出线下拜年这种传统方式。所以我们今年在直播这里也做了一点小小的东西，我们希望今年的春节能够有一些人通过直播的方式来拜年，那就特别好。</p><h2 id="08-关于创作者"><a href="#08-关于创作者" class="headerlink" title="08 关于创作者"></a>08 关于创作者</h2><p>很多人会关心平台会给创作者什么样的支持。</p><p>如上面提到的，我们更希望做视频的载体，并且让视频号成为个人和机构的官网。平台在这里的角色是连接，而不是做内容。但和以前的官网不一样的地方在于，微信体系里的官网，内容是能自己流通的。因此你不用太担心做了官网也没有人访问。我刚刚说到微信里集合了很多产品可能没法尝试的东西，比如说对于信息访问，我们可能会有关注关系可以获得，有搜索，有推荐，有系统推荐和社交传递这样一些方式，所以不用太担心自己的内容在这里没有人会看。</p><p>刚开始我们去邀请一些明星进来，明星会说有没有签约费。我们的回答是，我们希望你进来，因为你应该经营自己的粉丝，最终你会实现盈利，但不会平台出面来购买内容。</p><p>所以视频号这里，我们没有花一分钱去购买内容。将来也不想这么做。倒不是为了省钱，而是，当我们不花钱买内容的时候，创作者还愿意进来，才说明创作者能靠自己的努力获得回报，才说明我们建立了一个能自行运转起来的生态。同时，我相信普通人的创作力是巨大的，相反，购买的内容反而不一定能打动人。</p><p>微信的历史上，我们一直不强调强运营，也是这个原因。系统和规则会比运营的效率高太多了。就像我们现在看到微信支付，其实已经覆盖面非常大，但是我们微信支付的人数并不算多，对于支付这样一个需要跟线下接触的行业来说，我们每个行业微信支付里可能就一两个人在负责整个行业。</p><p>公众号的那一个slogan照样可以用在视频号上，再小的个体，也有自己的品牌。其实你现在放在视频号上也是很适用的。</p><h2 id="09-一些有趣的实验性项目"><a href="#09-一些有趣的实验性项目" class="headerlink" title="09 一些有趣的实验性项目"></a>09 一些有趣的实验性项目</h2><p>我们也有一些有趣好玩的实验性项目在进行中。</p><p>前面提到，做产品其实是个验证想法的过程。如果你脑袋里突然冒出一个想法，可能很不靠谱，但又似乎有意思。然后继续往深里去想，如果能经过很多次选择，最终能变为实现，就会体会到做产品的乐趣。</p><p>我就经常会有一些异想天开的想法。比如，如果你能拍一下一个人的头像会怎么样，如果你能朝跟你聊天的朋友扔一个炸弹在屏幕上炸开吓他一跳会怎么样，如果你在听一首歌的时候能看到其他听歌的人眼前的画面会怎么样，如果你失眠的时候也能看到其他的失眠的人然后大家一起数羊会怎么样。</p><p>甚至，如果给一个画布，每个人上去画一个点，如果有一千万人轮流去每人依次画一个点，到最后会不会形成一个图案？如果在没有组织的情况下，一千万人居然画出来一个图案，那又意味着什么？</p><p>所有这些都是很有趣的事情。所以做产品绝不是枯燥无味的。虽然大多数想法都会是行不通的，但有少数的能行得通，就非常好了。</p><p>这里，我就简单描述下微信新版本会有的几个功能。所有的功能在被用户实际验证之前，都不能说一定会受欢迎，但是只要思路的方向没有问题，就可以不断改进。有些功能也会经历灰度，完善了才放出来。所以不要抱以太高的期望。这里分享下这些好玩的功能的思考点。</p><p>一个是表情。</p><p>表情是表达方式中的一个基本元素。</p><p>说到表达方式的基本元素，这让我想起拍一拍。很多人会不喜欢被拍，还有很多人因为误触而拍错了人很尴尬。但仍然有1.2亿人设置了拍一拍的尾巴，每天几千万人在用拍一拍。拍一拍也是表达的一种基本元素，并且不同于其他所有方式，它是模拟人类的现实生活中的行为动作，用最简单的一个身体动作来完成了一次信息传递。有次内部开会我开玩笑说，未来人们的生活会越来越线上化，人们会怀念这种古老的人和人之间的交互方式的。</p><p>说回到表情。</p><p>人们的表情反映出情绪越来越强烈了。以至于必须经常“裂开”了。</p><p>我的想法可能比裂开更暴力。有一天我跟开发同学说，帮我做一个功能，我扔出一个炸弹，对方的屏幕就裂开来。当然，是动画效果的裂开，但要求很逼真。</p><p>实现是可以的，但是真的当作一个表情功能的时候，还是会遇到很多坎。</p><p>我说寻找基本元素，即这种表情必须是底层基础的，而不是一种特殊的。</p><p>最终我们做到了。</p><p>一个是状态。</p><p>现在大家打开一个朋友的微信名片，往往除了名字头像，什么也看不到。朋友圈也很多人设置了时效。</p><p>但事情不应该是这样的，每个名片，应该是活生生的才对。名片就是我们线上化生活的自己，它应该反映自己真实的状态。</p><p>我们之前尝试用视频动态表达一个人的状态，但视频化表达在这个地方其实挺困难的，因为确实拍个视频让所有的好友看到，这个压力还是挺大的，所以视频动态不算成功，每天大概有100多万的人在发视频动态，我们也会把它升级一下。升级以后的话，我们希望走到视频的另外一面。以前我说以前每个人发文字是很困难的，其实有一个前提，发一段让很多人都看的文字是很困难的，其实自己随便说一句话其实并不困难，状态就是随便说一句话这样一个东西。所以我们会走到视频的另外一面，通过你随便说一句话，随便写几个字来表达自己的状态。</p><p>并且，在某一时刻，一定还有其他的人跟你处在同一种状态里，你会希望看到他们。看到在打同一个游戏的人，同一个咖啡吧的人，同一个景点旅游的人等，甚至是，同一种心情的人。</p><p>我一直认为，社交的本质是找到同类。</p><p>状态，是用来给人看到的，最好还是给同类的人看到。</p><p>所以这一次，我们基于简单的文字来组织状态这样一个功能。</p><p>我不知道结果会怎么样。对于社交产品，因为它是群体互动来导致结果的，所以很难预料社交功能交给用户群体后的反应。但是，这样的尝试是应该的。因为，个人的状态表达的需求没有被满足。哪怕是简单的一句“我今天很郁闷”，你不会发朋友圈，也不会跟朋友专门去说，那么，总需要一个地方可以说的。</p><h2 id="10-歌曲"><a href="#10-歌曲" class="headerlink" title="10 歌曲"></a>10 歌曲</h2><p>还有一个新的尝试是关于听歌的，在座有一位听众跟我聊过怎样看见一首歌，歌不是用来听的，是用来看的。自从有了网络、移动互联网以后，我感觉是很多人听歌变得少了，只有在开车的时候才会听歌，因为在任何其他时候，你会宁愿去看视频了。微信其实是一个包含信息种类特别多的一个东西，但我一直不太满意的一点是在微信里面听歌的体验不太好，比如说我其实特别不理解为什么所有播放器都是一个电唱机在那里转，因为电唱机在我读中学的时候，我家里有一个，我还自己去买唱片，但是我想应该大部分用户不会经历过那个时代，那为什么他们要看不认识的物品，一个唱盘在那里转。</p><p>我们在听歌的时候应该看见什么？很多人说我们在听歌的时候不应该看见什么，而是应该听就好了，但我希望听歌的时候能够看到一点东西，因为听歌的时候有一点想象力，我们之所以希望在开车的时候听，是因为你的眼睛能看到很多的东西，让你的想象比平时更活跃了。如果这些东西，听同一首歌的人往往有很多人，举个例子，你可以想象你在这里听这首歌，另外一个人在另外的场景，还有很多类似的人，如果把他们听歌的眼前画面都连起来的话，总有一些人的画面跟你是非常类似的，他能够打动你的，所以从这个点上出发，我们就把听歌的体验做了一个视觉化的展现。</p><p>但这个难度其实特别大，因为技术还没有到那一步，我们的眼球都有一个摄像头实时传到云端，未来迟早会到那一步。所以目前只能通过别的产品方式才能做到这一步，就是说有一些热心的用户可能会愿意说，我能够把某一首歌变成一个制作得很精美的，类似 MV 这样一个东西，可以分享给更多的人看到。</p><h2 id="11-浮窗"><a href="#11-浮窗" class="headerlink" title="11 浮窗"></a>11 浮窗</h2><p>我其实一直很不喜欢浮窗。因为它就像狗皮膏药。这也是PC时代大部分网页浏览的体验都不好的一个原因。</p><p>为了解决一篇文章要很久才看完，而中途要不断处理微信消息的需要，我们有了浮窗功能。但它并不完美。</p><p>很多时候，一篇文章，一个长视频，是要分很多次才看完的，如果每次都要先拖到浮窗，也是很繁琐的。</p><p>现在，微信提供了一个尚未看完的内容的列表，方便可以随时找回这些内容继续看完。尤其是对于长视频，更加需要随时可以切走，然后又能快速找到。直播也一样需要。</p><h2 id="12-输入法"><a href="#12-输入法" class="headerlink" title="12 输入法"></a>12 输入法</h2><p>还有一个可以提一下的新的研发中的产品，是团队正在研发的输入法。</p><p>我们会经常收到投诉，说刚刚在微信里聊到什么，就在其他 app 里看到这个东西的广告，是不是微信在出卖我的聊天记录给广告主。其实并不会。我们从来不会去分析用户的聊天记录，即便因此损失了很多广告收入。</p><p>所以当我们的技术团队，就是机器语义理解的团队，说我们自己做输入法可能会做的更好的时候，我当然很赞成。因为至少，在安全性方面，我们可以做的足够好。</p><p>我们的目标不是一下子获取多少用户。因为输入法是文字表达的入口，并且输入法必然越来越智能，可能出现新的输入形态，所以还是值得投入去做的。</p><h2 id="13-团队"><a href="#13-团队" class="headerlink" title="13 团队"></a>13 团队</h2><p>很多人说视频号迭代速度特别快。事实上在微信的头两年，我们都是这个速度，后来有时快有时慢。其实我认为做产品就是应该快的。</p><p>我经常说的一句话是，如果一个问题，三天没有想出答案的话，那么三个月也想不出来，因此要么三天内找到解决方法，要么放弃，去寻找新的路径，而不是耗在那里。</p><p>孙子兵法说到，行军打仗应该要“其徐如林，其疾如风”。做产品也是这样，要么没有想清楚，那不如什么都不做。如果要做，就要非常快速的迭代。</p><p>视频号团队到目前为止也就一两百人，其中还包括了三个算法团队，前后台开发，产品运营等。这很微信风格。互联网产品是关于创造力的，而不是拼人数。如果一个一百人的团队做不出来一个产品，给一千人也照样做不出来，甚至做的更差，因为一千人的内耗太大了。</p><h2 id="14-关于产品"><a href="#14-关于产品" class="headerlink" title="14 关于产品"></a>14 关于产品</h2><p>微信十年，如果非要用两个词来描述微信，我想，一个是连接，一个是简单。</p><p>连接是很美的。因为世界的运行就是靠万事万物的连接而进行的。对产品来说，做连接，意味着做服务的底层设施，因为基于连接可以演变出来的结果是最丰富的。</p><p>很多的社交产品可能也做连接，但它止步于人，微信的连接范畴更大，公众号、小程序目标都是连接，连接人和内容、人和服务，包括微信支付也可以认为是一种货币的连接，视频号的目标也是连接。重心不是在做内容，而是在做底层的连接，这很重要。这也是为什么我们会提“去中心化“，因为连接和中心化是有些排斥的。</p><p>再说简单。</p><p>我用简单来作为美观，实用，合理，优雅的代名词。</p><p>简单是很美的。从一个物理公式到一个日常用品，往往是简单的是更好的。实现同样一个目标，有一千种方法，但只有最简单的方法是最美的。正是因为有一千种方法存在，所以要真正做到简单是很难的。</p><p>以前在饭否，看到很多产品越做越复杂，我吐槽说，“一个产品，要加多少功能，才能成为一个垃圾产品啊！” 不是说加功能会让产品不好，而是加了不必要的功能，或者加功能的方式不对。</p><p>十年来，微信加了很多功能。我很庆幸的是，现在的微信，还几乎和十年前的微信一样简单。虽然比十年前多了非常多功能，但这些功能，都已经是用的最简单的办法了，所以增加的复杂度会小。</p><p>简单才会好用。特别是一个产品有十亿人在用的时候。</p><p>有时候也会想，很多用户其实并不一定很在意产品是否简单。粗制滥造的产品，也可能照样会有很多人用的。但是我们还是会追求简单，因为总有部分人，会认同这种简单背后的美感。</p><p>微信虽然是这么大用户量的产品了，并且经历了10年之久了，但我还是希望，它能一直保持自己的风格，一直像一个小而美的产品一样，有自己的灵魂，有自己的审美，有自己的创意，有自己的观念。而不仅仅是数字的奴隶。这样的话，我和团队，才会为我们的工作而感到骄傲，并且觉得有意义，这是我对微信十年在今天的最后一个总结。</p></details><p>我今天的分享就到这里。</p><p>谢谢现场的朋友们，谢谢观看直播的每一个人，希望我没有浪费你的时间。再见。</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机“翻译”历程</title>
    <link href="/blog/dots/dots_computer_history_dev/"/>
    <url>/blog/dots/dots_computer_history_dev/</url>
    
    <content type="html"><![CDATA[<h2 id="01-机器语言"><a href="#01-机器语言" class="headerlink" title="01 机器语言"></a>01 机器语言</h2><p>计算机刚发明那会儿，人们就是拨弄各种开关、操作各种电缆把程序“输入”到计算机中去。</p><p>这所谓的程序，可真的是 0110000111 这样的二进制，我真是佩服这些程序的设计者和操作员们，太不可思议了。</p><p>这种原始的方式也决定了难于诞生超大型程序，因为太复杂了，远远超过人脑能思考的极限。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_computer_history_dev/dots_computer_history_dev_1.jpg"></p><p>后来人们做了点改进，把程序打到穿孔纸带上，让机器直接读穿孔纸带，这下子就好多了，终于不用拨弄开关了。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_computer_history_dev/dots_computer_history_dev_3.jpg"></p><p>但程序的本质还是没有变化，依然是在使用二进制来编程。</p><p>如果这个样子一直持续下去，估计这个世界上的程序员会少的可怜：编程的门槛太高了。</p><p>比如说你的脑子里得记住这样的指令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">0000 表示从内存中往 CPU 寄存器装载数据<br>0001 表示把 CPU 寄存器的值写入内存<br>0010 表示把两个寄存器的值相加<br></code></pre></div></td></tr></tbody></table></figure><p>你还得记住每个寄存器的二进制表示：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1000 表示寄存器A<br>1001 表示寄存器B<br></code></pre></div></td></tr></tbody></table></figure><p>综合起来就像这样：</p><p>0000 1000  000000000001 它的意思是说，把编号为1的内存中的值装载到寄存器A当中</p><p>0010 1000  1001 的意思是把寄存器A和寄存器B的值加起来，放到寄存器A中。</p><p>整天生活在这样的世界里，满脑子都是0和1，人估计就抑郁了。</p><p>当时的程序员像熊猫一样稀少，不，肯定比熊猫更少，他们都要用二进制写程序。</p><h2 id="02-汇编语言"><a href="#02-汇编语言" class="headerlink" title="02 汇编语言"></a>02 汇编语言</h2><p>既然二进制这么难记，人们很快就想到：能不能给这些指令起个好听的名称呢？</p><div class="hljs code-wrapper"><pre><code>0000 : LOAD0001 : STORE0010 : ADD</code></pre></div><p>寄存器也是一样的：</p><div class="hljs code-wrapper"><pre><code>1000 : AX1001 : BX</code></pre></div><p>这下读来容易多了：</p><div class="hljs code-wrapper"><pre><code>ADD AX BX</code></pre></div><p>人们给这些帮助记忆的助记符起了个名字：<strong>汇编语言</strong>。</p><p>但是计算机是无法执行汇编语言的，因为计算机这个笨家伙只认二进制，所以还得翻译一下才行。</p><p>于是<strong>汇编器</strong>隆重登场了，他专门负责汇编语言写的程序翻译为机器语言，这个翻译的过程比较简单，几乎就是一一对应的关系。</p><p>汇编语言解放了人们的部分脑力，可以把更多的精力集中在程序逻辑上了。越来越多的人学会了使用汇编来编程，写出了很多伟大的软件。</p><p>汇编的优点是贴近机器，运行效率极高，但是缺点也是太贴近机器，直接操作内存和 CPU 寄存器，不能结构化编程，每次函数调用还得手动把栈帧给管理好，这对于一般的程序员来讲太难了！</p><p>在过去人们把穿孔纸带和汇编语言都称为<strong>低级语言</strong>，把这个时代称为<strong>机器语言编程时代</strong>。</p><p>生活在这个时代的人们是很幸福的，因为翻译工作十分简单。但是用汇编写程序的人还是太少。</p><h2 id="03-高级语言"><a href="#03-高级语言" class="headerlink" title="03 高级语言"></a>03 高级语言</h2><p>人类的欲望是无止境的，人们一直在探索用一种更高级的语言来写程序的可能性，这种高级语言应该面向人类编写和阅读，而不是面向机器去执行。</p><p>人类想要的高级语言是这样的：</p><p>声明各种类型的变量来表示数据，而不是用寄存器。例如：</p><div class="hljs code-wrapper"><pre><code>int value = 100</code></pre></div><p>能使用复杂的表达式来告诉电脑自己的意图：</p><div class="hljs code-wrapper"><pre><code>salary = 1000 + salary * 12</code></pre></div><p>可以用各种控制语句来控制流程：</p><div class="hljs code-wrapper"><pre><code> if .. else ,  while(....) ....</code></pre></div><p>还可以定义函数来封装、复用一段业务逻辑：</p><div class="hljs code-wrapper"><pre><code>int get_primes(int max) {.....}</code></pre></div><p>但是高级语言和低级语言之间存在着巨大的鸿沟，怎么把高级语言翻译成可以执行的机器语言是个非常难的问题！</p><p>人类在黑暗中摸索了很久才迎来一丝光明，1957年，第一个高级语言的编译器才在 IBM704 的机器上运行成功。更重要的是乔姆斯基对自然语言结构的研究，把语言文法做了分类，有了 0 型文法，1 型文法，2 型文法，3 型文法，这一下子给人们的翻译工作奠定了理论基础。</p><p>由于翻译的复杂性，除了汇编器之外，很多新成员加入进来，大家分工合作，把高级语言翻译成低级语言。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_computer_history_dev/dots_computer_history_dev_4.jpg"></p><p>第一步 词法分析</p><p>比如高级语言的源程序是这样：</p><div class="hljs code-wrapper"><pre><code>total =  1000 + salary * 12</code></pre></div><p>我们把它看成一个个的片段，每个片段叫做 Token。</p><ol><li>标识符 total</li><li>赋值符号 =</li><li>数字 1000</li><li>加号 +</li><li>标识符 salary</li><li>乘号 *</li><li>数字12</li></ol><blockquote><p>程序中的空格被无情的删除了，但是底层编译的人们还会建立一个符号表让后面的人去使用：</p></blockquote><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_computer_history_dev/dots_computer_history_dev_5.png"></p><p>第二步 二叉树就会接管，它非常厉害，会做语法分析，用一个上下文无关的语法理论，把之前生成的 Token 按照语法规则组建成一棵树</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_computer_history_dev/dots_computer_history_dev_6.png"></p><p>第三步 做语法分析，要看看这些标志符的类型，作用域是不是正确，运算是否合法，取值范围有没有问题等等。</p><p>第四步 最重要，把中间代码生成，代码优化，以及最后的代码生成。</p><p>比如第四步根据语法树生成的中间代码如下：</p><div class="hljs code-wrapper"><pre><code>temp1 = id2 * 12    //把id2乘12的值赋值给temp1temp2 = 1000 + temp1    //把1000+temp1的值赋值给temp2id1 =  temp2    //把temp2的值赋值给id1</code></pre></div><blockquote><p>注意：id2 就是 salary, id1 就是 total</p></blockquote><p>然后再优化一下：</p><div class="hljs code-wrapper"><pre><code>temp1 = id2 * 12    //把id2乘12的值赋值给temp1id1 = 1000 + temp1    //把1000+temp1的值赋值给id1</code></pre></div><p>然后翻译成汇编：</p><div class="hljs code-wrapper"><pre><code>MOV  id2     AXMUL  12      AXADD  1000    AXMOV  AX      id1</code></pre></div><p>这已经非常接近运行了！</p><p>但是，这id1（total）,id2 (salary) 只是两个符号，计算机根本不知道是什么东西，计算机只关心内存和寄存器，所以还得给这两个家伙分配空间，得到他们的地址。</p><p>如果这两个变量是在别的文件中定义的，还需要做一件特别的事情：<strong>链接</strong>！</p><p>通过链接的方式，把变量的真正地址获取到，然后修改上面的id1, id2, 这样才能形成一个可以执行的程序。</p><p>在翻译的过程中，如果有任何步骤出了错误，控制台就会通知程序员，告诉他哪个地方写错了，改正后重新再来。</p><p>这非常重要，没有这项翻译工作，人类就无法使用高级语言来编程，像C, C++, Pascal, C#, Java 这样影响力巨大的语言就不会出现。 </p><p>底层汇编器、链接器、编译器、解释器和操作系统、数据库、网络协议栈等软件一起，成为了计算机世界底层的基础软件。 </p><p>现在所谓的高级语言一点也不高级，只有经过训练的专业人士才能使用，希望在未来会出现完全用自然语言来写程序。这样世界会变得无比的和谐。 👀</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生，是一个不断成熟的过程。</title>
    <link href="/blog/life/life_0001/"/>
    <url>/blog/life/life_0001/</url>
    
    <content type="html"><![CDATA[<p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_1.jpg"></p><div class="note note-success">            <p>本文转载自微信公众号<strong>洞见</strong>，作者李思圆。</p>          </div><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_2.jpg"></p><p>人的一生，从哇哇坠地到将近暮年，不过短短几十年时间。</p><p>每一天的你，都需要在生活中，不断地进行打磨和历练，每一年的你，都要比过去的自己更有成长和进步。</p><p><strong>每一个阶段的你，也都会遇到更不一样的世界和自己。</strong></p><p>其实，所有的成熟，都必然伴随着巨大的痛苦和代价，所有的智慧，也必然伴随着诸多的经验和教训，甚至所有的平和，也必然伴随着诸多的坎坷和艰难。</p><p>有时，你会发现人生是一本，阅不尽的书，走不完的路；</p><p>有时，你也会发现，人生的诸多道理，其实在你一路寻找，一路跋涉中，已然有了最好的注解和答案。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_3.jpg"></p><p>比如，年轻时，你从不拿身体当回事。</p><p>该吃的饭不好好吃，该睡的觉不好好睡，该有的锻炼也不去练。</p><p>但当你上了一定年纪，开始感觉到身体某个部位的不舒服，不协调，不顺畅时，其实已经失去了健康。</p><p>于是慢慢地你就开始明白，钱当然要挣，班有时也不得不加，但千万不要为了工作透支了身体。</p><p><strong>没有人比你更了解你的身体，也没有人比你更知道，自己是不是累了，是该休息，还是该继续。</strong></p><p>自己都不爱自己的人，很难过好这一生，毕竟名利钱财都是身外之物，但失去了健康，一切都变得毫无价值和意义。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_4.jpg"></p><p>年轻时，我们都有冲动，易怒，乃至情绪不稳定的缺点。</p><p>那时，他人的一句话，一个动作，乃至一个眼神，能让你一整天都开心不起来。</p><p>你总把别人的看法也好，评价也罢，看得太重要。</p><p>可后来你也慢慢发现：</p><p>遇到误解，不必去解释，毕竟相信你的人始终相信你，不相信你的人，费再多唇舌也没有用。</p><p>遇到诽谤，不必去理会，毕竟讨厌你的人，无论你做得再好，也不会喜欢你，又何必去强求和辩解。</p><p>遇到看不惯你，故意招惹你，乃至与你作对的人，也不必去纠缠，毕竟你的时间和精力都很有限。</p><p><strong>人到一定年纪，要学会用一颗平常心，去对待所有的人和事。</strong></p><p>不要拿别人的错误来惩罚自己，也不要拿别人的偏见来折磨自己，生活是自己的，何必把太多无关紧要的人和事，请进生命里。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_5.jpg"></p><p>人的一生，无论是轰轰烈烈，还是平平凡凡地过，其实，所有的悲和喜，都只是你一个人去品尝。</p><p>所以，慢慢地你就会把更多的焦点，放在自己身上，而不是对他人抱有太大的期待，也不必去求太多的理解。</p><p>到了一定年纪，你就会知道，你过得苦不苦，累不累，旁人根本没办法感同身受，与其求得他助人，不如自渡。</p><p>到了一定年纪，你就会知道，真正关心和在意你的人没几个，与其去在乎那些心里根本没你的人，还不如去珍惜眼前人。</p><p>到了一定年纪，你就会知道，开不了的花，浇再多水也开不了，结不了的果，等再久也结不了。</p><p>在尽了最大的努力后，要学会坦然地去听天命，该放弃的放弃，该转身的转身，千万不要跟自己较劲。</p><p>终有一天，你会明白，这个世上，没有过不去的坎，也没有跨不过去的难，心态好了，万事也就顺了。</p><p>总有一天，你会明白，不必为了不值得的人和事伤心和生气，毕竟仅此一生，我们只够用来珍惜和善待。</p><p>终有一天，你会明白，开心过是一天，不开心过也是一天，不如从容坦然去面对和接纳一切的好与坏。</p><p>人不会一下子就觉悟人生当中所有的真谛和道理，但却需要在一个又一个的年龄阶梯中，不断地变得更通透，开阔和达观。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/life/life_0001/life_0001_index_img_1.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Thinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computers and people</title>
    <link href="/blog/dots/dots_Computers_and_people/"/>
    <url>/blog/dots/dots_Computers_and_people/</url>
    
    <content type="html"><![CDATA[<p>今天给大家分享两幅图，它们是如此的重要，以至于你看到的很多软件的设计都和他们相关， 可以说图中展示的问题都是计算机的本质问题。 </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/Computers_and_people/Computers_and_people_1.jpg" alt="图1 计算机各个部件的速度"></p><p>可以看到，CPU 最快，一个时钟周期是0.3纳秒，内存访问需要120纳秒，固态硬盘访问需要50-150微秒，传统硬盘访问需要1-10毫秒， 网络访问最慢，都是几十毫秒。 </p><p>这幅图最有趣的地方在于它把<b>计算机世界的时间和人类世界的时间做了对比，</b>CPU 跑得很快，但是记不住事情，<b>它的一个时钟周期如果按1秒算：</b> </p><p><b>内存访问就是6分钟</b><br><b>固态硬盘访问是2-6天</b><br><b>传统硬盘访问是1-12个月</b><br><b>网络访问就是几年了！</b></p><div class="note note-success">            <p>1秒= 1000毫秒= 1000,000 微秒 = 1000,000,000纳秒</p>          </div><p><b>如果你是 CPU，你会觉得这个世界真是慢死了！</b>从硬盘访问数据得等待“几天”甚至“几个月”！ </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/Computers_and_people/Computers_and_people_2.jpg" alt="图2 存储器的层次结构"></p><p>图2 把 图1 的信息变成了层次化的方式，并且增加了价格信息，它展示了一个真理：世界上没有免费的午餐。 </p><p>存储器越往上速度越快，但是价格越来越贵， 越往下速度越慢，但是价格越来越便宜。 </p><p>这两幅图有什么意义呢？正是由于计算机各个部件的速度不同，容量不同，价格不同，导致了计算机系统/编程中的各种问题以及相应的解决方案，我来举几个例子。 </p><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例 1"></a>案例 1</h2><p>CPU 的速度超级快，不能老是让它闲着，要充分地压榨它！ </p><p>这里有两个强劲的理由： </p><ol><li>人类需要多个程序“同时”运行 </li></ol><p>我们要把 CPU 的时间进行分片，让各个程序在 CPU 上轮转，造成一种多个程序同时在运行的假象，即<b>并发</b>。 </p><ol start="2"><li>当 CPU 遇到 IO 操作（硬盘，网络）时，不能坐在那里干等“几个月”甚至“几年”</li></ol><p>在等待的时候，一定要切换，去执行别的程序。 </p><p>说起来简单，但是程序的切换需要保存程序执行的现场，以便以后恢复执行，于是需要一个数据结构来表示，这就是<b>进程</b>了。 </p><p>如果一个进程只有一个“执行流”， 如果进程去等待硬盘的操作，那这个程序就会被阻塞，无法响应用户的输入了，所以必须得有多个“执行流”，即<b>线程</b>。 </p><h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例 2"></a>案例 2</h2><p>需要持久化的数据一定要保存到硬盘中，但是硬盘超级慢，支持不了大量的并发访问，那怎么办呢？ </p><p>可以把最常访问的热点数据放到 CPU 的缓存中嘛，其实 CPU 也是这么做的，但是 CPU 的 L1, L2, L3 级缓存实在是太小，根本满足不了需求。 </p><p>于是只好退而求其次，把热点数据放到速度稍慢的内存中，于是<b>应用程序的缓存</b>就出现了。 </p><p>缓存虽然是解决了问题，但是也带来了更多的问题，例如：<br>缓存数据和数据库数据怎么保持一致性？<br>缓存如果崩溃了该怎么处理？<br>数据在一台机器的内存放不下了，要分布到多个机器上，怎么搞分布式啊，用什么算法？…</p><h2 id="案例-3"><a href="#案例-3" class="headerlink" title="案例 3"></a>案例 3</h2><p>考虑一个像 Tomcat 这样的应用服务器，对于每个请求都要用一个线程来处理，如果现在有一万个请求进来，Tomcat 会建立1万个线程来处理吗？ </p><p>不会的，因为线程多了开销会很大，线程切换起来也很慢，所以它只好用个<b>线程池</b>来复用线程。 </p><p>现在假设线程池中有一千个可用线程（已经非常多了），它们都被派去访问硬盘，数据库，或者发起网络调用，这是非常慢的操作，导致这一千个线程都在等待结果的返回（阻塞了），那剩下的九千个请求就没法处理了，对吧？ </p><p>所以后来人们就发明了新的处理办法，仅使用几个线程（例如和 CPU 核心数量一样），让他们疯狂运行，遇到 I/O 操作，程序就注册一个钩子函数放在那里，然后线程就去处理别的请求，等到 I/O 操作完成了，系统会给这个线程发送一个事件，线程就回过头来调用之前的钩子函数（也叫回调函数）来处理。</p><p>这就是<b>异步</b>，<b>非阻塞</b>的处理方式。Node.js，Vert.x 等采用的都是类似的思想。 </p><h2 id="案例-4"><a href="#案例-4" class="headerlink" title="案例 4"></a>案例 4</h2><p><b>Redis 使用单线程的方式来处理请求的</b>，为什么用单线程就可以呢？它为什么不像 Tomcat 那样使用多线程和线程池呢？ </p><p>因为它面对的仅仅是内存，内存的速度在计算机的体系中仅次于 CPU，比那些网络操作不知道要快到哪里去了（可以回头看看第一幅图中网络速度有多慢！） </p><p>所以这个唯一的线程就可以快速地执行内存的读写操作，完成从许多网络过来的缓存请求了。单线程还有个巨大的优势，没有竞争，不需要加锁！</p><p>软件中的很多问题，其根源都是计算机各个部件的速度差异导致的。 </p><p>这里可以开一个脑洞，如果硬盘的速度和内存的速度一样快，并且可以持久化存储，不会像内存一样断电以后数据就丢失了，那我们的电脑和系统会变成什么样子呢？</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>家用路由器每天在干吗</title>
    <link href="/blog/dots/dots_What_is_the_home_router_doing_every_day/"/>
    <url>/blog/dots/dots_What_is_the_home_router_doing_every_day/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>今天的主人公是<strong>家用路由器</strong></p>          </div><p>夜深人静，电视和电脑都已经关机休息，但是我还在默默工作，我安静地趴在你家中的某个地方，7*24小时不眠不休，任劳任怨，目的只有一个，能让你舒服地躺在床上，畅快地刷手机！ </p><p>我的主业是路由器，同时兼任 <strong>DHCP 服务器</strong>，<strong>交换机</strong>，<strong>无线 AP</strong>，<strong>PPPoE 客户端</strong>，<strong>防火墙</strong>等重要部门的职务。</p><p>为了把工作做好，我还必须得实现几个重要的协议如 <strong>DHCP</strong>，<strong>ARP</strong>，<strong>NAT</strong> 等，十八般武艺集于一身，是不是很厉害？ </p><p>对于普通人来说，只需要设置一下宽带账号和密码，WIFI 名称和密码，就可以联网了，岂不知在背后我干了很多的脏活和累活。 </p><p>比如，当你设置了无线名称（SSID），密码等信息，开启了无线广播以后，我的无线 AP 部门就得开始干活了。 </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_1.jpg"></p><p>它需要不停地向周围广播信标帧（Beacon Frame），其中包含 SSID 和 MAC 地址，还有其它基本信息。然后各种设备才可能发现我，输入用户名和密码，连接上我。 </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_2.jpg"></p><p>其次，我一般还有通过 PPPoE 拨号上网的功能，要不然你怎么连接外网？ </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_3.jpg"></p><p>但是只有这两个功能还远远不够，我还是个 <strong>DHCP 服务器</strong>，这个局域网内的 IP 都由我来发放。 </p><p>你看这个新连上 WIFI 的 ThinkPad 电脑，只有 MAC 地址，没有 IP 地址，它需要按照我们网络世界的约定，用 <strong>DHCP 协议</strong>获得一个 IP 地址。 </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_4.png"></p><p>同时这个 ThinkPad 电脑还可以从我这里获得默认网关的地址，默认网关也是我 192.168.1.1，当 ThinkPad 电脑真正上外网的时候，就可以用到了。 </p><p>电脑有了 IP 地址，就能上网吗？ </p><p>不能，因为我给他们发的都是内网地址 192.168.1.xx ，在互联网上，这并不是唯一的。 </p><p>例如隔壁老王家的 Mac 电脑的 IP 地址也是 192.168.1.2 ，和我家的 ThinkPad 的 IP 是一样的，怎么区分？如何上外网？</p><p>还好，我这个路由器，通过拨号连入运营商网络的时候，获得了一个唯一的外网地址： 61.52.247.112 。 </p><p>那我就把这个外网 IP 地址给大家共享，共享的办法非常简单，就是通过不同的端口号，把我和各个电脑之间形成对应关系，把大家区分开。 </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_5.jpg"></p><p>接下来是 Thinkpad 电脑访问外网服务器时数据包发送和接收的简要过程： </p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_What_is_the_home_router_doing_every_day/dots_What_is_the_home_router_doing_every_day_6.jpg"></p><p>这种方式就是著名的 NAT 了，即网络地址转换。 </p><p>现在这个 Thinkpad 正式访问外网，它要把数据发到我的默认网关（192.168.1.1），但是网络世界必须得知道 MAC 地址，形成数据链路层的数据包才能发送。 </p><p>ThinkPad 没办法，只好动用 <strong>ARP 协议</strong>，在局域网中大声呼喊：192.168.1.1，你的 MAC 地址是啥？ </p><p>然后我就直接告诉它：192.168.1.1 的 MAC 地址是B4:2E:A4:59:83:A3，记住吧，以后别乱叫了。 </p><p>ThinkPad 知道了我的 MAC 地址，把数据包发到我这里，我拆开一看，哦？目标 IP 地址是外网，于是，我就使用我简单的路由功能，转发到 WAN 口的外网去，当然在这个过程中，我得用到 NAT 。 </p><p>如果你关掉我的路由功能（各个路由器具体做法不同），我就可以变成一个交换机，在数据链路层来转发同一子网内的数据包。我本身还有简易的防火墙，你可以登录到路由器的管理端去看看。</p><div class="note note-info">            <p>当你的设备连接到 WIFI 时，在浏览器地址栏内输入网关地址（192.168.1.1），便可以访问到路由器管理登录页面。</p>          </div><div class="note note-success">            <p>如何查看路由器网关地址呢？例如，当一个设备连接到路由器时，它本身的 IPv4 地址是 192.168.1.101 时，路由器的网关地址为 192.168.1.1 ，当它本身的 IPv4 地址是 192.168.0.101 时，路由器的网关地址为 192.168.0.1 ，以此类推。</p>          </div><p>一个家用路由器竟然有下面这么多的功能,但是它十八般武艺样样稀松，功能虽多，但都是基本够用。这是自然，对于一个家庭设备来说，能轻松上网就够了，要啥自行车？ </p><span class="label label-info">无线 AP</span>+<span class="label label-info">路由器</span>+<span class="label label-info">交换机</span>+<span class="label label-info">防火墙</span>+<span class="label label-info">PPPoE 客户端</span>+<span class="label label-info">DHCP 服务器</span>+<span class="label label-info">NAT 转换</span>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>家用路由器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 系统与 iOS 系统文件传输方案</title>
    <link href="/blog/dots/dots_windows_ios_file_transmission/"/>
    <url>/blog/dots/dots_windows_ios_file_transmission/</url>
    
    <content type="html"><![CDATA[<h2 id="01-告别微信QQ传文件"><a href="#01-告别微信QQ传文件" class="headerlink" title="01 告别微信QQ传文件"></a>01 告别微信QQ传文件</h2><p>  过去在手机电脑之间互传文件，通常的做法是用 qq 传输到我的电脑或我的手机，或者是微信的文件传输助手（发送的文件大小不能大于 100 M），这样不仅麻烦，而且需要打开 app 传输，速度受限于网速，最不能忍的是限制传送文件大小。<br>  为了避免上面的各种问题，这里推荐一种新的方案，就是 smb 协议，Windows 的网上邻居，其实就使用到了这个协议，通过这个传输协议，你可以把你的手机作为电脑的”网上邻居”，从而实现文件夹的共享。</p><div class="note note-warning">            <p>注意：此方法要求你的 iOS 设备和电脑在同一局域网（同一Wi-Fi），且文件传输速度取决于路由器性能。（即使路由器未连接互联网也可以进行文件传输）</p>          </div><h2 id="02-开始配置"><a href="#02-开始配置" class="headerlink" title="02 开始配置"></a>02 开始配置</h2><h3 id="第一步-启用-Windows-的-SMB-共享功能"><a href="#第一步-启用-Windows-的-SMB-共享功能" class="headerlink" title="第一步 启用 Windows 的 SMB 共享功能"></a>第一步 启用 Windows 的 SMB 共享功能</h3><blockquote><p>打开控制面板→程序→程序与功能→启动或关闭 Windows 功能→勾选 SMB 文件共享支持→点击确定</p></blockquote><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_1_1.png"></p><div class="note note-warning">            <p>注意：重新启动电脑才会生效</p>          </div><h3 id="第二步-在-Windows-系统下新建一个用户"><a href="#第二步-在-Windows-系统下新建一个用户" class="headerlink" title="第二步 在 Windows 系统下新建一个用户"></a>第二步 在 Windows 系统下新建一个用户</h3><blockquote><p>打开设置→账户→家庭和其它用户→将其他人添加到这台电脑</p></blockquote><ol><li><p>点击我没有这个人的登录信息<br><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_1.png"></p></li><li><p>点击添加一个没有 Mircosoft 账户的用户<br><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_2.png"></p></li><li><p>设置用户名和密码以及密保问题→点击下一步即可<br><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_3.png"></p></li></ol><div class="note note-success">            <p>至此，在 Windows 系统下新建一个用户完成。</p>          </div><h3 id="第三步-新建一个文件夹"><a href="#第三步-新建一个文件夹" class="headerlink" title="第三步 新建一个文件夹"></a>第三步 新建一个文件夹</h3><div class="note note-info">            <p>这个文件夹将作为 iOS 设备与 Windows 电脑之间的共享文件仓库</p>          </div><div class="note note-warning">            <p>注意：这个新建文件夹路径及名称均可自定义，例如，你可以将它新建在 E 盘根目录下并命名为ios_repo。</p>          </div><h3 id="第四步-对这个新建文件夹开启共享"><a href="#第四步-对这个新建文件夹开启共享" class="headerlink" title="第四步 对这个新建文件夹开启共享"></a>第四步 对这个新建文件夹开启共享</h3><blockquote><p>① 右键文件夹→属性→共享→共享（网络文件和文件夹共享）</p></blockquote><ol><li><p>添加共享账户（例如这里输入 ios_user 点击添加）<br><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_1.png"></p></li><li><p>将权限设置为写入/读取→点击共享→点击完成<br><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_2.png"></p></li></ol><blockquote><p>② 点击高级共享→勾选共享文件夹</p></blockquote><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_3.png"></p><ol><li>点击权限→添加→输入用户名（ios_user）→检查名称→确定</li></ol><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_4.png"></p><ol start="2"><li>设置权限：勾选完全控制→点击应用→确定</li></ol><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_5.png"></p><div class="note note-warning">            <p>注意：记得点击→应用→确定→关闭。到此配置已经完成。</p>          </div><h2 id="03-查看本机的-IPv4-地址"><a href="#03-查看本机的-IPv4-地址" class="headerlink" title="03 查看本机的 IPv4 地址"></a>03 查看本机的 IPv4 地址</h2><blockquote><p>左击任务栏的网络图标→左击属性→滚动滑轮到底部→查看 IPv4 地址即可。</p></blockquote><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_3_1_1.png"></p><div class="note note-warning">            <p>请记住 IPv4 地址，接下来要用到。</p>          </div><h2 id="04-通过-IPv4-地址来访问电脑"><a href="#04-通过-IPv4-地址来访问电脑" class="headerlink" title="04 通过 IPv4 地址来访问电脑"></a>04 通过 IPv4 地址来访问电脑</h2><p><a id="demo"></a></p><div class="note note-info">            <p>接下来是 iOS 端的配置（在 iPhone 或 iPad 上配置）</p>          </div><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_1.png"></p><blockquote><p>打开“文件”应用→点击右上角 ··· →点击连接服务器→在窗口中输入 smb://刚刚查看的 IPv4 地址→点击连接</p></blockquote><div class="note note-info">            <p>例如输入 smb://192.168.0.101 （这是我的 IPv4 地址，换成你的👀）</p>          </div><blockquote><p>点击注册用户→填写你刚刚在 windows 新建的用户名和密码→点击下一步</p></blockquote><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_2.png"></p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_3.png"></p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_4.png"></p><div class="note note-success">            <p>大功告成，这个用于共享的仓库就建立完成了，你已经可以在 iOS 端看到共享文件夹，随意传输文件吧😉</p>          </div><h2 id="05-开始使用"><a href="#05-开始使用" class="headerlink" title="05 开始使用"></a>05 开始使用</h2><div class="note note-success">            <p>配置完成后，电脑向手机传输文件只需简单地将文件复制或移动到这个共享文件夹即可。</p>          </div><div class="note note-success">            <p>手机端向电脑传输文件：打开照片应用→选择一个照片/视频→点击分享按钮→存储到“文件”→点击你创建的文件夹（ios_repo）→点击存储。</p>          </div><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_5_2_1.jpg"></p><div class="note note-warning">            <p>当存储位置列表为空或内容不可用时（出现某个未知错误），说明服务已经中断，需要在手机端点击已共享服务器右侧小三角断开服务器后重新连接。如果依然没能解决问题，将电脑和手机都重启一遍。</p>          </div><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_5_2_2.png"></p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_5_2_3.png"></p><div class="note note-danger">            <p>当电脑重新启动时，路由器的 DHCP 服务器会重新分配 IPv4 地址给电脑，当分配的 IPv4 地址与之前不一致时，需要重复 <a href="#demo">[04 通过 IPv4 地址来访问电脑]</a>这一步输入新的服务器地址（ smb://新的 IPv4 地址）。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>iOS</tag>
      
      <tag>文件传输</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式与集群</title>
    <link href="/blog/dots/dots_Distributed_and_clustered/"/>
    <url>/blog/dots/dots_Distributed_and_clustered/</url>
    
    <content type="html"><![CDATA[<h2 id="01-分布式"><a href="#01-分布式" class="headerlink" title="01 分布式"></a>01 分布式</h2><p>小明的公司有3个系统： 系统A、系统B和系统C ，这三个系统所做的业务不同，被部署在3个独立的机器上运行， 他们之间互相调用（当然是跨域网络的）， 通力合作完成公司的业务流程。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_1.jpg"></p><p>将不同的业务分布在不同的地方， 这就构成了一个<b>分布式</b>的系统，现在问题来了， 系统A是整个分布式系统的“脸面”， 用户直接访问，用户量访问大的时候要么是速度巨慢，要么直接挂掉， 怎么办？ </p><p>由于系统A只有一份， 所以会引起<b>单点失败</b>。</p><h2 id="02-集群（Cluster）"><a href="#02-集群（Cluster）" class="headerlink" title="02 集群（Cluster）"></a>02 集群（Cluster）</h2><p>小明的公司不差钱，就多买几台机器吧， 小明把系统A一下子部署了好几份（例如下图的3个服务器），<b>每一份都是系统A的一个实例， 对外提供同样的服务，</b>这样能睡个安稳觉了，即使其中一个坏掉了，我还有另外2个呢。  </p><p>这3个服务器上的系统就组成了一个<b>集群</b>。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_2.png"></p><p>可是对用户来说，一下子出现这么系统A ，每个系统的IP地址都不一样，  到底访问哪一个？ </p><p>如果所有人都访问服务器1.1 ，那服务器1.1 会被累死， 剩下的两个闲死，成了浪费钱的摆设。</p><h2 id="03-负载均衡（Load-Balancer）"><a href="#03-负载均衡（Load-Balancer）" class="headerlink" title="03 负载均衡（Load Balancer）"></a>03 负载均衡（Load Balancer）</h2><p>小明要尽可能的让3个机器上的系统A 工作均衡一些， 比如有3万个请求，那就让3个服务器各处理1万个（当然，这是理想状况）， 这叫<b>负载均衡</b>。  </p><p>很明显，这个<b>负载均衡</b>的工作最好独立出来， 放到独立的服务器上 （例如Ngnix）：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_3_1.png"></p><p>后来小明发现， 这个负载均衡的服务器虽然工作内容很简单，就是拿到请求，分发请求，但是它还是有可能挂掉啊， <b>单点失败</b>还是会出现。</p><p>没办法，只好把负载均衡也搞成一个集群， 不过和系统A的集群有两点不同：</p><ol><li>这个新的集群中虽然有两个机器，但我们可以用某种办法，让这个集群对外只提供一个IP地址， 也就是说<b>用户看到的好像只有一个机器。</b></li><li><b>同一时刻，我们只让一个负载均衡的机器工作， 另外一个原地待命。</b> 如果工作的那个挂掉了，待命的那个就顶上去。</li></ol><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_3_2.jpg"></p><h2 id="04-弹性"><a href="#04-弹性" class="headerlink" title="04 弹性"></a>04 弹性</h2><p>如果这3个系统A的实例还是满足不了大量的请求，那就再加服务器！ </p><p>双11来了，用户量是平时的10倍， 小明向领导申请费用又买了几十台服务器，一下子把系统A部署了几十份。  可是双11过后， 流量一下子降下来了，那几十个服务器用不上了，也变成了摆设！</p><p>被领导批评以后，小明决定尝试一下云计算，  在云端可以轻松的创建、删除虚拟的服务器， 那样就可以轻松地随着用户的请求动态的增减服务器了。  双11来了就创建虚拟服务器，等到双11过去了就把不用的关掉， 省得浪费钱。 </p><p>于是小明的系统具备了一定的<b>弹性</b>。</p><h2 id="05-失效转移"><a href="#05-失效转移" class="headerlink" title="05 失效转移"></a>05 失效转移</h2><p>上面的系统看起来很美好，但是做了一个不切实际的假设： 所有的服务都是无状态的。 换句话说，假设用户的两次请求直接是没有关联的。</p><p>但是现实是，大部分服务都是有状态的， 例如购物车。</p><p>用户访问系统，在服务器1.1上创建了一个购物车，并向其中加入了几个商品， 然后 服务器1.1 挂掉了， 用户的后续访问就找不到服务器1.1了，这时候就要做<b>失效转移</b>，让另外几个服务器去接管、去处理用户的请求。</p><p>可是问题来了，在服务器1.2，1.3上有用户的购物车吗？  如果没有， 用户就会抱怨，我刚创建的购物车哪里去了？</p><p>还有更严重的，假设用户是在服务器1.1上登录的， 用户登录过的信息保存到了该服务器的 session 中， 现在这个服务器挂掉了， 用户的 session 自然也不见了，当用户被失效转移到其他服务器上的时候，其他服务器发现用户没有登录， 就把用户踢到了登录界面， 让用户再次登录！</p><p>状态， 状态，状态！ 用户的登录信息，购物车等都是状态信息，  处理不好状态的问题，集群的威力就大打折扣，无法完成真正的失效转移， 甚至无法使用。</p><p>怎么办？  </p><p>一种办法是把状态信息在集群的各个服务器之间复制，让集群的各个服务器达成一致，  谁来干这个事情？ 只能是像 Websphere, Weblogic 这样的应用服务器了。 </p><p>还有一种办法， 就是把状态信息集中存储在一个地方， 让集群的各个服务器都能访问到：</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_5.jpg"></p><p>小明听说 Redis 不错， 那就用 Redis 来保存吧 ！</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 开启上帝模式</title>
    <link href="/blog/dots/dots_windows_open_god_model/"/>
    <url>/blog/dots/dots_windows_open_god_model/</url>
    
    <content type="html"><![CDATA[<p>啥是上帝模式？</p><p>其实上帝模式还有另一个名字叫“完全控制面板”，包含了几乎所有 Windows 系统的设置，如控制面板的功能、界面个性化、辅助功能选项等方方面面的控制设置，用户只需通过这一个窗口就能实现所有的操控。</p><p>如下图就是上帝模式的界面，里面可以看到很多的设置项目。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_open_god_model/dots_windows_open_god_model_1.png"></p><div class="note note-success">            <p>这个模式默认是隐藏的，但开启的方法也很简单：</p>          </div><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>按组合键“Win + R”调出运行窗口输入：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">shell:::{ED7BA470-8E54-465E-825C-99712043E01C} <br></code></pre></div></td></tr></tbody></table></figure><p>按回车键即可进入。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_open_god_model/dots_windows_open_god_model_2.png"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在桌面右键新建一个快捷方式，对象位置输入这个地址：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">explorer.exe shell:::{ED7BA470-8E54-465E-825C-99712043E01C} <br></code></pre></div></td></tr></tbody></table></figure><p>之后双击新建的快捷方式就可以打开上帝模式。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_open_god_model/dots_windows_open_god_model_3.png"></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>桌面右键新建一个文件夹，然后重命名文件夹的名字为：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">GodMode.{ED7BA470-8E54-465E-825C-99712043E01C} <br></code></pre></div></td></tr></tbody></table></figure><p>然后文件夹图标就会变成控制面板的图标，双击它即可开启上帝模式。</p><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_windows_open_god_model/dots_windows_open_god_model_4.png"></p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stay Hungry，Stay Foolish.</title>
    <link href="/blog/dots/dots_stay_hungry_stay_foolish/"/>
    <url>/blog/dots/dots_stay_hungry_stay_foolish/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>史蒂夫 <b>·</b> 乔布斯 2005 年在斯坦福大学的演讲</p>          </div><hr><!-- ![](https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_stay_hungry_stay_foolish/dots_stay_hungry_stay_foolish_1.jpg) --><p><video poster="" src="https://static-video-1253741713.cos.ap-beijing.myqcloud.com/%E3%80%90HD%E3%80%91%20%E5%8F%B2%E8%92%82%E5%A4%AB%C2%B7%E4%B9%94%E5%B8%83%E6%96%AF%20-%202005%E5%B9%B4%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A%E5%85%B8%E7%A4%BC%E4%B8%8A%E7%9A%84%E6%BC%94%E8%AE%B2%20-%201.%5BHD%5D%20Steve%20Jobs%20-%202005%20Stanford%20Commen%28Av8287999%2CP1%29.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" preload="meta">Your browser does not support the video tag.</video></p><hr><details><summary>Steve Jobs 演讲稿</summary><p>  I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><details><summary>译文</summary>  今天，我很荣幸能参加你们的毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学毕业。说老实话，今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。就讲这些，没什么大不了的，只讲三个故事。</details><h2 id="The-first-story-is-about-connecting-the-dots"><a href="#The-first-story-is-about-connecting-the-dots" class="headerlink" title="The first story is about connecting the dots."></a>The first story is about connecting the dots.</h2><details><summary>译文</summary><b>第一个故事是关于把点连成线。</b></details><p>  I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?</p><details><summary>译文</summary>  我在里德学院读了六个月之后就退学了，但后来又以插班生的身份在那里待了 18 个月左右才真正退学。那么，我为什么会退学呢?</details><p>  It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><details><summary>译文</summary>  故事要从我出生前说起。我的生母当时是一个年轻的、尚未结婚的大学研究生，她决定让别人收养我。她十分想让我被有大学学历的人收养。所以一切都计划好了，我一出生就会被一位律师和他的妻子收养。但是当我被生下来的时候，他们在最后一刻决定，他们其实想要领养一个女孩。</details><p>  So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><details><summary>译文</summary>  所以我的养父母（他们在候选名单上）突然在半夜接到了一个电话：“我们这儿现在有一个亲生父母无法抚养的男婴，你们想要他吗?”他们回答道：“当然要”，我的亲生母亲随后发现，我的养母从未在大学毕业，我的养父高中都没有毕业。她拒绝签署最终的收养文件。只是在几个月以后，我的养父母承诺会供我上大学，她才松口答应。</details><p>  And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><details><summary>译文</summary>  十七年之后，我真的上了大学。但我天真地选择了一所学费几乎和斯坦福大学一样昂贵的大学，我工薪阶层父母的所有积蓄都被我花在了大学学费上，而六个月后，我看不到其中的价值所在。我不知道自己这辈子想要做些什么，也不知道大学能怎样帮助我找到答案。</details><p>  And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><details><summary>译文</summary>  而我在这里几乎花光了我父母这一辈子的所有积蓄。所以我决定要退学，并且相信一切会有办法的。我当时确实非常的害怕，但是现在回头看看，那的确是我这一生中曾经做过的最棒的决定之一。在我退学的那一刻，我终于可以不必去读那些令我提不起丝毫兴趣的课程了，然后我还可以去修那些看起来有点意思的课程。</details><p>  It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><details><summary>译文</summary>  但是事实并不是那么浪漫。我没有了宿舍住，所以我只能睡在朋友房间的地板上，我去捡可乐瓶子，以五分一个的价格卖掉，这样我就可以有点钱买吃的，在每个星期天的晚上，我会走七英里的路程，到城市另一端的 Hare Krishna 寺庙(注：位于纽约 Brooklyn 下城)，可以吃上每星期唯一一顿饱饭。我当时乐在其中。我跟着我的直觉和好奇心走，遇到了很多东西，此后被证明是无价之宝。我来举个例子吧：</details><p>  Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><details><summary>译文</summary>  在那时，里德学院提供全美最好的美术字课程。在这个大学里，每张海报，每个抽屉的每个标签，全都是漂亮的手写美术字。因为我退学了，不用去上那些常规的课程，所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</details><p>  I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><details><summary>译文</summary>  我学到了衬线字体和无衬线字体，我学会了怎样在不同的字母组合之中改变空格的长度，还有怎样才能作出最棒的印刷样式。那是一种科学永远不能捕捉到的、美丽的、历史性的艺术精妙，我发现那实在是太美妙了。</details>  None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.<details><summary>译文</summary>  当时这些东西好像在我的生活中并没有实际应用的可能。但是十年之后，当我们在设计第一台 Macintosh 电脑的时候，它浮现在我的脑海里。我把当时我学的那些家伙全都设计进了 Mac。那是第一台使用了漂亮的印刷字体的电脑。如果我在大学里从没有学那门课，麦金塔电脑就不会有多种字体或者适当分隔的字体。</details><p>  And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><details><summary>译文</summary>  若不是 Windows （由微软开发的操作系统）抄袭 Mac 电脑的，很可能在个人电脑上都不会有这些了。如果我没有退学，那我就不会旁听这门书法课，个人电脑就不会像现在这样有神奇的字体排版了。当然在大学的时候，我还不可能把未来的点点滴滴串连起来，但是当我十年后回顾这一切的时候，一切都清晰了。</details><p>  Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><details><summary>译文</summary>  再次说明下，你不可能将未来的片断串连起来；你只能在回顾的时候将点点滴滴串连起来。所以你必须相信这些片断会以某种方式在未来的某一天串连起来。你必须要相信某些东西：你的勇气、命运、生命、因缘，诸如此类。这种方法从来没有令我失望，只是让我的生命更加地与众不同。</details><h2 id="My-second-story-is-about-love-and-loss"><a href="#My-second-story-is-about-love-and-loss" class="headerlink" title="My second story is about love and loss."></a>My second story is about love and loss.</h2><details><summary>译文</summary>我的第二个故事是关于爱和失去。</details><p>  I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><details><summary>译文</summary>  我非常幸运，因为我在很早的时候就找到了我爱做的事情。在我二十岁的时候，我和沃兹就在我父母的车库里面创立了苹果公司。我们很努力工作，十年之后，苹果就从我们两个人窝在车库里发展到了拥有超过四千名的雇员、价值超过十亿美金的大公司。而在那之前一年，我们发布了我们最精美的产品，那就是 Macintosh ，而我也刚过了三十岁了。</details><p>  And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><details><summary>译文</summary>  然后，我被炒了鱿鱼。你怎么可能被你自己创立的公司炒鱿鱼呢? 是这样地，在苹果快速成长的时候，我们雇用了一个我认为很有天分的家伙和我一起管理这个公司，在第一年，公司运转的很好。但是后来我们对未来的愿景发生了分歧，最终我们大吵一通。当我们争吵的不可开交时，董事会站在了他那边。所以在三十岁的时候，我出局了。而且满城皆知。我成年后生命中的重心消失了，这对我来说真的是毁灭性的。</details><p>  I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><details><summary>译文</summary>  在最初的几个月里，我真的不知道该做些什么。我感到我让从前的创业家失望了，我把传到我手里的接力棒整到了地上。我和 David Pack 和 Bob Boyce 见面，并试图为自己的搞砸了而向他们道歉。</details><p>  I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><details><summary>译文</summary>  在公众眼里，我非常地失败，我甚至想着从硅谷跑掉。但是有些事情开始慢慢地照亮我，我仍然喜爱我从事的事情。在苹果公司发生的转折没有改变它，一点也没有。我被拒绝了，但是我仍然热爱它。所以我决定从头再来。</details><p>  I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><details><summary>译文</summary>  我当时没有意识到，但是事后证明，曾被苹果公司炒鱿鱼是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感被作为一个创业者的轻松感所代替：对任何事情都不再那么确信。这让我觉得如此自由，让我得以进入我生命中最有创造力的一个阶段。</details><p>  During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><details><summary>译文</summary>  在接下来的五年里，我创立了一个名叫 NeXT 的公司，还有一个叫 Pixar 的公司，并和一位了不起的女士相爱，她后来成为我的妻子。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”，Pixar 现在也是世界上最成功的电脑制作工作室。</details><p>  In a remarkable turn of events, Apple bought NeXT, I retuned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><details><summary>译文</summary>  在后来的一系列运转中，Apple 收购了 NeXT，然后我回到了 Apple 公司。我们在 NeXT 发展的技术在 Apple 现在的复兴之中发挥了关键的作用。我和 Laurence 一起建立了一个幸福的家庭。</details><p>  I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love.</p><details><summary>译文</summary>  我可以非常肯定，如果我不被 Apple 开除，这其中任何一件事情都不会发生。这件事本身是一味非常苦的药，但是我猜病人需要它。有些时候，生活会拿起一块砖头猛拍向你的脑袋。不要失去信心。我很清楚唯一使我一直走下去的，就是我无比钟爱我做的事情。你得去找到你所爱的东西。</details><p>  And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><details><summary>译文</summary>  对于工作是如此，对于你的爱人亦然。你的工作将会占据生活中很大的一部分。让自己真正满意的唯一方式就是做你认为的伟大的工作，成就伟大的唯一方法就是热爱你所做之事。如果你还没有找到，那么就继续寻找，不要安于现状，就像所有的心事一样，当你找到的时候你就会知道的。就像任何一段完满的感情，随着岁月的流逝它只会越来越好。所以请继续寻找，（在找到之前）不要安于现状。</details><h2 id="My-third-story-is-about-death"><a href="#My-third-story-is-about-death" class="headerlink" title="My third story is about death."></a>My third story is about death.</h2><details><summary>译文</summary>我的第三个故事是关于死亡的。</details><p>  When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><details><summary>译文</summary>  我十七岁时，读到了一段引述，大致如下：“如果你把每一天都当作生命中最后一天去生活，那么有一天，你会非常确定你是正确的。”这句话给我留下了深刻的印象。从那时开始，往后的 33 年里，我在每天早晨都会对着镜子问自己：“如果今天是我生命中的最后一天，你会不会完成你今天将要做的事情呢?”当连续很多天答案都是“否”的时候，我就知道自己需要改变一些事情了。</details><p>  Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><details><summary>译文</summary>  “记住我终将死去”是我一生中遇到的最重要的箴言，它帮我做出了生命中重要的选择。因为几乎所有的事情，包括所有外部的期待，所有的荣耀，所有的尴尬或失败，这些在死亡面前都会消失。留下的只有真正重要的。你有时候会思考你将会失去某些东西，“记住你终将死去”是我知道的避免患得患失的最好方法。一个人赤裸裸的来，赤裸裸的去，没有理由不去追随本心。</details><p>  About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><details><summary>译文</summary>  大概一年前，我被诊断得了癌症。我在早晨七点半做了一个扫描，清楚地显示在我的胰腺长了一个肿瘤。我当时甚至都不知道胰腺是什么。医生告诉我那很可能是一种无法治愈的癌症，我还有三到六个月的时间。我的医生建议我回家，然后整理好我的一切，这是医生的暗号，意思是让我准备好赴死了。意味着你要把未来十年对你小孩说的话在几个月里面说完，那意味着把每件事情都搞定，让你的家人会尽可能轻松的生活，那意味着你要说“再见了”。</details><p>  I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><details><summary>译文</summary>  那张诊断书伴随了我一整天。那天晚上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去，通过我的胃，然后进入我的肠子，用一根针在我胰腺上的肿瘤上取了几个细胞。我当时服了镇定剂，不过我的妻子在那里，她后来告诉我，当医生在显微镜下观察这些细胞的时候他们开始尖叫，因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术，现在我痊愈了。</details><p>  This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><details><summary>译文</summary>  那是我最接近死亡的时候，我希望这也是以后的几十年最接近的一次。死亡对我来说，曾经只是一个有用但是纯粹是知识上的概念，经历过这次的生死考验，我现在可以更肯定一点地对你们说，</details><p>  No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><details><summary>译文</summary>  没有人想要死，即使是想要上天堂的人，也不会为了上天堂而死。然而死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的发明。它是生命的变革者。它除旧迎新。你们现在是新的，但是从现在开始的不久以后，你们将会逐渐的变成旧的然后被清除。我很抱歉说的这么戏剧性，但是这十分的真实。</details><p>  Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><details><summary>译文</summary>  你们的时间是有限的，所以不要浪费时间在重复别人的人生上。不要被教条所困，因为教条是别人的人生经验。不要让别人的意见淹没掉你自己内心的声音。最重要的是，要有勇气追随你自己的本心和直觉。他们已经知道你真正想成为什么样的人。其他事情都是次要的。</details><p>  When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notion。</p><details><summary>译文</summary>  当我还年轻的时候，有一个非常令人震惊的杂志，就是《全球概览》，是我们那一代人的“圣经”之一。这是由 Stewart Brand 创建的，他就住在离这里不远的门洛帕克。他用他诗意的笔触把杂志写活了。那是在 20 世纪 60 年代末，还没有个人电脑和桌面出版，所以它都是用打字机、剪刀和宝丽来相机制作的。这有点像平装本的 Google 搜索，但是出现在 Google 诞生的35年之前，它很理想主义，充斥着整洁的工具和伟大的理念。</details><p>  Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><details><summary>译文</summary>  Stewart Brand 和他的团队出了好几期的《全球概览》，然后当杂志完成了自己的使命之后，他们又推出了停刊前的最后一期。那是在 20 世纪 70 年代中期，我当时像你们这么大。在他们最后一期的封底，是一张清晨乡间公路的照片，如果你有冒险精神的话，你可能会在这里搭别人的便车。在图下面是这句话：“求知若饥，虚心若愚”。这是他们停刊时的告别语。求知若饥，虚心若愚。我一直都希望自己能做到这一点。而现在，当你们毕业了，重新开始新的生活时，我希望你们也能如此。</details><p><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/dots/dots_stay_hungry_stay_foolish/dots_stay_hungry_stay_foolish_2.jpg"></p></details><p>  Stay Hungry,Stay Foolish.<br>  求知若饥，虚心若愚。<br>  Thank you all very much.<br>  非常感谢大家</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Steve Jobs</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>404 Not Found：该页无法显示</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[         <script type="text/javascript" src="//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js" homepagename="返回首页" homepageurl="https://www.nickyam.com"></script>true]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>关于</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[<hr><p>  学习不是一种鞭策，不是只热衷于专业，而是一种人生态度，是一种对生活的认真，对未来的负责。</p><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><div class="note note-danger">            <p>这里归档的信息基于网络整理</p>          </div><div class="note note-danger">            <p>因不可抗拒因素，评论区不开放。</p>          </div><div class="note note-success">            <p>这里存档的信息会不断地更新、校对。</p>          </div><div class="note note-success">            <p>初衷是让读者能从中受益</p>          </div><div class="note note-success">            <p>风格：简洁 优雅 高效 连续</p>          </div><p><img src="/blog/img/about/about.png"></p><h2 class="Time-Container">Time - Container</h2><div class="note note-success">            <p>Question：Time - Container ？</p>          </div><div class="note note-success">            <p>Answer：Time 和 Container 拼接，意为时间容器。</p>          </div><div class="note note-success">            <p>Question：Time - Container 的用途 ？ </p>          </div><div class="note note-success">            <p>Answer：码字人选择性的在这里存放了一些内容。</p>          </div><div class="note note-success">            <p>Question：Time - Container 的风格 ？ </p>          </div><div class="note note-success">            <p>Answer： 保持简单，保持优雅，保持连续。</p>          </div><h2 id="版权问题"><a href="#版权问题" class="headerlink" title="版权问题"></a>版权问题</h2><div class="note note-danger">            <p>部分存档内容来源于网络，如有侵权，请联系作者删除。</p>          </div><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>  计算机呈现了一个基于真实世界的虚拟世界。计算机的发明让人们用 0 和 1 映射了自身存在的真实世界，它是人类有力的工具之一，它像是真实世界的一面镜子，把真实世界有选择的映射在计算机构建的虚拟世界里，之后，人们便可以透过虚拟的世界去控制真实的世界（当然，前提是拥有足够的权限）。<br>  计算机存档的万物的信息可以为万物生成“数字生命”。如果人们愿意，计算机可以完整的映射并存档这个星球的真实数据，这些数据是超体量的。万物不仅仅可以相互通信，他们存在的“痕迹”也可以被记录并存档，万物仿佛有了“长生不老”的本领，他们拥有了“数字生命”。这里举个例子，你祖父的父亲的一生被以数字的形式存档下来，也许你与他未曾谋面，但通过他的“数字生命”，你了解到他了，你可以知道他想让你知道的一切。你从他的生命历程中有了你的借鉴，而这可以为你的人生路提供参考。如果用在科学探索里，他可以为人们探索未知提供参考。<br>  信息具有力量，是一把双刃剑，需要被妥善使用。Google 的一个宣传视频里，曾经有这样一个片段，一个当地的农民发现自己的农作物经常由于害虫侵害而产量低下，通过 Google 他搜索到了一些解决的办法并更好的解决了这一问题。这让人意识到，信息能赋予人力量，只要有一份说明书式的操作文档，人们就可以自主的思考并更好的解决问题。而搭建一个博客，人们就可以把经验、专业知识这些信息归档并存储以便在需要时使用、分享给遇到同样问题的人使用。如果每一个人都参与进来，分享有质量的信息，这将使每一个使用的人从中受益。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><img src="/blog/img/about/about_next.webp"></p><p>  工作后人际关系更加复杂，喧嚣的社交网络已经不再适合谈及生活与思想，只有自己开辟一片净土，在此延续另一种形态的社交。<br>  如果你在浏览的过程中发现了任何问题（如错别字、链接无效、图片无法显示等），欢迎电邮码字人。</p><p>  <b>脚踏实地，稳步成长</b>。</p><hr>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>微语</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[<div align="center">  <h2>留给自己</h2></div><br><!-- 引用 artitalk --><script type="text/javascript" src="https://unpkg.com/artitalk"></script><!-- 自定义样式 --><style>        .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel {          background: linear-gradient(45deg, rgb(109, 208, 242) 15%, rgb(245, 154, 190) 85%);          color: white;        }        .cbp_tmtimeline>li:nth-child(odd) .cbp_tmlabel:after {          border-right-color:  rgb(109, 208, 242)        }        .cbp_tmtimeline>li .cbp_tmlabel {          background: linear-gradient(45deg, rgb(109, 208, 242) 15%, rgb(245, 154, 190) 85%);          color: white;        }        .cbp_tmtimeline>li .cbp_tmlabel:after {          border-right-color:  rgb(109, 208, 242)        }        .button {          background: linear-gradient(45deg, rgb(109, 208, 242) 15%, rgb(245, 154, 190) 85%);          color: white;        }      </style><!-- 自定义样式.end --><!-- 存放说说的容器 --><div id="artitalk_main"></div>        <script>                new Artitalk({                        appId: 'rcbAWes3jOnXFLCgl37Kb8Y6-MdYXbMMI', // Your LeanCloud appId                        appKey: 'CyyJy3Xf6dUGnBeuMzzPPYdx', // Your LeanCloud appKey                        per: '7', //每页显示说说的数量                        username: 'ios_user', //Leancloud中设置的用户名                        avatarPla: "https://static-images-1253741713.cos.ap-beijing.myqcloud.com/rabbit900.webp",                        placeholder1: '只有博主才能评论哦',                        placeholder2: '没有密码，不能评论！',                        bgImg: "https://gitee.com/cungudafa/source/raw/master/img/gif/Sitich/Sitich16.gif" ,                        atEmoji: {                                        baiyan: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/baiyan.png",                                        bishi: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bishi.png",                                        bizui: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bizui.png",                                        chan: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/chan.png",                                        daku: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/daku.png",                                        dalao: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalao.png",                                        dalian: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalian.png",                                        dianzan: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dianzan.png",                                        doge: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/doge.png",                                        facai: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/facai.png",                                        fadai: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fadai.png",                                        fanu: "https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fanu.png",                                }                                })        </script>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>书单</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[<div align="center">    <h2>Book List</h2></div><div class="note note-success">            <p>这里推荐了一些书籍。</p>          </div><h5 id="01-《平凡的世界》"><a href="#01-《平凡的世界》" class="headerlink" title="01 《平凡的世界》"></a>01 《平凡的世界》</h5><details><summary>查看</summary><br><p><strong>内容简介</strong><br>  《平凡的世界(套装共3册)》是一部现实主义小说，也是小说化的家族史。作家高度浓缩了中国西北农村的历史变迁过程，作品达到了思想性与艺术性的高度统一，特别是主人公面对困境艰苦奋斗的精神，对今天的大学生朋友仍有启迪。这是一部全景式地表现中国当代城乡社会生活的长篇小说。《平凡的世界(套装共3册)》共三部。作者在近十年间广阔背景上，通过复杂的矛盾纠葛，刻画了社会各阶层众多普通人的形象。劳动与爱情，挫折与追求，痛苦与欢乐，日常生活与巨大社会冲突，纷繁地交织在一起，深刻地展示了普通人在大时代历史进程中所走过的艰难曲折的道路。</p><p><strong>作者简介</strong><br>  路遥（1949-1992），原名王卫国，1949年12月3日生于陕西榆林市清涧县一个贫困的农民家庭，因家贫7岁即过继给延川县农村的伯父。曾在延川县立中学学习，1969年回乡务农。其间做过许多临时性工作，并在农村一小学教书一年。1973年进入延安大学中文系学习，开始文学创作。大学毕业后，任《陕西文艺》（今为《延河》）编辑。1980年发表《惊心动魄的一幕》，获第一届全国优秀中篇小说奖。1982年发表中篇小说《人生》，获第二届全国优秀中篇小说奖。1988年完成百万字长篇巨著《平凡的世界》，于1991年获茅盾文学奖。1992年11月17日上午8时20分，路遥因病医治无效在西安逝世，年仅42岁。</p></details><br><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/pages/book/01/01_01.jpg"></div><div class="group-image-wrap"><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/pages/book/01/01_03.jpg"></div><div class="group-image-wrap"><img src="https://static-images-1253741713.cos.ap-beijing.myqcloud.com/pages/book/01/01_02.jpg"></div></div></div><h5 id="02-《活着》"><a href="#02-《活着》" class="headerlink" title="02 《活着》"></a>02 《活着》</h5><details><summary>查看</summary><br><p><strong>内容简介</strong><br>  《活着》(新版）讲述了农村人福贵悲惨的人生遭遇。福贵本是个阔少爷，可他嗜赌如命，终于赌光了家业，一贫如洗。他的父亲被他活活气死，母亲则在穷困中患了重病，福贵前去求药，却在途中被国民党抓去当壮丁。经过几番波折回到家里，才知道母亲早已去世，妻子家珍含辛茹苦地养大两个儿女。此后更加悲惨的命运一次又一次降临到福贵身上，他的妻子、儿女和孙子相继死去，最后只剩福贵和一头老牛相依为命，但老人依旧活着，仿佛比往日更加洒脱与坚强。</p><p>  《活着》(新版）荣获意大利格林扎纳•卡佛文学奖最高奖项（1998年）、台湾《中国时报》10本好书奖（1994年）、香港“博益”15本好书奖（1994年）、第三届世界华文“冰心文学奖”（2002年），入选香港《亚洲周刊》评选的“20世纪中文小说百年百强”、中国百位批评家和文学编辑评选的“20世纪90年代最有影响的10部作品”。</p><p><strong>作者简介</strong><br>  余华，1960年出生，1983年开始写作。至今已经出版长篇小说4部，中短篇小说集6部，随笔集4部。主要作品有《兄弟》《活着》《许三观卖血记》《在细雨中呼喊》等。其作品已被翻译成20多种语言在美国、英国、法国、德国、意大利、西班牙、荷兰、瑞典、挪威、希腊、俄罗斯、保加利亚、匈牙利、捷克、塞尔维亚、斯洛伐克、波兰、巴西、以色列、日本、韩国、越南、泰国和印度等国出版。曾获意大利格林扎纳·卡佛文学奖（1998年）、法国文学和艺术骑士勋章（2004年）、中华图书特殊贡献奖（2005年）、法国国际信使外国小说奖（2008年）等。</p></details><br>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>分类</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>音乐</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[<div align="center">    <h2>Music List</h2></div><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1494462209&amp;auto=0&amp;height=66"></iframe></span><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1811652294&amp;auto=0&amp;height=66"></iframe></span><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1826179038&amp;auto=0&amp;height=66"></iframe></span><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=480680&amp;auto=0&amp;height=66"></iframe></span><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=27876900&amp;auto=0&amp;height=66"></iframe></span><span align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=191248&amp;auto=0&amp;height=66"></iframe></span><div align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=101906&amp;auto=0&amp;height=66"></iframe></div><div align="center" style="max-height :100%; max-width: 100%; display: block;">    <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=431853688&amp;auto=0&amp;height=66"></iframe></div><!-- <button id="btn">            press</button><script>    top.addEventListener( "message",            function(e){                alert(e.data);            },false);</script><script>    document.getElementById("btn").onclick = function() {            //localhost:8020就是发送的url的源            //记住要写top.postMessage或者是parent.message，对于top和parent区别，google一大堆            //千万不要写window.postMessage        top.postMessage("hello", "http://localhost:4000");    }</script> -->]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[const fs = require('fs-extra');const path = require('path');const imageSize = require('image-size');const rootPath="photos/"class PhotoExtension {    constructor() {        this.size = 64;        this.offset = [0, 0];    }}class Photo {    constructor() {        this.dirName = '';        this.fileName = '';        this.iconID = '';        this.extension = new PhotoExtension();    }}class PhotoGroup {    constructor() {        this.name = '';        this.children = [];    }}function createPlotIconsData() {    let allPlots = [];    let allPlotGroups = [];    const plotJsonFile = path.join(__dirname, './photosInfo.json');    const plotGroupJsonFile = path.join(__dirname, './photos.json');    if (fs.existsSync(plotJsonFile)) {        allPlots = JSON.parse(fs.readFileSync(plotJsonFile));    }    if (fs.existsSync(plotGroupJsonFile)) {        allPlotGroups = JSON.parse(fs.readFileSync(plotGroupJsonFile));    }    fs.readdirSync(__dirname).forEach(function(dirName) {        const stats = fs.statSync(path.join(__dirname, dirName));        const isDir = stats.isDirectory();        if (isDir) {            const subfiles = fs.readdirSync(path.join(__dirname, dirName));            subfiles.forEach(function(subfileName) {                // 如果已经存在 则不再处理                // if (allPlots.find(o =&gt; o.fileName === subfileName &amp;&amp; o.dirName === dirName)) {                //     return;                // }                // 新增标                const plot = new Photo();                plot.dirName = dirName;                plot.fileName = subfileName;                const imageInfo = imageSize(rootPath+dirName + "/" + subfileName);                plot.iconID = imageInfo.width + '.' + imageInfo.height + ' ' + subfileName;                allPlots.push(plot);                console.log(`RD: createPlotIconsData -&gt; new plot`, plot);                // 为新增标添加分组 暂时以它所处的文件夹为分组                let group = allPlotGroups.find(o =&gt; o.name === dirName);                if (!group) {                    group = new PhotoGroup();                    group.name = dirName;                    allPlotGroups.push(group);                    console.log(`RD: createPlotIconsData -&gt; new group`, group);                }                group.children.push(plot.iconID);            });        }    });    fs.writeJSONSync(plotJsonFile, allPlots);    fs.writeJSONSync(plotGroupJsonFile, allPlotGroups);}createPlotIconsData();]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>相册</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[[{"name":"A组","children":["959.959 IMG_0018.JPG","957.957 IMG_0071.JPG","750.750 IMG_0073.JPG","440.440 IMG_0096.JPG","240.240 IMG_0097.PNG","960.960 IMG_0169.JPG","526.688 IMG_0201.JPG","500.375 IMG_0203.JPG","720.719 IMG_0268.JPG","640.640 IMG_0302.JPG","1080.1640 IMG_0318.JPG","290.290 IMG_0319.JPG","959.959 IMG_0405.JPG","1080.1406 IMG_0437.JPG","600.600 IMG_0484.JPG","300.300 IMG_0485.GIF","959.959 IMG_0508.JPG","640.552 IMG_0511.JPG","304.212 IMG_0527.JPG","200.200 IMG_0529.GIF","277.581 IMG_0628.PNG","744.744 IMG_0631.JPG","400.400 IMG_0884.JPG","440.460 IMG_0959.JPG","1080.1440 IMG_1060.JPG","700.656 IMG_1061.JPG","240.240 IMG_1196.JPG","750.495 IMG_1255.JPG","440.782 IMG_1257.JPG","828.1103 IMG_1258.JPG","828.1103 IMG_1259.JPG","640.562 IMG_1260.JPG","600.600 IMG_1413.JPG","342.400 IMG_1414.JPG","398.312 IMG_1415.JPG","257.253 IMG_1511.JPG","958.958 IMG_1638.JPG","800.800 IMG_1686.JPG","640.640 IMG_1729.JPG","640.640 IMG_1793.JPG","400.400 IMG_2009.JPG","542.542 IMG_2014.JPG","636.742 IMG_2148.JPG","1080.1037 IMG_2175.JPG","500.500 IMG_2231.JPG","651.651 IMG_2232.JPG","640.640 IMG_2234.JPG","824.824 IMG_2241.JPG","1080.1594 IMG_2312.JPG","516.516 IMG_2313.JPG","494.500 IMG_2323.JPG","2048.1359 IMG_2364.JPG","2048.1136 IMG_2365.JPG","240.240 IMG_2432.JPG","750.735 IMG_2463.JPG","400.382 IMG_2464.GIF","800.800 IMG_2501.JPG","240.240 IMG_2505.JPG","496.798 IMG_2520.JPG","378.212 IMG_2527.JPG","318.179 IMG_2529.JPG","800.606 IMG_2537.JPG","1061.1004 IMG_2590.JPG","360.456 IMG_2660.JPG","1080.1046 IMG_2715.JPG","500.500 IMG_2729.JPG","959.959 IMG_2749.JPG","1000.1000 IMG_2753.JPG","106.106 IMG_2756.PNG"]},{"name":"B组","children":["1080.1920 IMG_0162.JPG","1024.540 IMG_0345.JPG","640.950 IMG_0379.JPG","1748.944 IMG_0441.JPG","1422.3072 IMG_0503.JPG","690.660 IMG_0506.JPG","800.800 IMG_0526.JPG","1022.864 IMG_0745.JPG","694.544 IMG_0751.JPG","1080.1084 IMG_0794.JPG","690.690 IMG_0992.JPG","600.505 IMG_1171.JPG","1080.1178 IMG_1172.JPG","690.728 IMG_1173.JPG","1080.1218 IMG_1249.JPG","1088.938 IMG_1460.JPG","960.960 IMG_1532.JPG","440.440 IMG_1584.JPG","1080.1080 IMG_1735.JPG","1080.1920 IMG_1748.JPG","739.309 IMG_1801.JPG","640.640 IMG_1810.JPG","1080.992 IMG_1878.JPG","670.796 IMG_1968.JPG","1080.1620 IMG_2028.JPG","1080.1080 IMG_2079.JPG","690.690 IMG_2197.JPG","700.1517 IMG_2245.JPG","860.292 IMG_2249.JPG","942.987 IMG_2267.JPG","1000.1000 IMG_2289.JPG","1080.1764 IMG_2317.JPG","440.420 IMG_2321.JPG","690.690 IMG_2340.JPG","1080.1080 IMG_2414.JPG","1079.1336 IMG_2428.JPG","1000.1000 IMG_2479.JPG","915.1024 IMG_2493.JPG","453.734 IMG_2579.JPG","1000.563 IMG_2591.JPG","1000.1000 IMG_2601.JPG","828.998 IMG_2614.JPG","711.343 IMG_2640.JPG","1080.1920 IMG_2643.JPG","600.387 IMG_2662.JPG","526.526 IMG_2718.JPG"]},{"name":"C组","children":["1920.1080 IMG_0023.JPG","908.1920 IMG_0061.JPG","1080.1440 IMG_0253.JPG","1080.1080 IMG_0303.JPG","959.959 IMG_0431.JPG","312.208 IMG_0942.JPG","1080.1314 IMG_0952.JPG","2000.1124 IMG_1193.JPG","1080.1030 IMG_1425.JPG","1440.1080 IMG_1794.JPG","1080.1349 IMG_2133.JPG","1080.746 IMG_2476.JPG","1024.1280 IMG_2656.JPG"]},{"name":"D组","children":["1920.1080 1.jpg","1600.900 10.jpg","600.800 1495c26c69338909b295e37cfe8e0eb7-big.jpg","1920.1280 2.jpg","1920.1080 20210219231949.png","760.570 24b0ba6ab10cda17b8683b710a5ed79a-big.jpg","1920.1080 3.jpg","760.570 378cbeaf584ed856121ccad985191175-big.jpg","1920.1280 4.jpg","600.800 4120ad64de02113de805a8b3925ce770-big.jpg","760.570 4fa7cb254e477f6a538bf2f82492047c-big.jpg","1280.869 5.jpg","1920.1247 6.jpg","1920.1280 7.jpg","760.570 744168a88f4068943c16cfb07df76007-big.jpg","1920.1080 8.jpg","760.570 8b393d6a702bb933c9efd0111081b515-big.jpg","1920.1080 9.jpg","760.570 9c789eef37184d5d5de78c0d6e5c83e5-big.jpg","760.570 a481f93bebf453bf5c97bb55c6dcbcb8-big.jpg","600.800 ba43ea9aabf4bc71039dbca88c575059-big.jpg","760.570 bffcb9a01fc49a60b1057d88d0b123d2-big.jpg","760.570 d472f01f0657401028719d7f9c3efa41-big.jpg","760.570 d656fb77c5ca6cee8d87ce37b643952d-big.jpg","760.570 ddda28f33a6626647146c1fa1372fd23-big.jpg","440.542 IMG_0057.PNG","960.585 IMG_0361.JPG","959.959 IMG_0411.JPG","450.800 IMG_0418.JPG","1440.3120 IMG_0464.JPG","1242.2208 IMG_0791.PNG","960.960 IMG_0910.JPG","480.640 IMG_1662.JPG","640.1138 IMG_1690.JPG","500.500 IMG_1845.JPG","1080.1080 IMG_2274.JPG","251.251 IMG_2342.JPG","600.1066 IMG_2389.JPG","959.959 IMG_2434.JPG","500.887 IMG_2458.JPG","941.941 IMG_2478.JPG","1080.1026 IMG_2484.JPG","941.936 IMG_2517.JPG","500.666 IMG_2521.JPG","100.100 IMG_2768.GIF"]}]]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>视频</title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[<div align="center">    <h2>Video List</h2></div><div class="note note-success">            <p>这里的信息采集于网络，作者有选择性的进行了过滤。</p>          </div><h5 id="01-《平凡的世界》电视剧片尾曲"><a href="#01-《平凡的世界》电视剧片尾曲" class="headerlink" title="01 《平凡的世界》电视剧片尾曲"></a>01 《平凡的世界》电视剧片尾曲</h5><p>  生活啊！什么是生活？生活就是有那么多的未知。我们无法去推测他们后来的人生是怎么样，十年，二十年 …… 起起落落又将是怎样一种景象？只是，让我们祝福他们吧，这群善良的人，和这片温暖的土地。长的是苦难，短的是人生。只要春天不死，生命就不会死，活着，就是那么的充满希望！</p><p>去围观 —&gt; <a href="https://music.163.com/video?id=EBEFB353EAC91003D76271B21E2E727D&amp;userid=1432097035">Go</a></p><h5 id="02-《相依为命》"><a href="#02-《相依为命》" class="headerlink" title="02 《相依为命》"></a>02 《相依为命》</h5><p>  年华像细水冲走几个爱人与知己。</p><p>去围观 —&gt; <a href="https://music.163.com/mv/?id=5643810&amp;userid=1432097035">Go</a></p><h5 id="03-《平凡之路》"><a href="#03-《平凡之路》" class="headerlink" title="03 《平凡之路》"></a>03 《平凡之路》</h5><p>  年年岁岁里的岁岁年年。</p><p>去围观 —&gt; <a href="https://music.163.com/mv/?id=290244&amp;userid=1432097035">Go</a></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/"/>
    <url>/blog/</url>
    
    <content type="html"><![CDATA[[{"dirName":"A组","fileName":"IMG_0018.JPG","iconID":"959.959 IMG_0018.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0071.JPG","iconID":"957.957 IMG_0071.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0073.JPG","iconID":"750.750 IMG_0073.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0096.JPG","iconID":"440.440 IMG_0096.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0097.PNG","iconID":"240.240 IMG_0097.PNG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0169.JPG","iconID":"960.960 IMG_0169.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0201.JPG","iconID":"526.688 IMG_0201.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0203.JPG","iconID":"500.375 IMG_0203.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0268.JPG","iconID":"720.719 IMG_0268.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0302.JPG","iconID":"640.640 IMG_0302.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0318.JPG","iconID":"1080.1640 IMG_0318.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0319.JPG","iconID":"290.290 IMG_0319.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0405.JPG","iconID":"959.959 IMG_0405.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0437.JPG","iconID":"1080.1406 IMG_0437.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0484.JPG","iconID":"600.600 IMG_0484.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0485.GIF","iconID":"300.300 IMG_0485.GIF","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0508.JPG","iconID":"959.959 IMG_0508.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0511.JPG","iconID":"640.552 IMG_0511.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0527.JPG","iconID":"304.212 IMG_0527.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0529.GIF","iconID":"200.200 IMG_0529.GIF","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0628.PNG","iconID":"277.581 IMG_0628.PNG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0631.JPG","iconID":"744.744 IMG_0631.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0884.JPG","iconID":"400.400 IMG_0884.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_0959.JPG","iconID":"440.460 IMG_0959.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1060.JPG","iconID":"1080.1440 IMG_1060.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1061.JPG","iconID":"700.656 IMG_1061.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1196.JPG","iconID":"240.240 IMG_1196.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1255.JPG","iconID":"750.495 IMG_1255.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1257.JPG","iconID":"440.782 IMG_1257.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1258.JPG","iconID":"828.1103 IMG_1258.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1259.JPG","iconID":"828.1103 IMG_1259.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1260.JPG","iconID":"640.562 IMG_1260.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1413.JPG","iconID":"600.600 IMG_1413.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1414.JPG","iconID":"342.400 IMG_1414.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1415.JPG","iconID":"398.312 IMG_1415.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1511.JPG","iconID":"257.253 IMG_1511.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1638.JPG","iconID":"958.958 IMG_1638.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1686.JPG","iconID":"800.800 IMG_1686.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1729.JPG","iconID":"640.640 IMG_1729.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_1793.JPG","iconID":"640.640 IMG_1793.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2009.JPG","iconID":"400.400 IMG_2009.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2014.JPG","iconID":"542.542 IMG_2014.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2148.JPG","iconID":"636.742 IMG_2148.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2175.JPG","iconID":"1080.1037 IMG_2175.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2231.JPG","iconID":"500.500 IMG_2231.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2232.JPG","iconID":"651.651 IMG_2232.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2234.JPG","iconID":"640.640 IMG_2234.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2241.JPG","iconID":"824.824 IMG_2241.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2312.JPG","iconID":"1080.1594 IMG_2312.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2313.JPG","iconID":"516.516 IMG_2313.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2323.JPG","iconID":"494.500 IMG_2323.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2364.JPG","iconID":"2048.1359 IMG_2364.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2365.JPG","iconID":"2048.1136 IMG_2365.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2432.JPG","iconID":"240.240 IMG_2432.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2463.JPG","iconID":"750.735 IMG_2463.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2464.GIF","iconID":"400.382 IMG_2464.GIF","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2501.JPG","iconID":"800.800 IMG_2501.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2505.JPG","iconID":"240.240 IMG_2505.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2520.JPG","iconID":"496.798 IMG_2520.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2527.JPG","iconID":"378.212 IMG_2527.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2529.JPG","iconID":"318.179 IMG_2529.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2537.JPG","iconID":"800.606 IMG_2537.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2590.JPG","iconID":"1061.1004 IMG_2590.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2660.JPG","iconID":"360.456 IMG_2660.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2715.JPG","iconID":"1080.1046 IMG_2715.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2729.JPG","iconID":"500.500 IMG_2729.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2749.JPG","iconID":"959.959 IMG_2749.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2753.JPG","iconID":"1000.1000 IMG_2753.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"A组","fileName":"IMG_2756.PNG","iconID":"106.106 IMG_2756.PNG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0162.JPG","iconID":"1080.1920 IMG_0162.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0345.JPG","iconID":"1024.540 IMG_0345.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0379.JPG","iconID":"640.950 IMG_0379.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0441.JPG","iconID":"1748.944 IMG_0441.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0503.JPG","iconID":"1422.3072 IMG_0503.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0506.JPG","iconID":"690.660 IMG_0506.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0526.JPG","iconID":"800.800 IMG_0526.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0745.JPG","iconID":"1022.864 IMG_0745.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0751.JPG","iconID":"694.544 IMG_0751.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0794.JPG","iconID":"1080.1084 IMG_0794.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_0992.JPG","iconID":"690.690 IMG_0992.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1171.JPG","iconID":"600.505 IMG_1171.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1172.JPG","iconID":"1080.1178 IMG_1172.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1173.JPG","iconID":"690.728 IMG_1173.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1249.JPG","iconID":"1080.1218 IMG_1249.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1460.JPG","iconID":"1088.938 IMG_1460.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1532.JPG","iconID":"960.960 IMG_1532.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1584.JPG","iconID":"440.440 IMG_1584.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1735.JPG","iconID":"1080.1080 IMG_1735.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1748.JPG","iconID":"1080.1920 IMG_1748.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1801.JPG","iconID":"739.309 IMG_1801.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1810.JPG","iconID":"640.640 IMG_1810.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1878.JPG","iconID":"1080.992 IMG_1878.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_1968.JPG","iconID":"670.796 IMG_1968.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2028.JPG","iconID":"1080.1620 IMG_2028.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2079.JPG","iconID":"1080.1080 IMG_2079.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2197.JPG","iconID":"690.690 IMG_2197.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2245.JPG","iconID":"700.1517 IMG_2245.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2249.JPG","iconID":"860.292 IMG_2249.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2267.JPG","iconID":"942.987 IMG_2267.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2289.JPG","iconID":"1000.1000 IMG_2289.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2317.JPG","iconID":"1080.1764 IMG_2317.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2321.JPG","iconID":"440.420 IMG_2321.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2340.JPG","iconID":"690.690 IMG_2340.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2414.JPG","iconID":"1080.1080 IMG_2414.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2428.JPG","iconID":"1079.1336 IMG_2428.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2479.JPG","iconID":"1000.1000 IMG_2479.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2493.JPG","iconID":"915.1024 IMG_2493.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2579.JPG","iconID":"453.734 IMG_2579.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2591.JPG","iconID":"1000.563 IMG_2591.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2601.JPG","iconID":"1000.1000 IMG_2601.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2614.JPG","iconID":"828.998 IMG_2614.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2640.JPG","iconID":"711.343 IMG_2640.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2643.JPG","iconID":"1080.1920 IMG_2643.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2662.JPG","iconID":"600.387 IMG_2662.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"B组","fileName":"IMG_2718.JPG","iconID":"526.526 IMG_2718.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0023.JPG","iconID":"1920.1080 IMG_0023.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0061.JPG","iconID":"908.1920 IMG_0061.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0253.JPG","iconID":"1080.1440 IMG_0253.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0303.JPG","iconID":"1080.1080 IMG_0303.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0431.JPG","iconID":"959.959 IMG_0431.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0942.JPG","iconID":"312.208 IMG_0942.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_0952.JPG","iconID":"1080.1314 IMG_0952.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_1193.JPG","iconID":"2000.1124 IMG_1193.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_1425.JPG","iconID":"1080.1030 IMG_1425.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_1794.JPG","iconID":"1440.1080 IMG_1794.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_2133.JPG","iconID":"1080.1349 IMG_2133.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_2476.JPG","iconID":"1080.746 IMG_2476.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"C组","fileName":"IMG_2656.JPG","iconID":"1024.1280 IMG_2656.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"1.jpg","iconID":"1920.1080 1.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"10.jpg","iconID":"1600.900 10.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"1495c26c69338909b295e37cfe8e0eb7-big.jpg","iconID":"600.800 1495c26c69338909b295e37cfe8e0eb7-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"2.jpg","iconID":"1920.1280 2.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"20210219231949.png","iconID":"1920.1080 20210219231949.png","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"24b0ba6ab10cda17b8683b710a5ed79a-big.jpg","iconID":"760.570 24b0ba6ab10cda17b8683b710a5ed79a-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"3.jpg","iconID":"1920.1080 3.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"378cbeaf584ed856121ccad985191175-big.jpg","iconID":"760.570 378cbeaf584ed856121ccad985191175-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"4.jpg","iconID":"1920.1280 4.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"4120ad64de02113de805a8b3925ce770-big.jpg","iconID":"600.800 4120ad64de02113de805a8b3925ce770-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"4fa7cb254e477f6a538bf2f82492047c-big.jpg","iconID":"760.570 4fa7cb254e477f6a538bf2f82492047c-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"5.jpg","iconID":"1280.869 5.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"6.jpg","iconID":"1920.1247 6.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"7.jpg","iconID":"1920.1280 7.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"744168a88f4068943c16cfb07df76007-big.jpg","iconID":"760.570 744168a88f4068943c16cfb07df76007-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"8.jpg","iconID":"1920.1080 8.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"8b393d6a702bb933c9efd0111081b515-big.jpg","iconID":"760.570 8b393d6a702bb933c9efd0111081b515-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"9.jpg","iconID":"1920.1080 9.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"9c789eef37184d5d5de78c0d6e5c83e5-big.jpg","iconID":"760.570 9c789eef37184d5d5de78c0d6e5c83e5-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"a481f93bebf453bf5c97bb55c6dcbcb8-big.jpg","iconID":"760.570 a481f93bebf453bf5c97bb55c6dcbcb8-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"ba43ea9aabf4bc71039dbca88c575059-big.jpg","iconID":"600.800 ba43ea9aabf4bc71039dbca88c575059-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"bffcb9a01fc49a60b1057d88d0b123d2-big.jpg","iconID":"760.570 bffcb9a01fc49a60b1057d88d0b123d2-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"d472f01f0657401028719d7f9c3efa41-big.jpg","iconID":"760.570 d472f01f0657401028719d7f9c3efa41-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"d656fb77c5ca6cee8d87ce37b643952d-big.jpg","iconID":"760.570 d656fb77c5ca6cee8d87ce37b643952d-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"ddda28f33a6626647146c1fa1372fd23-big.jpg","iconID":"760.570 ddda28f33a6626647146c1fa1372fd23-big.jpg","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0057.PNG","iconID":"440.542 IMG_0057.PNG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0361.JPG","iconID":"960.585 IMG_0361.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0411.JPG","iconID":"959.959 IMG_0411.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0418.JPG","iconID":"450.800 IMG_0418.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0464.JPG","iconID":"1440.3120 IMG_0464.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0791.PNG","iconID":"1242.2208 IMG_0791.PNG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_0910.JPG","iconID":"960.960 IMG_0910.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_1662.JPG","iconID":"480.640 IMG_1662.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_1690.JPG","iconID":"640.1138 IMG_1690.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_1845.JPG","iconID":"500.500 IMG_1845.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2274.JPG","iconID":"1080.1080 IMG_2274.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2342.JPG","iconID":"251.251 IMG_2342.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2389.JPG","iconID":"600.1066 IMG_2389.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2434.JPG","iconID":"959.959 IMG_2434.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2458.JPG","iconID":"500.887 IMG_2458.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2478.JPG","iconID":"941.941 IMG_2478.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2484.JPG","iconID":"1080.1026 IMG_2484.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2517.JPG","iconID":"941.936 IMG_2517.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2521.JPG","iconID":"500.666 IMG_2521.JPG","extension":{"size":64,"offset":[0,0]}},{"dirName":"D组","fileName":"IMG_2768.GIF","iconID":"100.100 IMG_2768.GIF","extension":{"size":64,"offset":[0,0]}}]]]></content>
    
  </entry>
  
  
  
</search>
