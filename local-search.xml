<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式与集群</title>
    <link href="/blog/dots_Distributed_and_clustered/"/>
    <url>/blog/dots_Distributed_and_clustered/</url>
    
    <content type="html"><![CDATA[<h2 id="01-分布式"><a href="#01-分布式" class="headerlink" title="01 分布式"></a>01 分布式</h2><p>小明的公司有3个系统： 系统A、系统B和系统C ，这三个系统所做的业务不同，被部署在3个独立的机器上运行， 他们之间互相调用（当然是跨域网络的）， 通力合作完成公司的业务流程。</p><p><img src="/blog/img/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_1.jpg"></p><p>将不同的业务分布在不同的地方， 这就构成了一个<b>分布式</b>的系统，现在问题来了， 系统A是整个分布式系统的“脸面”， 用户直接访问，用户量访问大的时候要么是速度巨慢，要么直接挂掉， 怎么办？ </p><p>由于系统A只有一份， 所以会引起<b>单点失败</b>。</p><h2 id="02-集群（Cluster）"><a href="#02-集群（Cluster）" class="headerlink" title="02 集群（Cluster）"></a>02 集群（Cluster）</h2><p>小明的公司不差钱，就多买几台机器吧， 小明把系统A一下子部署了好几份（例如下图的3个服务器），<b>每一份都是系统A的一个实例， 对外提供同样的服务，</b>这样能睡个安稳觉了，即使其中一个坏掉了，我还有另外2个呢。  </p><p>这3个服务器上的系统就组成了一个<b>集群</b>。</p><p><img src="/blog/img/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_2.png"></p><p>可是对用户来说，一下子出现这么系统A ，每个系统的IP地址都不一样，  到底访问哪一个？ </p><p>如果所有人都访问服务器1.1 ，那服务器1.1 会被累死， 剩下的两个闲死，成了浪费钱的摆设。</p><h2 id="03-负载均衡（Load-Balancer）"><a href="#03-负载均衡（Load-Balancer）" class="headerlink" title="03 负载均衡（Load Balancer）"></a>03 负载均衡（Load Balancer）</h2><p>小明要尽可能的让3个机器上的系统A 工作均衡一些， 比如有3万个请求，那就让3个服务器各处理1万个（当然，这是理想状况）， 这叫<b>负载均衡</b>。  </p><p>很明显，这个<b>负载均衡</b>的工作最好独立出来， 放到独立的服务器上 （例如Ngnix）：</p><p><img src="/blog/img/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_3_1.png"></p><p>后来小明发现， 这个负载均衡的服务器虽然工作内容很简单，就是拿到请求，分发请求，但是它还是有可能挂掉啊， <b>单点失败</b>还是会出现。</p><p>没办法，只好把负载均衡也搞成一个集群， 不过和系统A的集群有两点不同：</p><ol><li>这个新的集群中虽然有两个机器，但我们可以用某种办法，让这个集群对外只提供一个IP地址， 也就是说<b>用户看到的好像只有一个机器。</b></li><li><b>同一时刻，我们只让一个负载均衡的机器工作， 另外一个原地待命。</b> 如果工作的那个挂掉了，待命的那个就顶上去。</li></ol><p><img src="/blog/img/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_3_2.jpg"></p><h2 id="04-弹性"><a href="#04-弹性" class="headerlink" title="04 弹性"></a>04 弹性</h2><p>如果这3个系统A的实例还是满足不了大量的请求，那就再加服务器！ </p><p>双11来了，用户量是平时的10倍， 小明向领导申请费用又买了几十台服务器，一下子把系统A部署了几十份。  可是双11过后， 流量一下子降下来了，那几十个服务器用不上了，也变成了摆设！</p><p>被领导批评以后，小明决定尝试一下云计算，  在云端可以轻松的创建、删除虚拟的服务器， 那样就可以轻松地随着用户的请求动态的增减服务器了。  双11来了就创建虚拟服务器，等到双11过去了就把不用的关掉， 省得浪费钱。 </p><p>于是小明的系统具备了一定的<b>弹性</b>。</p><h2 id="05-失效转移"><a href="#05-失效转移" class="headerlink" title="05 失效转移"></a>05 失效转移</h2><p>上面的系统看起来很美好，但是做了一个不切实际的假设： 所有的服务都是无状态的。 换句话说，假设用户的两次请求直接是没有关联的。</p><p>但是现实是，大部分服务都是有状态的， 例如购物车。</p><p>用户访问系统，在服务器1.1上创建了一个购物车，并向其中加入了几个商品， 然后 服务器1.1 挂掉了， 用户的后续访问就找不到服务器1.1了，这时候就要做<b>失效转移</b>，让另外几个服务器去接管、去处理用户的请求。</p><p>可是问题来了，在服务器1.2，1.3上有用户的购物车吗？  如果没有， 用户就会抱怨，我刚创建的购物车哪里去了？</p><p>还有更严重的，假设用户是在服务器1.1上登录的， 用户登录过的信息保存到了该服务器的 session 中， 现在这个服务器挂掉了， 用户的 session 自然也不见了，当用户被失效转移到其他服务器上的时候，其他服务器发现用户没有登录， 就把用户踢到了登录界面， 让用户再次登录！</p><p>状态， 状态，状态！ 用户的登录信息，购物车等都是状态信息，  处理不好状态的问题，集群的威力就大打折扣，无法完成真正的失效转移， 甚至无法使用。</p><p>怎么办？  </p><p>一种办法是把状态信息在集群的各个服务器之间复制，让集群的各个服务器达成一致，  谁来干这个事情？ 只能是像 Websphere, Weblogic 这样的应用服务器了。 </p><p>还有一种办法， 就是把状态信息集中存储在一个地方， 让集群的各个服务器都能访问到：</p><p><img src="/blog/img/dots/dots_Distributed_and_clustered/dots_Distributed_and_clustered_5.jpg"></p><p>小明听说 Redis 不错， 那就用 Redis 来保存吧 ！</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dots</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 系统与 ios 系统文件传输方案</title>
    <link href="/blog/dots_windows_ios_file_transmission/"/>
    <url>/blog/dots_windows_ios_file_transmission/</url>
    
    <content type="html"><![CDATA[<h2 id="01-告别微信QQ传文件"><a href="#01-告别微信QQ传文件" class="headerlink" title="01 告别微信QQ传文件"></a>01 告别微信QQ传文件</h2><p>&emsp;&emsp;过去在手机电脑之间互传文件，通常的做法是用 qq 传输到我的电脑或我的手机，或者是微信的文件传输助手（发送的文件大小不能大于 100 M），这样不仅麻烦，而且需要打开 app 传输，速度受限于网速，最不能忍的是限制传送文件大小。<br>&emsp;&emsp;为了避免上面的各种问题，这里推荐一种新的方案，就是 smb 协议，Windows 的网上邻居，其实就使用到了这个协议，通过这个传输协议，你可以把你的手机作为电脑的”网上邻居”，从而实现文件夹的共享。</p><div class="note note-warning">            <p>注意：此方法要求你的 iOS 设备和电脑在同一局域网（同一Wi-Fi），且文件传输速度取决于路由器性能。（即使路由器未连接互联网也可以进行文件传输）</p>          </div><h2 id="02-开始配置"><a href="#02-开始配置" class="headerlink" title="02 开始配置"></a>02 开始配置</h2><h3 id="第一步-启用-Windows-的-SMB-共享功能"><a href="#第一步-启用-Windows-的-SMB-共享功能" class="headerlink" title="第一步 启用 Windows 的 SMB 共享功能"></a>第一步 启用 Windows 的 SMB 共享功能</h3><blockquote><p>打开控制面板→程序→程序与功能→启动或关闭 Windows 功能→勾选 SMB 文件共享支持→点击确定</p></blockquote><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_1_1.png"></p><div class="note note-warning">            <p>注意：重新启动电脑才会生效</p>          </div><h3 id="第二步-在-Windows-系统下新建一个用户"><a href="#第二步-在-Windows-系统下新建一个用户" class="headerlink" title="第二步 在 Windows 系统下新建一个用户"></a>第二步 在 Windows 系统下新建一个用户</h3><blockquote><p>打开设置→账户→家庭和其它用户→将其他人添加到这台电脑</p></blockquote><ol><li><p>点击我没有这个人的登录信息<br><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_1.png"></p></li><li><p>点击添加一个没有 Mircosoft 账户的用户<br><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_2.png"></p></li><li><p>设置用户名和密码以及密保问题→点击下一步即可<br><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_2_3.png"></p></li></ol><div class="note note-success">            <p>至此，在 Windows 系统下新建一个用户完成。</p>          </div><h3 id="第三步-新建一个文件夹"><a href="#第三步-新建一个文件夹" class="headerlink" title="第三步 新建一个文件夹"></a>第三步 新建一个文件夹</h3><div class="note note-info">            <p>这个文件夹将作为 iOS 设备与 Windows 电脑之间的共享文件仓库</p>          </div><div class="note note-warning">            <p>注意：这个新建文件夹路径及名称均可自定义，例如，你可以将它新建在 E 盘根目录下并命名为ios_repo。</p>          </div><h3 id="第四步-对这个新建文件夹开启共享"><a href="#第四步-对这个新建文件夹开启共享" class="headerlink" title="第四步 对这个新建文件夹开启共享"></a>第四步 对这个新建文件夹开启共享</h3><blockquote><p>① 右键文件夹→属性→共享→共享（网络文件和文件夹共享）</p></blockquote><ol><li><p>添加共享账户（例如这里输入 ios_user 点击添加）<br><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_1.png"></p></li><li><p>将权限设置为写入/读取→点击共享→点击完成<br><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_2.png"></p></li></ol><blockquote><p>② 点击高级共享→勾选共享文件夹</p></blockquote><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_3.png"></p><ol><li>点击权限→添加→输入用户名（ios_user）→检查名称→确定</li></ol><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_4.png"></p><ol start="2"><li>设置权限：勾选完全控制→点击应用→确定</li></ol><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_2_4_5.png"></p><div class="note note-warning">            <p>注意：记得点击→应用→确定→关闭。到此配置已经完成。</p>          </div><h2 id="03-查看本机的-IPv4-地址"><a href="#03-查看本机的-IPv4-地址" class="headerlink" title="03 查看本机的 IPv4 地址"></a>03 查看本机的 IPv4 地址</h2><blockquote><p>左击任务栏的网络图标→左击属性→滚动滑轮到底部→查看 IPv4 地址即可。</p></blockquote><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_3_1_1.png"></p><div class="note note-warning">            <p>请记住 IPv4 地址，接下来要用到。</p>          </div><h2 id="04-通过-IPv4-地址来访问电脑"><a href="#04-通过-IPv4-地址来访问电脑" class="headerlink" title="04 通过 IPv4 地址来访问电脑"></a>04 通过 IPv4 地址来访问电脑</h2><p><a id="demo"></a></p><div class="note note-info">            <p>接下来是 iOS 端的配置（在 iPhone 或 iPad 上配置）</p>          </div><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_1.png"></p><blockquote><p>打开“文件”应用→点击右上角 ··· →点击连接服务器→在窗口中输入 smb://刚刚查看的 IPv4 地址→点击连接</p></blockquote><div class="note note-info">            <p>例如输入 smb://192.168.0.101 （这是我的 IPv4 地址，换成你的👀）</p>          </div><blockquote><p>点击注册用户→填写你刚刚在 windows 新建的用户名和密码→点击下一步</p></blockquote><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_2.png"></p><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_3.png"></p><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_4_1_4.png"></p><div class="note note-success">            <p>大功告成，这个用于共享的仓库就建立完成了，你已经可以在 iOS 端看到共享文件夹，随意传输文件吧😉</p>          </div><h2 id="05-开始使用"><a href="#05-开始使用" class="headerlink" title="05 开始使用"></a>05 开始使用</h2><div class="note note-success">            <p>配置完成后，电脑向手机传输文件只需简单地将文件复制或移动到这个共享文件夹即可。</p>          </div><div class="note note-success">            <p>手机端向电脑传输文件：打开照片应用→选择一个照片/视频→点击分享按钮→存储到“文件”→点击你创建的文件夹（ios_repo）→点击存储。</p>          </div><p><img src="/blog/img/dots/dots_windows_ios_file_transmission/dots_windows_ios_file_transmission_5_2_1.jpg"></p><div class="note note-warning">            <p>当存储位置列表为空时，说明服务器连接已经中断，需要在手机端重新进入已共享服务器下的共享文件夹。</p>          </div><div class="note note-danger">            <p>当电脑重新启动时，路由器的 DHCP 服务器会重新分配 IPv4 地址给电脑，当分配的 IPv4 地址与之前不一致时，需要重复 <a href="#demo">[04 通过 IPv4 地址来访问电脑]</a>这一步输入新的服务器地址（ smb://新的 IPv4 地址）。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dots</tag>
      
      <tag>Windows</tag>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stay Hungry，Stay Foolish.</title>
    <link href="/blog/dots_stay_hungry_stay_foolish/"/>
    <url>/blog/dots_stay_hungry_stay_foolish/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>史蒂夫 <b>·</b> 乔布斯 2005 年在斯坦福大学的演讲</p>          </div><hr><p><img src="/blog/img/dots/dots_stay_hungry_stay_foolish/dots_stay_hungry_stay_foolish_1.jpg"></p><p>&emsp;&emsp;I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><details><summary>译文</summary>&emsp;&emsp;今天，我很荣幸能参加你们的毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学毕业。说老实话，今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。就讲这些，没什么大不了的，只讲三个故事。</details><h2 id="The-first-story-is-about-connecting-the-dots"><a href="#The-first-story-is-about-connecting-the-dots" class="headerlink" title="The first story is about connecting the dots."></a>The first story is about connecting the dots.</h2><details><summary>译文</summary><b>第一个故事是关于把点连成线。</b></details><p>&emsp;&emsp;I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out?</p><details><summary>译文</summary>&emsp;&emsp;我在里德学院读了六个月之后就退学了，但后来又以插班生的身份在那里待了 18 个月左右才真正退学。那么，我为什么会退学呢?</details><p>&emsp;&emsp;It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><details><summary>译文</summary>&emsp;&emsp;故事要从我出生前说起。我的生母当时是一个年轻的、尚未结婚的大学研究生，她决定让别人收养我。她十分想让我被有大学学历的人收养。所以一切都计划好了，我一出生就会被一位律师和他的妻子收养。但是当我被生下来的时候，他们在最后一刻决定，他们其实想要领养一个女孩。</details><p>&emsp;&emsp;So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would someday go to college.</p><details><summary>译文</summary>&emsp;&emsp;所以我的养父母（他们在候选名单上）突然在半夜接到了一个电话：“我们这儿现在有一个亲生父母无法抚养的男婴，你们想要他吗?”他们回答道：“当然要”，我的亲生母亲随后发现，我的养母从未在大学毕业，我的养父高中都没有毕业。她拒绝签署最终的收养文件。只是在几个月以后，我的养父母承诺会供我上大学，她才松口答应。</details><p>&emsp;&emsp;And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><details><summary>译文</summary>&emsp;&emsp;十七年之后，我真的上了大学。但我天真地选择了一所学费几乎和斯坦福大学一样昂贵的大学，我工薪阶层父母的所有积蓄都被我花在了大学学费上，而六个月后，我看不到其中的价值所在。我不知道自己这辈子想要做些什么，也不知道大学能怎样帮助我找到答案。</details><p>&emsp;&emsp;And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting.</p><details><summary>译文</summary>&emsp;&emsp;而我在这里几乎花光了我父母这一辈子的所有积蓄。所以我决定要退学，并且相信一切会有办法的。我当时确实非常的害怕，但是现在回头看看，那的确是我这一生中曾经做过的最棒的决定之一。在我退学的那一刻，我终于可以不必去读那些令我提不起丝毫兴趣的课程了，然后我还可以去修那些看起来有点意思的课程。</details><p>&emsp;&emsp;It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><details><summary>译文</summary>&emsp;&emsp;但是事实并不是那么浪漫。我没有了宿舍住，所以我只能睡在朋友房间的地板上，我去捡可乐瓶子，以五分一个的价格卖掉，这样我就可以有点钱买吃的，在每个星期天的晚上，我会走七英里的路程，到城市另一端的 Hare Krishna 寺庙(注：位于纽约 Brooklyn 下城)，可以吃上每星期唯一一顿饱饭。我当时乐在其中。我跟着我的直觉和好奇心走，遇到了很多东西，此后被证明是无价之宝。我来举个例子吧：</details><p>&emsp;&emsp;Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><details><summary>译文</summary>&emsp;&emsp;在那时，里德学院提供全美最好的美术字课程。在这个大学里，每张海报，每个抽屉的每个标签，全都是漂亮的手写美术字。因为我退学了，不用去上那些常规的课程，所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</details><p>&emsp;&emsp;I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><details><summary>译文</summary>&emsp;&emsp;我学到了衬线字体和无衬线字体，我学会了怎样在不同的字母组合之中改变空格的长度，还有怎样才能作出最棒的印刷样式。那是一种科学永远不能捕捉到的、美丽的、历史性的艺术精妙，我发现那实在是太美妙了。</details>&emsp;&emsp;None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.<details><summary>译文</summary>&emsp;&emsp;当时这些东西好像在我的生活中并没有实际应用的可能。但是十年之后，当我们在设计第一台 Macintosh 电脑的时候，它浮现在我的脑海里。我把当时我学的那些家伙全都设计进了 Mac。那是第一台使用了漂亮的印刷字体的电脑。如果我在大学里从没有学那门课，麦金塔电脑就不会有多种字体或者适当分隔的字体。</details><p>&emsp;&emsp;And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><details><summary>译文</summary>&emsp;&emsp;若不是 Windows （由微软开发的操作系统）抄袭 Mac 电脑的，很可能在个人电脑上都不会有这些了。如果我没有退学，那我就不会旁听这门书法课，个人电脑就不会像现在这样有神奇的字体排版了。当然在大学的时候，我还不可能把未来的点点滴滴串连起来，但是当我十年后回顾这一切的时候，一切都清晰了。</details><p>&emsp;&emsp;Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><details><summary>译文</summary>&emsp;&emsp;再次说明下，你不可能将未来的片断串连起来；你只能在回顾的时候将点点滴滴串连起来。所以你必须相信这些片断会以某种方式在未来的某一天串连起来。你必须要相信某些东西：你的勇气、命运、生命、因缘，诸如此类。这种方法从来没有令我失望，只是让我的生命更加地与众不同。</details><h2 id="My-second-story-is-about-love-and-loss"><a href="#My-second-story-is-about-love-and-loss" class="headerlink" title="My second story is about love and loss."></a>My second story is about love and loss.</h2><details><summary>译文</summary>我的第二个故事是关于爱和失去。</details><p>&emsp;&emsp;I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><details><summary>译文</summary>&emsp;&emsp;我非常幸运，因为我在很早的时候就找到了我爱做的事情。在我二十岁的时候，我和沃兹就在我父母的车库里面创立了苹果公司。我们很努力工作，十年之后，苹果就从我们两个人窝在车库里发展到了拥有超过四千名的雇员、价值超过十亿美金的大公司。而在那之前一年，我们发布了我们最精美的产品，那就是 Macintosh ，而我也刚过了三十岁了。</details><p>&emsp;&emsp;And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><details><summary>译文</summary>&emsp;&emsp;然后，我被炒了鱿鱼。你怎么可能被你自己创立的公司炒鱿鱼呢? 是这样地，在苹果快速成长的时候，我们雇用了一个我认为很有天分的家伙和我一起管理这个公司，在第一年，公司运转的很好。但是后来我们对未来的愿景发生了分歧，最终我们大吵一通。当我们争吵的不可开交时，董事会站在了他那边。所以在三十岁的时候，我出局了。而且满城皆知。我成年后生命中的重心消失了，这对我来说真的是毁灭性的。</details><p>&emsp;&emsp;I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><details><summary>译文</summary>&emsp;&emsp;在最初的几个月里，我真的不知道该做些什么。我感到我让从前的创业家失望了，我把传到我手里的接力棒整到了地上。我和 David Pack 和 Bob Boyce 见面，并试图为自己的搞砸了而向他们道歉。</details><p>&emsp;&emsp;I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><details><summary>译文</summary>&emsp;&emsp;在公众眼里，我非常地失败，我甚至想着从硅谷跑掉。但是有些事情开始慢慢地照亮我，我仍然喜爱我从事的事情。在苹果公司发生的转折没有改变它，一点也没有。我被拒绝了，但是我仍然热爱它。所以我决定从头再来。</details><p>&emsp;&emsp;I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><details><summary>译文</summary>&emsp;&emsp;我当时没有意识到，但是事后证明，曾被苹果公司炒鱿鱼是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感被作为一个创业者的轻松感所代替：对任何事情都不再那么确信。这让我觉得如此自由，让我得以进入我生命中最有创造力的一个阶段。</details><p>&emsp;&emsp;During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><details><summary>译文</summary>&emsp;&emsp;在接下来的五年里，我创立了一个名叫 NeXT 的公司，还有一个叫 Pixar 的公司，并和一位了不起的女士相爱，她后来成为我的妻子。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”，Pixar 现在也是世界上最成功的电脑制作工作室。</details><p>&emsp;&emsp;In a remarkable turn of events, Apple bought NeXT, I retuned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><details><summary>译文</summary>&emsp;&emsp;在后来的一系列运转中，Apple 收购了 NeXT，然后我回到了 Apple 公司。我们在 NeXT 发展的技术在 Apple 现在的复兴之中发挥了关键的作用。我和 Laurence 一起建立了一个幸福的家庭。</details><p>&emsp;&emsp;I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love.</p><details><summary>译文</summary>&emsp;&emsp;我可以非常肯定，如果我不被 Apple 开除，这其中任何一件事情都不会发生。这件事本身是一味非常苦的药，但是我猜病人需要它。有些时候，生活会拿起一块砖头猛拍向你的脑袋。不要失去信心。我很清楚唯一使我一直走下去的，就是我无比钟爱我做的事情。你得去找到你所爱的东西。</details><p>&emsp;&emsp;And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><details><summary>译文</summary>&emsp;&emsp;对于工作是如此，对于你的爱人亦然。你的工作将会占据生活中很大的一部分。让自己真正满意的唯一方式就是做你认为的伟大的工作，成就伟大的唯一方法就是热爱你所做之事。如果你还没有找到，那么就继续寻找，不要安于现状，就像所有的心事一样，当你找到的时候你就会知道的。就像任何一段完满的感情，随着岁月的流逝它只会越来越好。所以请继续寻找，（在找到之前）不要安于现状。</details><h2 id="My-third-story-is-about-death"><a href="#My-third-story-is-about-death" class="headerlink" title="My third story is about death."></a>My third story is about death.</h2><details><summary>译文</summary>我的第三个故事是关于死亡的。</details><p>&emsp;&emsp;When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><details><summary>译文</summary>&emsp;&emsp;我十七岁时，读到了一段引述，大致如下：“如果你把每一天都当作生命中最后一天去生活，那么有一天，你会非常确定你是正确的。”这句话给我留下了深刻的印象。从那时开始，往后的33年里，我在每天早晨都会对着镜子问自己：“如果今天是我生命中的最后一天，你会不会完成你今天将要做的事情呢?”当连续很多天答案都是“否”的时候，我就知道自己需要改变一些事情了。</details><p>&emsp;&emsp;Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><details><summary>译文</summary>&emsp;&emsp;“记住我终将死去”是我一生中遇到的最重要的箴言，它帮我做出了生命中重要的选择。因为几乎所有的事情，包括所有外部的期待，所有的荣耀，所有的尴尬或失败，这些在死亡面前都会消失。留下的只有真正重要的。你有时候会思考你将会失去某些东西，“记住你终将死去”是我知道的避免患得患失的最好方法。一个人赤裸裸的来，赤裸裸的去，没有理由不去追随本心。</details><p>&emsp;&emsp;About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><details><summary>译文</summary>&emsp;&emsp;大概一年前，我被诊断得了癌症。我在早晨七点半做了一个扫描，清楚地显示在我的胰腺长了一个肿瘤。我当时甚至都不知道胰腺是什么。医生告诉我那很可能是一种无法治愈的癌症，我还有三到六个月的时间。我的医生建议我回家，然后整理好我的一切，这是医生的暗号，意思是让我准备好赴死了。意味着你要把未来十年对你小孩说的话在几个月里面说完，那意味着把每件事情都搞定，让你的家人会尽可能轻松的生活，那意味着你要说“再见了”。</details><p>&emsp;&emsp;I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><details><summary>译文</summary>&emsp;&emsp;那张诊断书伴随了我一整天。那天晚上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去，通过我的胃，然后进入我的肠子，用一根针在我胰腺上的肿瘤上取了几个细胞。我当时服了镇定剂，不过我的妻子在那里，她后来告诉我，当医生在显微镜下观察这些细胞的时候他们开始尖叫，因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术，现在我痊愈了。</details><p>&emsp;&emsp;This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><details><summary>译文</summary>&emsp;&emsp;那是我最接近死亡的时候，我希望这也是以后的几十年最接近的一次。死亡对我来说，曾经只是一个有用但是纯粹是知识上的概念，经历过这次的生死考验，我现在可以更肯定一点地对你们说，</details><p>&emsp;&emsp;No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><details><summary>译文</summary>&emsp;&emsp;没有人想要死，即使是想要上天堂的人，也不会为了上天堂而死。然而死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的发明。它是生命的变革者。它除旧迎新。你们现在是新的，但是从现在开始的不久以后，你们将会逐渐的变成旧的然后被清除。我很抱歉说的这么戏剧性，但是这十分的真实。</details><p>&emsp;&emsp;Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><details><summary>译文</summary>&emsp;&emsp;你们的时间是有限的，所以不要浪费时间在重复别人的人生上。不要被教条所困，因为教条是别人的人生经验。不要让别人的意见淹没掉你自己内心的声音。最重要的是，要有勇气追随你自己的本心和直觉。他们已经知道你真正想成为什么样的人。其他事情都是次要的。</details><p>&emsp;&emsp;When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notion。</p><details><summary>译文</summary>&emsp;&emsp;当我还年轻的时候，有一个非常令人震惊的杂志，就是《全球概览》，是我们那一代人的“圣经”之一。这是由 Stewart Brand 创建的，他就住在离这里不远的门洛帕克。他用他诗意的笔触把杂志写活了。那是在 20 世纪 60 年代末，还没有个人电脑和桌面出版，所以它都是用打字机、剪刀和宝丽来相机制作的。这有点像平装本的 Google 搜索，但是出现在 Google 诞生的35年之前，它很理想主义，充斥着整洁的工具和伟大的理念。</details><p>&emsp;&emsp;Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><details><summary>译文</summary>&emsp;&emsp;Stewart Brand 和他的团队出了好几期的《全球概览》，然后当杂志完成了自己的使命之后，他们又推出了停刊前的最后一期。那是在 20 世纪 70 年代中期，我当时像你们这么大。在他们最后一期的封底，是一张清晨乡间公路的照片，如果你有冒险精神的话，你可能会在这里搭别人的便车。在图下面是这句话：“求知若饥，虚心若愚”。这是他们停刊时的告别语。求知若饥，虚心若愚。我一直都希望自己能做到这一点。而现在，当你们毕业了，重新开始新的生活时，我希望你们也能如此。</details><p><img src="/blog/img/dots/dots_stay_hungry_stay_foolish/dots_stay_hungry_stay_foolish_2.jpg"></p><p>&emsp;&emsp;Stay Hungry. Stay Foolish.<br>&emsp;&emsp;求知若饥，虚心若愚。<br>&emsp;&emsp;Thank you all very much.<br>&emsp;&emsp;非常感谢大家</p>]]></content>
    
    
    <categories>
      
      <category>Dots</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dots</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 Hexo 5 注入器为主题添加新功能</title>
    <link href="/blog/hexo-injector/"/>
    <url>/blog/hexo-injector/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-注入器"><a href="#Hexo-注入器" class="headerlink" title="Hexo 注入器"></a>Hexo 注入器</h2><p><a href="https://hexo.io/zh-cn/api/injector.html">Hexo 注入器</a>是 Hexo 5 版本加入的一项新功能，注入器可以将静态代码片段注入生成的 HTML 的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 中。</p><p>编写注入代码，需要在博客的根目录下创建 <code>scripts</code> 文件夹，然后在里面任意命名创建一个 js 文件即可。</p><p>例如创建一个 <code>/blog/scripts/example.js</code>，内容为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;, &#x27;default&#x27;);<br></code></pre></div></td></tr></table></figure><p>上述代码会在生成的页面 <code>&lt;/body&gt;</code> 注入加载 <code>jquery.js</code> 的代码。</p><p><code>register</code> 函数可接受三个参数，第一个参数是代码片段注入的位置，接受以下值：</p><ul><li><code>head_begin</code>: 注入在 <code>&lt;head&gt;</code> 之后（默认）</li><li><code>head_end</code>: 注入在 <code>&lt;/head&gt;</code> 之前</li><li><code>body_begin</code>: 注入在 <code>&lt;body&gt;</code> 之后</li><li><code>body_end</code>: 注入在 <code>&lt;/body&gt;</code> 之前</li></ul><p>第二个参数是注入的片段，可以是字符串，也可以是一个返回值为字符串的函数。</p><p>第三个参数是注入的页面类型，接受以下值：       </p><ul><li><code>default</code>: 注入到每个页面（默认值）</li><li><code>home</code>: 只注入到主页（<code>is_home()</code> 为 <code>true</code> 的页面）</li><li><code>post</code>: 只注入到文章页面（<code>is_post()</code> 为 <code>true</code> 的页面）</li><li><code>page</code>: 只注入到独立页面（<code>is_page()</code> 为 <code>true</code> 的页面）</li><li><code>archive</code>: 只注入到归档页面（<code>is_archive()</code> 为 <code>true</code> 的页面）</li><li><code>category</code>: 只注入到分类页面（<code>is_category()</code> 为 <code>true</code> 的页面）</li><li><code>tag</code>: 只注入到标签页面（<code>is_tag()</code> 为 <code>true</code> 的页面）</li><li>或是其他自定义 layout 名称</li></ul><h2 id="实际案例"><a href="#实际案例" class="headerlink" title="实际案例"></a>实际案例</h2><p>在实际使用中，建议将 js 代码独立成为 js 文件，存放在博客的 <code>source</code> 目录下，然后在 <code>scripts</code> 里通过一个包含 injector 的 js 文件统一引入。</p><p>例如创建一个 <code>/source/js/custom.js</code>，里面包含初始化的代码，然后在 <code>/scripts/injector.js</code> 里写入：</p><figure class="highlight xquery"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xquery">hexo.extend.injector.register(<span class="hljs-string">&#x27;body_end&#x27;</span>, `<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/custom.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>`)<br></code></pre></div></td></tr></table></figure><p>以下案例都采用类似的形式，不再赘述。</p><h3 id="APlayer-音乐播放器"><a href="#APlayer-音乐播放器" class="headerlink" title="APlayer 音乐播放器"></a>APlayer 音乐播放器</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, `<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;aplayer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.css&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/aplayer/1.10.1/APlayer.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/aplayer.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>`);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> oldLoadAp = <span class="hljs-built_in">window</span>.onload;<br>  <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    oldLoadAp &amp;&amp; oldLoadAp();<br><br>    <span class="hljs-keyword">new</span> APlayer(&#123;<br>      container: <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;aplayer&#x27;</span>),<br>      fixed: <span class="hljs-literal">true</span>,<br>      autoplay: <span class="hljs-literal">false</span>,<br>      loop: <span class="hljs-string">&#x27;all&#x27;</span>,<br>      order: <span class="hljs-string">&#x27;random&#x27;</span>,<br>      theme: <span class="hljs-string">&#x27;#b7daff&#x27;</span>,<br>      preload: <span class="hljs-string">&#x27;none&#x27;</span>,<br>      audio: [<br>        &#123;<br>          name: <span class="hljs-string">&#x27;song1&#x27;</span>,<br>          artist: <span class="hljs-string">&#x27;artist1&#x27;</span>,<br>          url: <span class="hljs-string">&#x27;/songs/song1.mp3&#x27;</span>,<br>          cover: <span class="hljs-string">&#x27;/img/cover.jpg&#x27;</span><br>        &#125;<br>      ]<br>    &#125;);<br>  &#125;<br>&#125;)();<br></code></pre></div></td></tr></table></figure><p>更多参数详见 <a href="https://aplayer.js.org/#/zh-Hans/?id=%E5%8F%82%E6%95%B0">Aplayer 文档</a>。</p><h3 id="DaoVoice-聊天插件"><a href="#DaoVoice-聊天插件" class="headerlink" title="DaoVoice 聊天插件"></a>DaoVoice 聊天插件</h3><p>先在 <a href="https://daovoice.io/">https://daovoice.io</a> 注册一个账号，按其中的引导获得 appId，然后添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">hexo.extend.injector.register(&#x27;body_end&#x27;, `<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/daovoice.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>`);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> appId = <span class="hljs-string">&#x27;这里填上注册后账号的 appId&#x27;</span>;<br><br>  (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i, s, o, g, r, a, m</span>) </span>&#123;  <br>    i[<span class="hljs-string">&#x27;DaoVoiceObject&#x27;</span>] = r;<br>    i[r] = i[r] ||<br>      <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        (i[r].q = i[r].q || []).push(<span class="hljs-built_in">arguments</span>);<br>      &#125;;<br>    i[r].l = <span class="hljs-number">1</span> * <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    a = s.createElement(o);<br>    m = s.getElementsByTagName(o)[<span class="hljs-number">0</span>];<br>    a.async = <span class="hljs-number">1</span>;<br>    a.src = g;<br>    a.charset = <span class="hljs-string">&#x27;utf-8&#x27;</span>;<br>    m.parentNode.insertBefore(a, m);<br>  &#125;)(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">document</span>, <span class="hljs-string">&#x27;script&#x27;</span>, (<span class="hljs-string">&#x27;https:&#x27;</span> === <span class="hljs-built_in">document</span>.location.protocol ? <span class="hljs-string">&#x27;https:&#x27;</span> : <span class="hljs-string">&#x27;http:&#x27;</span>) + <span class="hljs-string">&#x27;//widget.daovoice.io/widget/&#x27;</span> + appId + <span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;daovoice&#x27;</span>);<br>  daovoice(<span class="hljs-string">&#x27;init&#x27;</span>, &#123;<br>    app_id: appId,<br>  &#125;);<br>  daovoice(<span class="hljs-string">&#x27;update&#x27;</span>);<br>&#125;)();<br></code></pre></div></td></tr></table></figure><h3 id="文章时效性提示"><a href="#文章时效性提示" class="headerlink" title="文章时效性提示"></a>文章时效性提示</h3><p>技术性文章往往存在时效性的问题，比如某些文章会介绍一些临时解决方案，但随着时间推移可能已经失效了。我们可以通过判断发布时间（即文章设置的 <code>date</code>）与当前时间的间隔，来为文章开头插入一条提示。</p><p>代码效果如下所示：</p><div class="note note-warning" style="font-size:0.9rem">  <p></p>  <div class="h6">文章时效性提示</div>  <p>这是一篇发布于 263 天前的文章，部分信息可能已发生改变，请注意甄别。</p>  <p></p></div><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> times = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;time&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (times.length === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<br>  <span class="hljs-keyword">var</span> posts = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;post-content&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (posts.length === <span class="hljs-number">0</span>) &#123; <span class="hljs-keyword">return</span>; &#125;<br><br>  <span class="hljs-keyword">var</span> pubTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(times[<span class="hljs-number">0</span>].dateTime);  <span class="hljs-comment">/* 文章发布时间戳 */</span><br>  <span class="hljs-keyword">var</span> now = <span class="hljs-built_in">Date</span>.now()  <span class="hljs-comment">/* 当前时间戳 */</span><br>  <span class="hljs-keyword">var</span> interval = <span class="hljs-built_in">parseInt</span>(now - pubTime)<br>  <span class="hljs-comment">/* 发布时间超过指定时间（毫秒） */</span><br>  <span class="hljs-keyword">if</span> (interval &gt; <span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">30</span>*<span class="hljs-number">1000</span>)&#123;<br>    <span class="hljs-keyword">var</span> days = <span class="hljs-built_in">parseInt</span>(interval / <span class="hljs-number">86400000</span>)<br>    posts[<span class="hljs-number">0</span>].innerHTML = <span class="hljs-string">&#x27;&lt;div class=&quot;note note-warning&quot; style=&quot;font-size:0.9rem&quot;&gt;&lt;p&gt;&#x27;</span> +<br>      <span class="hljs-string">&#x27;&lt;div class=&quot;h6&quot;&gt;文章时效性提示&lt;/div&gt;&lt;p&gt;这是一篇发布于 &#x27;</span> + days + <span class="hljs-string">&#x27; 天前的文章，部分信息可能已发生改变，请注意甄别。&#x27;</span> +<br>      <span class="hljs-string">&#x27;&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;&#x27;</span> + posts[<span class="hljs-number">0</span>].innerHTML;<br>  &#125;<br>&#125;)();<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid 页脚增加网站运行时长</title>
    <link href="/blog/fluid-footer-custom/"/>
    <url>/blog/fluid-footer-custom/</url>
    
    <content type="html"><![CDATA[<p>Fluid 1.8.4 版本支持自定义页脚内容了，群友常改的网站运行时长，这次无需再修改源代码。</p><a id="more"></a><p>只需要在主题配置中的 <code>footer: content</code> 添加：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">footer:<br>  content: &#x27;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://hexo.io&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Hexo<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-love&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;nofollow noopener&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>Fluid<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/duration.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  &#x27;<br></code></pre></div></td></tr></table></figure><p><code>content</code> 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。</p><p><code>duration.js</code> 包含的才是功能代码，我们在博客目录下创建 <code>source/js/duration.js</code>，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">!(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    <span class="hljs-keyword">var</span> grt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">&quot;2020-01-01 00:00:00&quot;</span>);  <span class="hljs-comment">/** 此处是计时的起始时间 **/</span><br>    now.setTime(now.getTime()+<span class="hljs-number">250</span>);<br>    days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>;<br>    dnum = <span class="hljs-built_in">Math</span>.floor(days);<br>    hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum);<br>    hnum = <span class="hljs-built_in">Math</span>.floor(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(hnum).length === <span class="hljs-number">1</span> )&#123;<br>      hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;<br>    &#125;<br>    minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-built_in">Math</span>.floor(minutes);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(mnum).length === <span class="hljs-number">1</span> )&#123;<br>      mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;<br>    &#125;<br>    seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-built_in">Math</span>.round(seconds);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">String</span>(snum).length === <span class="hljs-number">1</span> )&#123;<br>      snum = <span class="hljs-string">&quot;0&quot;</span> + snum;<br>    &#125;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;timeDate&quot;</span>).innerHTML = <span class="hljs-string">&quot;本站安全运行&amp;nbsp&quot;</span>+dnum+<span class="hljs-string">&quot;&amp;nbsp天&quot;</span>;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;times&quot;</span>).innerHTML = hnum + <span class="hljs-string">&quot;&amp;nbsp小时&amp;nbsp&quot;</span> + mnum + <span class="hljs-string">&quot;&amp;nbsp分&amp;nbsp&quot;</span> + snum + <span class="hljs-string">&quot;&amp;nbsp秒&quot;</span>;<br>  &#125;<br>  <span class="hljs-built_in">setInterval</span>(update, <span class="hljs-number">1000</span>);<br>&#125;)();<br></code></pre></div></td></tr></table></figure><p>不要忘记把上面注释的时间改为自己的时间，至此这项功能就引入到 <code>&lt;footer&gt;</code> 里了。</p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给博客文章嵌入 PPT 演示</title>
    <link href="/blog/hexo-nodeppt/"/>
    <url>/blog/hexo-nodeppt/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：pxxyyz</p><p>原文地址：<a href="https://pxxyyz.com/posts/44941/">https://pxxyyz.com/posts/44941/</a></p>          </div><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><iframe src="https://pxxyyz.com/nodeppt/%E5%A4%9A%E5%A4%8D%E5%8F%98%E8%BF%91%E6%9C%9F%E8%BF%9B%E5%B1%95/demo.html" width="100%" height="600" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe><div class="note note-light">            <p><strong>可以通过鼠标和键盘控制</strong></p><ul><li>页面: ↑/↓/←/→ Space Home End（空格,home键,end键）</li><li>全屏: F</li><li>Overview: -/+</li><li>演讲者笔记: N</li><li>网格背景: Enter</li></ul>          </div><h2 id="nodeppt"><a href="#nodeppt" class="headerlink" title="nodeppt"></a>nodeppt</h2><p>首先可以看看官网给的<a href="https://nodeppt.js.org/">demo</a>，非常的炫酷。</p><iframe src="https://nodeppt.js.org/" width="100%" height="600" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe><h3 id="安装nodeppt"><a href="#安装nodeppt" class="headerlink" title="安装nodeppt"></a>安装nodeppt</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install -g nodeppt<br></code></pre></div></td></tr></table></figure><h3 id="使用nodeppt"><a href="#使用nodeppt" class="headerlink" title="使用nodeppt"></a>使用nodeppt</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># new：使用线上模板创建一个新的 md 文件</span><br><span class="hljs-comment"># create a new slide with an official template</span><br>$ nodeppt new slide.md<br><span class="hljs-comment"># 使用模板</span><br>$ nodeppt new username/repo xxx.md<br><br><span class="hljs-comment"># create a new slide straight from a github template</span><br>$ nodeppt new slide.md -t username/repo<br><br><span class="hljs-comment"># serve：启动一个 md 文件的 webpack dev server</span><br><span class="hljs-comment"># start local sever show slide</span><br>$ nodeppt serve slide.md<br><span class="hljs-comment"># start local sever show slide with port</span><br>$ nodeppt serve slide.md -p port<br><br><span class="hljs-comment"># build：编译产出一个 md 文件</span><br><span class="hljs-comment"># to build a slide</span><br>$ nodeppt build slide.md<br></code></pre></div></td></tr></table></figure><ul><li><p>生成的网页可以使用键盘操作(类似PPT操作)</p><ul><li>Page: ↑/↓/←/→ Space Home End</li><li>Fullscreen: F</li><li>Overview: -/+</li><li>Speaker Note: N</li><li>Grid Background: Enter</li><li>nodeppt 有演讲者模式，在页面 url 后面增加<code>?mode=speaker</code> 既可以打开演讲者模式，双屏同步</li></ul></li><li><p>端口port的好处是可以照着官网的demo文件学习和修改，保证多个slide.md在浏览器查看时不会冲突，默认的链接是<a href="http://192.168.0.105:8080/%E3%80%82">http://192.168.0.105:8080/。</a></p></li><li><p>官网的demo文件在<a href="https://github.com/ksky521/nodeppt/tree/master/site">Github</a>其中的<a href="https://github.com/ksky521/nodeppt/blob/master/site/index.md">index.md</a>。</p></li><li><p>产生pdf：直接在浏览器上<code>command+P/ctrl+P</code> </p></li><li><p>产生html：</p><ul><li><p>之前版本通过<code>nodeppt generate ./ppts/demo.md -a</code>，见<a href="https://github.com/zhangry868/nodePPT#html%E7%89%88">Github nodePPT v1.2.0</a></p></li><li><p>当前版本产生html利用<strong>built</strong>指令 ，例如<code>nodeppt build slide.md</code>，产生的html在默认文件夹<code>dist</code>中，包含CSS、IMG、JS三个文件夹和demo.html。</p></li><li><p>在nodeppt仓库的Issue<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="分享个脚本，导出单个离线HTML文件，不是用build #289">[1]</span></a></sup>上找到一个小哥做的爬虫程序，亲测有效。会生成一个html文件，虽然文件会大一点。不过用<a href="https://github.com/ksky521/nodeppt/blob/master/site/index.md">index.md</a>文件实验，发现(某些)图片响应时间过长导致失败，不过自己写的markdown基本无压力转html，给小哥点大大的赞👍而且小哥表示：</p><blockquote><p>之前试过直接用build，效果没问题，但build出来会有几个文件，如果通过手机或email分享出去直接播放的话稍显麻烦。</p></blockquote></li></ul></li></ul><h3 id="nodeppt入门"><a href="#nodeppt入门" class="headerlink" title="nodeppt入门"></a>nodeppt入门</h3><ul><li>配置与hexo的post文件头一样，用 yaml 语法设定基本配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">nodeppt</span> <span class="hljs-string">markdown</span> <span class="hljs-string">演示</span><br><span class="hljs-attr">speaker:</span> <span class="hljs-string">三水清</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://github.com/ksky521/nodeppt</span><br><span class="hljs-attr">js:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">https://www.echartsjs.com/asset/theme/shine.js</span><br><span class="hljs-attr">prismTheme:</span> <span class="hljs-string">solarizedlight</span><br><span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">echarts</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mermaid</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">katex</span><br></code></pre></div></td></tr></table></figure><ul><li>正文使用<code>&lt;slide&gt;</code>对整个 markdown 文件进行拆分，拆成单页的幻灯片内容。</li><li>图片、样式、布局、icon、动画等设置可以看看仓库的文档和demo文件学习。</li><li>演讲者模式的批注通过来<code>:::</code>语法添加，然后再页面的链接添加<code>?mode=speaker</code>，按<code>N</code>开启演讲中模式。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">:::note<br><span class="hljs-section">## Note here</span><br>:::<br></code></pre></div></td></tr></table></figure><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="CSS样式导入失败"><a href="#CSS样式导入失败" class="headerlink" title="CSS样式导入失败"></a>CSS样式导入失败</h3><p>生成的html数学公式的格式全部错误，即使在nodeppt的配置部分引入katex的JS和CSS，导出的文档仍然会出错。</p><ul><li>通过nodeppt build的html页面</li></ul><p>打开生成的html文件可以看到<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="当在浏览器里直接打开index.html时，打开速度会非常慢 #286">[2]</span></a></sup></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.staticfile.org/prism/1.15.0/themes/prism.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.staticfile.org/KaTeX/0.10.0-rc.1/katex.min.css&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.staticfile.org/KaTeX/0.5.1/katex.min.css&quot;</span> /&gt;</span><br></code></pre></div></td></tr></table></figure><p>只要把文件中所有<code>//</code>开头的都替换成<code>https://</code>，如</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">https://cdn.staticfile.org/font-awesome/4.7.0/css/font-awesome.min.css</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">https://cdn.staticfile.org/prism/1.15.0/themes/prism.min.css</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">https://cdn.staticfile.org/KaTeX/0.10.0-rc.1/katex.min.css</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">href</span>=<span class="hljs-string">https://cdn.staticfile.org/KaTeX/0.5.1/katex.min.css</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这样控制台就不会报错了，数学公式和fa-icon能正常显示了。</p><ul><li>通过py程序爬的html页面</li></ul><p>配合KaTeX官网的<a href="https://katex.org/docs/browser.html#starter-template">使用文档</a>，在生成的html文件<code>&lt;head&gt;</code>引用katex的JS和CSS。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;renderMathInElement(document.body);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>添加后公式都能正确显示了。</p><h3 id="在博客添加nodeppt"><a href="#在博客添加nodeppt" class="headerlink" title="在博客添加nodeppt"></a>在博客添加nodeppt</h3><ul><li>通过py程序爬的html页面</li></ul><p>在Hexo博客里想调用或者链接nodeppt生成的html，需要hexo设置<code>skip_render</code>, 指定不进行渲染的文件或文件夹，例如在<code>source</code>目录下新建<code>nodeppt</code>来存放nodeppt生成的html，则需要在根目录下的<code>_config.yml</code>文件添加</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodeppt/*.html</span><br></code></pre></div></td></tr></table></figure><ul><li>通过nodeppt build的html页面</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">skip_render:</span> <br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodeppt/**</span><br></code></pre></div></td></tr></table></figure><p>文件匹配是基于正则匹配的，如果需要忽略全部文件(<code>/*</code>)、指定类型type文件(<code>/*.type</code>)、全部文件以及子目录(<code>/**</code>)以及多个文件需要用(<code>- file/**</code>)。</p><p>对应的文件访问格式是<code>../../nodeppt/file.html</code>或<code>../../nodeppt/file/demo.html</code>，本页演示的加载是通过<code>iframe</code>实现的。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../nodeppt/file.html&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-attr">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>注意：如果这一步不执行的话，debug会发现nodeppt生成的html会被hexo处理，产生错误</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">FATAL Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="hljs-string">Nunjucks Error:  [Line 9418, Column 3465] expected variable end</span><br></code></pre></div></td></tr></table></figure><p>至于使用cdn来使用html似乎不行，出来的是html的源码，而不是网页。如果使用cdn的方式能成功就不用这么麻烦的<code>skip_render</code>。</p><p>有一种简单的方法就是用github或者coding等部署nodeppt的html，再iframe的src填对应的网址。如果hexo的<code>skip_render</code>设置正确，也可通过网址主页下的nodeppt下找到。</p><ul><li><a href="https://pxxyyz.com/nodeppt/%E5%A4%9A%E5%A4%8D%E5%8F%98%E8%BF%91%E6%9C%9F%E8%BF%9B%E5%B1%95/demo.html">https://pxxyyz.com/nodeppt/%E5%A4%9A%E5%A4%8D%E5%8F%98%E8%BF%91%E6%9C%9F%E8%BF%9B%E5%B1%95/demo.html</a></li><li><a href="http://uwrfy5.coding-pages.com/">http://uwrfy5.coding-pages.com/</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/ksky521/nodeppt/issues/289#issue-613221513">分享个脚本，导出单个离线HTML文件，不是用build #289</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://github.com/ksky521/nodeppt/issues/286#issue-575436572">当在浏览器里直接打开index.html时，打开速度会非常慢 #286</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Fluid 主题首页上加入一言</title>
    <link href="/blog/fluid-hitokoto/"/>
    <url>/blog/fluid-hitokoto/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：pxxyyz</p><p>原文地址：<a href="https://pxxyyz.com/posts/30454/">https://pxxyyz.com/posts/30454/</a></p>          </div><p>群里有个小哥想在首页 Slogan 上显示一言，在 GitHub 上搜了搜，还真有 Fluid 主题的改造，我按照思路写下改造的步骤。</p><h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><h3 id="typed-ejs"><a href="#typed-ejs" class="headerlink" title="typed.ejs"></a>typed.ejs</h3><p>修改<code>layout\_partial\plugins</code>目录下的<code>typed.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;% if(theme.fun_features.typing.enable &amp;&amp; page.subtitle !== false)&#123; %&gt;<br>  &lt;%- js_ex(theme.static_prefix.typed, &quot;/typed.min.js&quot;) %&gt;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">typing</span>(<span class="hljs-params">id, title</span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> typed = <span class="hljs-keyword">new</span> Typed(<span class="hljs-string">&#x27;#&#x27;</span> + id, &#123;</span><br>            strings: [<br><span class="javascript">              <span class="hljs-string">&#x27;  &#x27;</span>,</span><br><span class="javascript">              title + <span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,</span><br>            ],<br><span class="javascript">            cursorChar: <span class="hljs-string">&quot;&lt;%- theme.fun_features.typing.cursorChar %&gt;&quot;</span>,</span><br>            typeSpeed: &lt;%- theme.fun_features.typing.typeSpeed %&gt;,<br>            loop: &lt;%- theme.fun_features.typing.loop %&gt;,<br>        &#125;);<br>        typed.stop();<br><span class="javascript">        $(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $(<span class="hljs-string">&quot;.typed-cursor&quot;</span>).addClass(<span class="hljs-string">&quot;h2&quot;</span>);</span><br>            typed.start();<br>        &#125;);<br>    &#125;<br><span class="javascript">    &lt;% <span class="hljs-keyword">if</span>(is_post()) &#123; %&gt;</span><br><span class="javascript">        typing(<span class="hljs-string">&quot;subtitle&quot;</span>, <span class="hljs-string">&quot;&lt;%- data.subtitle %&gt;&quot;</span>)</span><br><span class="javascript">    &lt;% &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(theme.index.hitokoto.enable)&#123; %&gt;</span><br><span class="javascript">        fetch(<span class="hljs-string">&#x27;https://v1.hitokoto.cn&#x27;</span>)</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())</span><br><span class="javascript">        .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="javascript">           typing(<span class="hljs-string">&quot;hitokoto&quot;</span>, data.hitokoto)</span><br>        &#125;)<br><span class="javascript">        .catch(<span class="hljs-built_in">console</span>.error)</span><br><span class="javascript">    &lt;% &#125; <span class="hljs-keyword">else</span> &#123; %&gt;</span><br><span class="javascript">        typing(<span class="hljs-string">&quot;subtitle&quot;</span>, <span class="hljs-string">&quot;&lt;%- data.subtitle %&gt;&quot;</span>)</span><br>    &lt;% &#125; %&gt;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></div></td></tr></table></figure><ul><li>将原来的功能放在typing函数里面，再判断打字机显示subtitle还是hitokoto<ul><li>所有的post都显示subtitle，即markdown的title，page的title是网站的标题</li><li>除了post以外，判断<code>theme.index.hitokoto.enable</code><ul><li>设置显示一言，则通过fetch调用hitokoto的API，这个部分官方说明<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="一言开发者中心">[1]</span></a></sup>和DIY教程<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="为您的Hexo博客添加Hitokoto一言功能">[2]</span></a></sup>都说的很详细了</li><li>如果设置不显示一言，则显示subtitle</li></ul></li><li>hitokoto比subtitle优先级高，这会导致归档、分类、标签等页面的打字机显示hitokoto</li><li>如果只需要在首页显示hitokoto，但在非post的页面显示原subtitle，这需要判断页面的属性，据我观察，所有的非post的页面布局(layout)都会设置<code>page.layout=”XXX“</code>，但是index和page没有设置，因此，可以通过<code>!page.layout</code>判断来判断是否为首页，当然，post页面设定显示subtitle，就不在考虑范围内，这样只需将上面的<code>else if</code>条件修改如下</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;% &#125; else if(theme.index.hitokoto.enable &amp;&amp; !page.layout) &#123; %&gt;<br></code></pre></div></td></tr></table></figure><h3 id="layout-ejs"><a href="#layout-ejs" class="headerlink" title="layout.ejs"></a>layout.ejs</h3><p>修改<code>layout</code>目录下的<code> layout.ejs</code>，在<code>&lt;span class=&quot;h2&quot; id=&quot;subtitle&quot;&gt;</code>和<code>&lt;% if(is_post()) &#123; %&gt;</code>之间插入如下代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;subtitle&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- subtitle %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br>&lt;% if(!is_post()) &#123; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- hitokoto %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&lt;% &#125; %&gt;<br><br>&lt;% if(is_post()) &#123; %&gt;<br>&lt;%- partial(&#x27;_partial/post-meta&#x27;) %&gt;<br>&lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>这个部分设置显示hitokoto的样式和位置，不设置这个会报关于<code>typing(&quot;hitokoto&quot;, data.hitokoto)</code>的错误</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">TypeError: Cannot <span class="hljs-keyword">read</span> <span class="hljs-keyword">property</span><span class="hljs-title"> </span>&#x27;tagName&#x27; of null<br></code></pre></div></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在<code>source\_data</code>目录下修改<strong>主题配置</strong>文件<code>fluid_config.yml</code>，在<code>index</code>下设置hitokoto的开关</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">#---------------------------</span><br><span class="hljs-comment"># 首页</span><br><span class="hljs-comment"># Index Page</span><br><span class="hljs-comment">#---------------------------</span><br><span class="hljs-attr">index:</span><br><span class="hljs-comment"># 添加hitokoto</span><br>  <span class="hljs-attr">slogan:</span>  <span class="hljs-comment"># 首页副标题的独立设置</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 为 false 则不显示任何内容</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;More haste, less speed.&#x27;</span>  <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span><br>  <span class="hljs-attr">hitokoto:</span>  <span class="hljs-comment"># 非post页面显示一言</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># slogan 和 hitokoto 不能同时启用，优先显示hitokoto</span><br></code></pre></div></td></tr></table></figure><ul><li>当<code>theme.index.hitokoto.enable == true</code>时，slogan里的text不在显示，因此只有关闭hitokoto才能在首页显示slogan的text或页面的subtitle</li></ul><h2 id="加入出处"><a href="#加入出处" class="headerlink" title="加入出处"></a>加入出处</h2><ol><li>如果想加入出处，可在打印<code>data.hitokoto</code>后加入<code>data.from</code>，以及相应的格式</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">typing(&quot;hitokoto&quot;, &#x27;『&#x27; + data.hitokoto + &#x27;』&#x27; + &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>&#x27;+ &#x27;——&#x27; + &#x27;「&#x27; + data.from + &#x27;」&#x27; + &#x27;<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span>&#x27;)<br></code></pre></div></td></tr></table></figure><ol start="2"><li>另一种显示出处的方法是另起一行打印<code>data.from</code>，</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">fetch(<span class="hljs-string">&#x27;https://v1.hitokoto.cn&#x27;</span>)<br>.then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())<br>.then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    typing(<span class="hljs-string">&quot;hitokoto&quot;</span>, data.hitokoto)<br>    typing(<span class="hljs-string">&quot;hitofrom &quot;</span>, data.from)<br>&#125;)<br>.catch(<span class="hljs-built_in">console</span>.error)<br></code></pre></div></td></tr></table></figure><ul><li>并在<code>layout.ejs</code>添加<code>&lt;%- hitofrom %&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;% if(!is_post()) &#123; %&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- hitokoto %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitofrom&quot;</span>&gt;</span><br>    &lt;% if(theme.fun_features.typing.enable == false) &#123; %&gt;<br>    &lt;%- hitofrom %&gt;<br>    &lt;% &#125; %&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&lt;% &#125; %&gt;<br></code></pre></div></td></tr></table></figure><ul><li>第一种是打印一段话，从头到尾只有一个cursorChar，但样式不太好改</li><li>第二种是打印两段话，会出现视觉混乱(个人觉得)，样式方便调整</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然这个还可以继续改下去，例如添加出处(hitofrom)、设置循环(loop)、修改样式等。</p><p>最后也是最重要的，感谢tanxinzheng<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="Code World">[3]</span></a></sup> (虽然不认识，但是新知识get！😁)。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://developer.hitokoto.cn/">一言开发者中心</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.bill.moe/add-hitokoto/">为您的Hexo博客添加Hitokoto一言功能</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="http://tanxinzheng.github.io/">Code World</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花里胡哨</tag>
      
      <tag>Fluid</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 云服务备份与使用 Jupyter</title>
    <link href="/blog/hexo-server/"/>
    <url>/blog/hexo-server/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：pxxyyz</p><p>原文地址：<a href="https://pxxyyz.com/posts/32990/">https://pxxyyz.com/posts/32990/</a>、<a href="https://pxxyyz.com/posts/60533/">https://pxxyyz.com/posts/60533/</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记录hexo博客遇到的问题：</p><ul><li>免密git</li><li>自动备份</li><li>云服务器开启<code>Jupyter Notebook</code></li><li>在博客的菜单访问<code>Jupyter</code>（使用<code>Nginx</code>重定向实现url访问端口）</li><li>公式渲染引擎</li></ul><h2 id="云服务器备份"><a href="#云服务器备份" class="headerlink" title="云服务器备份"></a>云服务器备份</h2><p>参考「Hexo博客部署到腾讯云服务器」<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo博客部署到腾讯云服务器">[1]</span></a></sup>后遇到了两个问题：</p><ol><li><p>每次在本地部署博客时都要重复输入密码</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">root@***(服务器ip,内网外网都行):/home/git/blog.git</span>    <span class="hljs-comment">#仓库地址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>    <span class="hljs-comment">#分支</span><br></code></pre></div></td></tr></table></figure></li><li><p>备份时hexo自带的backup无效</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">backup:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">root@***(服务器ip,内网外网都行):/home/git/backup.git</span>    <span class="hljs-comment">#仓库地址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>    <span class="hljs-comment">#分支</span><br></code></pre></div></td></tr></table></figure><h3 id="免密git"><a href="#免密git" class="headerlink" title="免密git"></a>免密git</h3></li></ol><p>在这一部分参照了「使用Git+Hooks实现Hexo站点自动部署到CentOS服务器上」<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="使用Git+Hooks实现Hexo站点自动部署到CentOS服务器上">[2]</span></a></sup>的配置SSH免密登陆步骤。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ssh-copy-id -i ~/.ssh/id_rsa.pub your_user_name@HostIP  //添加公钥<br>$ ssh your_user_name@HostIP //验证是否添加成功<br></code></pre></div></td></tr></table></figure><p>因为部署时用的root上传，因此这里的<code>your_user_name</code>设置<code>git</code>和<code>root</code>两个。添加成功后<code>ssh -v git@HostIP</code>和<code>ssh -v root@HostIP</code>显示<code>Welcome to XXX !</code></p><h3 id="自动备份"><a href="#自动备份" class="headerlink" title="自动备份"></a>自动备份</h3><p>这里我按照「deploy的流程在服务器设置了自动化备份」<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Hexo博客部署到腾讯云服务器">[1]</span></a></sup>，主要思路是在服务器设置一个独立的文件夹<code>backup</code>，再用类似<strong>deploy</strong>的钩子<code>blog.git</code>，构造一个备份的钩子<code>deploy.git</code>将博客的备份文件上传。</p><ul><li><p>获取<code>root</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ su root<br></code></pre></div></td></tr></table></figure></li><li><p>建立<code>git</code>仓库</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /home/backup<br>$ git init --bare backup.git<br></code></pre></div></td></tr></table></figure></li><li><p>修改<code>backup.git</code>权限</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ chown git:git -R backup.git<br></code></pre></div></td></tr></table></figure></li><li><p>在 <code>/home/hexo/backup.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹，我们创建一个新的 <code>git</code> 钩子 <code>post-receive</code>，用于自动部署。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ vim backup.git/hooks/post-receive<br></code></pre></div></td></tr></table></figure></li><li><p>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash </span><br>git --work-tree=/home/backup --git-dir=/home/git/backup.git remote add origin<br>git --work-tree=/home/backup --git-dir=/home/git/backup.git checkout -f<br><span class="hljs-comment"># git --work-tree=/home/backup --git-dir=/home/git/backup.git checkout -b master # 创建切换分支</span><br>git --work-tree=/home/backup --git-dir=/home/git/backup.git push origin master <span class="hljs-comment"># 提交代码至分支</span><br></code></pre></div></td></tr></table></figure></li><li><p>按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>：</code>，然后输入<code>wq</code>回车）</p></li><li><p>修改文件权限，使得其可执行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ chmod +x /home/git/backup.git/hooks/post-receive<br></code></pre></div></td></tr></table></figure></li><li><p>博客根目录<code>_config</code>下增加(因为服务器没有分支，默认是<code>master</code>，使用<code>backup</code>钩子)</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-string">root@***(服务器ip,内网外网都行):/home/git/backup.git</span>    <span class="hljs-comment">#仓库地址</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span>    <span class="hljs-comment">#分支</span><br></code></pre></div></td></tr></table></figure></li><li><p>备份<code>hexo backup</code>(使用 <code>Hexo-Git-Backup</code> 插件)</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g<br>$ hexo b<br></code></pre></div></td></tr></table></figure><p class="note note-primary">这个地方走了不少弯路，因为backup阶段每次都提示错误：</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">fata<span class="hljs-variable">l:</span> <span class="hljs-string">&#x27;xxx&#x27;</span> does not appear <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> <span class="hljs-keyword">a</span> git repository<br>fata<span class="hljs-variable">l:</span> Could not <span class="hljs-keyword">read</span> from remote repository.<br></code></pre></div></td></tr></table></figure><p>我通过搜索<code>fatal-does-not-appear-to-be-a-git-repository</code>找到解决思路，用<code>Git命令</code>自动备份。详细参见「HEXO博客实现自动备份」<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="HEXO博客实现自动备份">[3]</span></a></sup>。</p><ul><li><p>安装 <code>shelljs</code> 模块</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install --save shelljs<br></code></pre></div></td></tr></table></figure></li><li><p>编写自动备份脚本：主题目录下<code>scripts</code>文件夹下新建一个<code>js</code>文件，文件名随意取，例如<code>update.js</code>。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;shelljs/global&#x27;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// hexo.on(&#x27;deployAfter&#x27;, function() &#123;         //当deploy完成后执行备份</span><br>    hexo.on(<span class="hljs-string">&#x27;backupAfter&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-comment">//当backup完成后执行备份</span><br>        run();<br>    &#125;);<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：&quot;</span> + e.toString());<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!which(<span class="hljs-string">&#x27;git&#x27;</span>)) &#123;<br>        echo(<span class="hljs-string">&#x27;Sorry, this script requires git&#x27;</span>);<br>        exit(<span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        echo(<span class="hljs-string">&quot;======================Auto Backup Begin===========================&quot;</span>);<br>        cd(<span class="hljs-string">&#x27;XXXXXXX&#x27;</span>);    <span class="hljs-comment">//此处修改为Hexo根目录路径</span><br>        <span class="hljs-keyword">if</span> (exec(<span class="hljs-string">&#x27;git add .&#x27;</span>).code !== <span class="hljs-number">0</span>) &#123;<br>            echo(<span class="hljs-string">&#x27;Error: Git add failed&#x27;</span>);<br>            exit(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (exec(<span class="hljs-string">&#x27;git commit -m &quot;Form auto backup script\&#x27;s commit&quot;&#x27;</span>).code !== <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (exec(<span class="hljs-string">&#x27;git remote add origin your_user_name@HostIP:/home/git/backup.git&#x27;</span>).code !== <span class="hljs-number">0</span>)&#123;       <span class="hljs-comment">//修改访问服务器方式</span><br>                <span class="hljs-keyword">if</span> (exec(<span class="hljs-string">&#x27;git push origin master&#x27;</span>).code !== <span class="hljs-number">0</span>) &#123;<br>                    echo(<span class="hljs-string">&#x27;Error: Git push failed&#x27;</span>);<br>                    exit(<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                echo(<span class="hljs-string">&#x27;Error: Git commit failed&#x27;</span>);<br>                exit(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (exec(<span class="hljs-string">&#x27;git push origin master&#x27;</span>).code !== <span class="hljs-number">0</span>) &#123;<br>            echo(<span class="hljs-string">&#x27;Error: Git push failed&#x27;</span>);<br>            exit(<span class="hljs-number">1</span>);<br>        &#125;<br>        echo(<span class="hljs-string">&quot;==================Auto Backup Complete============================&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：</p><ul><li>在<code>Hexo根目录</code>或在主题目录下的<code>scripts</code>文件夹<code>js</code>在启动时就会自动载入，因此建议放在主题目录下，避免不必要的问题，例如<code>Blog/themes/fluid/scripts/update.js</code>。</li><li>此<code>backup.js</code>是在<code>hexo backup</code>运行后<code>backupAfter</code>自动触发的，因此可以在其他仓库备份(如<code>github</code>和<code>coding</code>)后实现服务器的自动备份。</li><li><code>git</code>远程仓库在服务器，所以push在服务器端的<code>home/git/backup.git</code>里<code>post-receive</code>钩子中。</li><li>由于设定了<code>git</code>免密设置，因此使用<code>backup.git</code>操作不需要重复的输入密码。</li></ul><p>在<code>_config.yml</code>下设置备份配置。**注意：<code>backup</code>下不要有服务器的<code>repo</code>**，因为在<code>scripts</code>下<code>backup.js</code>已实现<code>git push</code>。</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">backup:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>    <span class="hljs-attr">message:</span> <span class="hljs-string">&#x27;backup updata: <span class="hljs-template-variable">&#123;&#123;now(&quot;YYYY-MM-DD HH/mm/ss&quot;)&#125;&#125;</span>&#x27;</span><br>    <span class="hljs-comment">## theme: fluid #主题</span><br>    <span class="hljs-attr">repo:</span> <span class="hljs-comment">#XXX为用户地址或IP地址</span><br>        <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:XXX.github.io.git,backup</span><br>        <span class="hljs-attr">coding:</span> <span class="hljs-string">git@e.coding.net:XXX.git,backup</span><br>        <span class="hljs-comment">## hexo: root@<span class="hljs-doctag">XXX:</span>/home/git/backup.git,master</span><br></code></pre></div></td></tr></table></figure><p>再来一波四连😄</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo clean <br>$ hexo g <br>$ hexo d <br>$ hexo b<br></code></pre></div></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo b<br>INFO  Start backup: git<br>The file will have its original line endings <span class="hljs-keyword">in</span> your working directory<br>[master 79b18cc] backup updata: XXXX<br> 2 files changed, 143 insertions(+), 4 deletions(-)<br>Branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-built_in">set</span> up to track remote branch <span class="hljs-string">&#x27;backup&#x27;</span> from <span class="hljs-string">&#x27;github&#x27;</span>.<br>To github.com:XXXXXX<br>   89e022d..79b18cc  master -&gt; backup<br>Branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-built_in">set</span> up to track remote branch <span class="hljs-string">&#x27;backup&#x27;</span> from <span class="hljs-string">&#x27;coding&#x27;</span>.<br>To e.coding.net:XXXXXX<br>   89e022d..79b18cc  master -&gt; backup<br>INFO  Backup <span class="hljs-keyword">done</span>: git<br>======================Auto Backup Begin===========================<br>On branch master<br>Your branch is up to date with <span class="hljs-string">&#x27;coding/backup&#x27;</span>.<br><br>nothing to commit, working tree clean<br>fatal: remote origin already exists.<br>remote: usage: git remote add [&lt;options&gt;] &lt;name&gt; &lt;url&gt;<br>remote:<br>remote:     -f, --fetch           fetch the remote branches<br>remote:     --tags                import all tags and associated objects when fetching<br>remote:                           or <span class="hljs-keyword">do</span> not fetch any tag at all (--no-tags)    <br>remote:     -t, --track &lt;branch&gt;  branch(es) to track<br>remote:     -m, --master &lt;branch&gt;<br>remote:                           master branch<br>remote:     --mirror[=(push|fetch)]<br>remote:                           <span class="hljs-built_in">set</span> up remote as a mirror to push to or fetch from<br>remote:<br>remote: fatal: <span class="hljs-string">&#x27;origin&#x27;</span> does not appear to be a git repository<br>remote: fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br>remote:<br>remote: Please make sure you have the correct access rights<br>remote: and the repository exists.<br>remote: fatal: not a git repository (or any of the parent directories): .git    <br>To XXXXXX:/home/git/backup.git<br>   89e022d..79b18cc  master -&gt; master<br>Everything up-to-date<br>==================Auto Backup Complete============================<br></code></pre></div></td></tr></table></figure><p>服务器的文件夹<code>/home/backup</code>下可看到<code>Hexo backup</code>的备份文件，服务器端备份的文件与<code>github</code>或<code>coding</code>备份文件一致。同时，文件夹<code>/home/hexo</code>是<code>hexo deploy</code>的部署文件，通过<code>Nginx</code>提供 <code>Web 服务</code>。这就实现了服务器部署和备份的自动化操作。</p><div class="note note-primary">            <p><strong>Tips</strong>:如果遇到程序没有报错但文件夹上传失败时，可以手动删除<code>Hexo</code>根目录下的<code>.deploy_git</code> 文件夹，再重新部署和备份。</p>          </div><h2 id="访问Jupyter"><a href="#访问Jupyter" class="headerlink" title="访问Jupyter"></a>访问Jupyter</h2><p>下面以域名<code>pxxyyz.com</code>为例，首先需要在服务器开启<code>Jupyter</code><sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="搭建 ipython/jupyter notebook 服务器">[4]</span></a></sup></p><h3 id="安装Jupyter"><a href="#安装Jupyter" class="headerlink" title="安装Jupyter"></a>安装Jupyter</h3><ul><li>安装<code>Anaconda</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mkdir anaconda //创建目录<br>$ <span class="hljs-built_in">cd</span> anaconda    //进入目录<br>// 在镜像站找到安装包并下载<br>$ wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2020.02-Linux-x86_64.sh<br>$ bash Anaconda3-2020.02-Linux-x86_64.sh  //安装anaconda3<br></code></pre></div></td></tr></table></figure><ul><li>生成<code>Jupyter Notebook</code>配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ jupyter notebook --generate-config<br></code></pre></div></td></tr></table></figure><ul><li>打开<code>ipython</code>并设置登入密码</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">ipython <br>In [<span class="hljs-number">1</span>]: <span class="hljs-keyword">from</span> IPython.lib <span class="hljs-keyword">import</span> passwd<br>In [<span class="hljs-number">2</span>]: passwd()                         <span class="hljs-comment">#设置Jupyter Notebook密码</span><br>Enter password: <br>Verify password: <br>Out[<span class="hljs-number">2</span>]: <span class="hljs-string">&#x27;&#x27;</span>                               <span class="hljs-comment">#生成的密钥在配置文件有用</span><br></code></pre></div></td></tr></table></figure><ul><li>修改服务器配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ vim ~/.jupyter/jupyter_notebook_config.py<br></code></pre></div></td></tr></table></figure><ul><li>按 <code>i</code> 键进入文件的编辑模式，在该文件中添加代码，按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>:</code>，然后输入<code>wq</code>回车）</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置所有ip地址皆可访问</span><br>c.NotebookApp.ip=<span class="hljs-string">&#x27;*&#x27;</span> <br><span class="hljs-comment"># 输入密码的哈希值，见Out[2]</span><br>c.NotebookApp.password = u<span class="hljs-string">&#x27;sha1:XXX&#x27;</span><br><span class="hljs-comment"># 禁止自动打开浏览器</span><br>c.NotebookApp.open_browser = False  <br><span class="hljs-comment"># 指定端口，需要在服务器安全组开发该端口</span><br>c.NotebookApp.port =8888 <br><span class="hljs-comment"># 远程访问</span><br>c.NotebookApp.allow_remote_access = True <br><span class="hljs-comment"># 使用mathjax，可输入公式</span><br>c.NotebookApp.enable_mathjax = True<br></code></pre></div></td></tr></table></figure><ul><li>启动<code>Jupyter</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nohup jupyter notebook --allow-root &amp; <br><span class="hljs-comment"># nohup避免关闭终端则终止了Jupyter 程序的运行，--allow-root允许root权限，&amp; 将程序放入后台运行</span><br></code></pre></div></td></tr></table></figure><ul><li>打开端口步骤： 本实例安全组-&gt;配置规则-&gt;入方向-&gt;手动添加</li></ul><center>| 授权策略 | 优先级 |  协议类型  |    端口范围    |   授权对象   || :------: | :----: | :--------: | :------------: | :----------: ||   允许   |  100   | 自定义 TCP | 目的:8888/8888 | 源:0.0.0.0/0 |</center><ul><li>浏览器访问<code>Jupyter notebook</code>(移动端或桌面端)，并输入刚才配置的密码即可使用</li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">http://HostIP:8888<br>http://域名:8888<br></code></pre></div></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>第二种方式需要域名解析到服务器公网IP，域名等价于公网IP</li><li><code>https://HostIP:8888</code>访问出错，<code>https://域名:8888</code>同理</li></ol><ul><li>anaconda换源，分别测试一下下载速度和稳定性，自行选择最优的</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 添加清华源</span><br>$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br>$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge <br>$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<br>$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br><br><span class="hljs-comment"># 添加上交源</span><br>$ conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/main/ <br>$ conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/pkgs/free/<br>$ conda config --add channels https://mirrors.sjtug.sjtu.edu.cn/anaconda/cloud/conda-forge/ <br><br><span class="hljs-comment"># 添加中科大源</span><br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/<br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/<br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/<br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/<br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/<br>$ conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/<br><br><span class="hljs-comment"># 设置搜索时显示通道地址 有资源显示源地址</span><br>$ conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><br><span class="hljs-comment"># 换回默认源(重置用)</span><br>$ conda config --remove-key channels<br></code></pre></div></td></tr></table></figure><ul><li>可以在<code>Jupyter notebook</code>的工作目录中上传或下载<code>.ipynb</code>文件，当然别的文件也可以。</li></ul><h3 id="Nginx-重定向"><a href="#Nginx-重定向" class="headerlink" title="Nginx 重定向"></a>Nginx 重定向</h3><p>希望在我的博客中添加一个菜单按钮直接访问我的<code>Jupyter notebook</code>。然而菜单链接是通过<code>url_for</code>自动生成的，如添加<code>link: &#39;:8888&#39;</code>，生成的是<code>pxxyyz.com/:8888/</code>，而不是<code>pxxyyz.com:8888</code>。当然，可以设置链接为<code>link: &#39;pxxyyz.com:8888&#39;</code>，直接且简单，但这不能学到一些有趣的东西！</p><div class="note note-primary">            <p>下面通过特点子页面来访问域名的指定端口，即通过<code>pxxyyz.com/jupyter</code>访问<code>pxxyyz.com:8888</code></p>          </div><ul><li>在此之前上传了<code>SSL证书</code>并配置<code>HTTPS</code><sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="hexo部署服务器之配置HTTPS">[5]</span></a></sup></li><li>修改服务器配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ vim /etc/nginx/nginx.conf<br></code></pre></div></td></tr></table></figure><ul><li>按 <code>i</code> 键进入文件的编辑模式，在该文件找到<code>server</code>，修改代码，按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>:</code>，然后输入<code>wq</code>回车）</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">  server &#123;<br>      listen       443 ssl;<span class="hljs-comment"># 80 default_server;</span><br>      <span class="hljs-comment"># listen       [::]:80 default_server;</span><br>      server_name  pxxyyz.com;<br>      root         /home/hexo;<br>      <span class="hljs-comment"># ssl on; # 老版本指令</span><br>      ssl_certificate /etc/nginx/conf/XXXXbundle.crt;<br>      ssl_certificate_key /etc/nginx/conf/XXXX.key;<br>      ssl_session_timeout 5m;<br>      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br>      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4!DHE;<br>      ssl_prefer_server_ciphers on;<br><br>      <span class="hljs-comment"># Load configuration files for the default server block.</span><br>      include /etc/nginx/default.d/*.conf;<br><br>      location / &#123;<br>      &#125;<br><br><span class="hljs-comment"># http://pxxyyz.com/jupyter/ to http://pxxyyz.com:8888</span><br>      location ~ /jupyter/?$ &#123;<br>        <span class="hljs-built_in">return</span> 302 http://pxxyyz.com:8888;<br>      &#125;<br>      <br>      error_page 404 /404.html;<br>          location = /40x.html &#123;<br>      &#125;<br><br>      error_page 500 502 503 504 /50x.html;<br>          location = /50x.html &#123;<br>      &#125;<br>  &#125;<br>  server &#123; <span class="hljs-comment">#把http的域名请求转成https</span><br>      listen 80;<br>      server_name pxxyyz.com;<br>      <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;<br>  &#125;<br></code></pre></div></td></tr></table></figure><ul><li>重启<code>nginx</code> 并检查配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ service nginx restart<br><span class="hljs-comment"># systemctl restart nginx.service</span><br>$ nginx -t<br><br><span class="hljs-comment"># 得到结果是</span><br><span class="hljs-comment"># nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="hljs-comment"># nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></code></pre></div></td></tr></table></figure><ul><li>当然，一开始不是这么做的，错误的方法也贴出来，避免入坑</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">server &#123;<br>    listen 80;<br>    server_name pxxyyz.com;<br>    location /jupyter &#123;<br>          proxy_pass http://pxxyyz.com:8888/tree?<br>     &#125;<br>  &#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>分析</p><ul><li><p>用<code>proxy_pass</code>得到的重定向是<code>https://pxxyyz.com/jupyter</code></p></li><li><p>对应的服务器访问的是<code>https://HostIP:8888</code></p></li><li><p>正确的<code>Jupyter notebook</code>访问地址却是<code>http://HostIP:8888</code></p></li><li><p>因此问题出在<strong>http的域名强制转成https</strong></p></li><li><p>解决方法：遇到指定链接用<code>return 302</code>返回<strong>http</strong>从而得到正确的结果<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="NGINX rewrite location to another port">[6]</span></a></sup></p></li><li><p>结果：</p><ul><li><code>https://pxxyyz.com/jupyter</code>、<code>http://pxxyyz.com/jupyter</code>、<code>http://pxxyyz.com:8888</code>和<code>http://HostIP:8888</code>均能打开<code>Jupyter notebook</code></li><li> 但<strong>IP的SSL证书不免费</strong>！<code>https+port</code>的组合访问会出错。</li></ul></li></ul></li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>在此补充一下之前公式不显示的问题。虽然<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>主题支持<strong>LaTeX 数学公式</strong>，但是需要手动操作，而且我按照<a href="https://hexo.fluid-dev.com/docs/guide/#latex-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F">教程</a>开启本功能<code>mathjax</code>没有成功，即公式在网页里并没有被渲染和转换。通过网上查找，发现解决这类问题的思路主要是换渲染引擎<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="如何在 hexo 中支持 Mathjax？">[7]</span></a></sup>，例如<code>pandoc</code>、<code>mathjax</code>、<code>katex</code>。我目前使用<code>mathjax</code>，操作如下：</p><ul><li><p><strong>卸载</strong>默认引擎，并<strong>安装</strong>这个新的渲染引擎</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm uninstall hexo-renderer-marked --save <br>$ npm install hexo-renderer-kramed --save<br></code></pre></div></td></tr></table></figure></li><li><p>修改<code>/node_modules/hexo-renderer-kramed/lib/renderer.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// Change inline math rule</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatText</span>(<span class="hljs-params">text</span>) </span>&#123;<br><span class="hljs-comment">// Fit kramed&#x27;s rule: $$ + \1 + $$</span><br><span class="hljs-comment">// 直接返回text</span><br><span class="hljs-comment">// return text.replace(/`\$(.*?)\$`/g, &#x27;$$$$$1$$$$&#x27;);</span><br><span class="hljs-keyword">return</span> text;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>修改hexo的渲染源码<code>/node_modules/kramed/lib/rules/inline.js</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 去掉`\\`的额外转义，第11行，将其修改为</span><br><span class="hljs-comment">// escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/, </span><br><span class="hljs-built_in">escape</span>: <span class="hljs-regexp">/^\\([`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,<br><span class="hljs-comment">// 将em标签对应的符号中，去掉`_`，第20行，将其修改为</span><br><span class="hljs-comment">// em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,    </span><br>em: <span class="hljs-regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,<br></code></pre></div></td></tr></table></figure></li><li><p>停止使用 <code>hexo-math</code>，安装 <code>hexo-renderer-mathjax</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm uninstall hexo-math --save<br>// 不知道是不是必要的<br>$ npm install hexo-renderer-mathjax --save<br></code></pre></div></td></tr></table></figure></li><li><p>更新 <code>Mathjax</code> 的 <code>CDN</code> 链接，打开<code>/node_modules/hexo-renderer-mathjax/mathjax.html</code>，把<code>script</code>更改为：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>// 网上推荐的上面这个，但我使用失败了，推荐下面这个，亲测可行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li><li><p>按照<a href="https://hexo.fluid-dev.com/docs/">Fluid</a>的<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速开始</a>，需要修改<strong>主题配置</strong>，打开<code>/source/_data/fluid_config.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span>  <br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span>   <br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></div></td></tr></table></figure></li><li><p>在根目录下修改<code>_config.yml</code>，添加</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure></li><li><p>在<code>Front-matter</code>中打开<code>MathJax</code></p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br>  <span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure></li><li><p>显示数学公式</p><figure class="highlight latex"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs latex"><span class="hljs-params">#</span> 不空行会出bug<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><span class="hljs-keyword">\Sigma</span>(&#123;n&#125; ; &#123;p&#125;)=<span class="hljs-keyword">\left</span><span class="hljs-keyword">\&#123;</span><span class="hljs-keyword">\left</span>(<span class="hljs-keyword">\zeta</span><span class="hljs-built_in">_</span>&#123;1&#125;, <span class="hljs-keyword">\ldots</span>, <span class="hljs-keyword">\zeta</span><span class="hljs-built_in">_</span>&#123;r&#125;<span class="hljs-keyword">\right</span>) <span class="hljs-keyword">\in</span> <span class="hljs-keyword">\mathbb</span>&#123;C&#125;<span class="hljs-built_in">^</span>&#123;n<span class="hljs-built_in">_</span>&#123;1&#125;&#125; <span class="hljs-keyword">\times</span> <span class="hljs-keyword">\cdots</span> <span class="hljs-keyword">\times</span> <span class="hljs-keyword">\mathbb</span>&#123;C&#125;<span class="hljs-built_in">^</span>&#123;n<span class="hljs-built_in">_</span>&#123;r&#125;&#125;: <span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;k=1&#125;<span class="hljs-built_in">^</span>&#123;r&#125;<span class="hljs-keyword">\left</span><span class="hljs-keyword">\|</span>&#123;<span class="hljs-keyword">\zeta</span>&#125;<span class="hljs-built_in">_</span>&#123;k&#125;<span class="hljs-keyword">\right</span><span class="hljs-keyword">\|</span><span class="hljs-built_in">^</span>&#123;2 p<span class="hljs-built_in">_</span>&#123;k&#125;&#125; &lt; 1<span class="hljs-keyword">\right</span><span class="hljs-keyword">\&#125;</span><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></div></td></tr></table></figure><p>$$\Sigma({n} ; {p})=\left{\left(\zeta_{1}, \ldots, \zeta_{r}\right) \in \mathbb{C}^{n_{1}} \times \cdots \times \mathbb{C}^{n_{r}}: \sum_{k=1}^{r}\left|{\zeta}<em>{k}\right|^{2 p</em>{k}} &lt; 1\right}$$</p></li></ul><div class="note note-primary">            <p>因为<code>hexo-renderer-kramed</code> 和<code>hexo-renderer-marked</code>均不支持<code>emoji</code> 功能，使用:smile: :blush: :smiley: :smirk:在Typora可以正常显示表情，在网页上显示的是<code>:smile: :blush: :smiley: :smirk:</code>，因此，可以直接复制<code>emoji</code>表情😄😊😃😏。</p>          </div><p>经过**<a href="https://zkqiang.cn/">强哥</a>**提醒，需要额外使用插件<code>hexo-filter-github-emojis</code>来支持<code>hexo</code> 的 <code>emoji</code> 。</p>  <figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ npm install hexo-filter-github-emojis --save<br></code></pre></div></td></tr></table></figure><p>在根目录下<code>_config.yml</code>添加配置</p>  <figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">githubEmojis:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">className:</span> <span class="hljs-string">github-emoji</span><br>  <span class="hljs-attr">inject:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">styles:</span><br>  <span class="hljs-attr">customEmojis:</span><br></code></pre></div></td></tr></table></figure><p>正文<code>markdown</code>用如下格式使用 <code>emoji</code></p> <figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="xml"># 不空行会出bug</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">raw</span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name">github_emoji</span> emoji %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name">endraw</span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>正如上面所说，Hexo 默认情况下 <code>:emoji:</code> 不能正确显示表情，如<code>:tada:</code>，而该插件通过 <code>{%github_emoji tada%}(github_emoji tada)</code> 即可显示这个 emoji ，其他调用格式可以看 <code>hexo-filter-github-emojis</code> 的<a href="https://github.com/crimx/hexo-filter-github-emojis">官方文档</a>。</p><h3 id="一键三连"><a href="#一键三连" class="headerlink" title="一键三连"></a>一键三连</h3><p>前面提到的在根目录下使用<code>Git Bash Here</code>输入下面指令有些繁琐。</p>  <figure class="highlight sas"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sas">$ hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d <span class="hljs-variable">&amp;&amp;</span> hexo b<br></code></pre></div></td></tr></table></figure><p>现在用<code>.bat</code>文件简化，可以分别保存。其中<strong>第四行的地址为根目录</strong>。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">:: 一键预览<br><span class="hljs-keyword">@echo</span> on<br><span class="hljs-attribute">D:</span><br>cd <span class="hljs-attribute">D:</span>\github\Hexo-Blog<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">:: 一键部署<br><span class="hljs-keyword">@echo</span> on<br><span class="hljs-attribute">D:</span><br>cd <span class="hljs-attribute">D:</span>\github\Hexo-Blog<br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></div></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sas">:: 一键部署+备份<br>@echo <span class="hljs-meta">on</span><br>D:<br>cd D:\github\Hexo-Blog<br>hexo clean <span class="hljs-variable">&amp;&amp;</span> hexo g <span class="hljs-variable">&amp;&amp;</span> hexo d <span class="hljs-variable">&amp;&amp;</span> hexo b<br></code></pre></div></td></tr></table></figure><p><strong>一键预览</strong>的窗口支持实时修改实时显示，即文档修改保存后，刷新可得修改后的预览页面。如果做到ssh免密登入，部署与备份也能一键完成。</p><div class="note note-danger" style="text-align:center;color:#0000FF;">免密会带来安全隐患，部署和备份文件最好设置为<div class="label label-default" style="color:#FF0000;font-size:1.2em;font-weight: bold;">私密</div></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.muyiio.com/2020/03/28/hexo-bo-ke-bu-shu-dao-teng-xun-yun-fu-wu-qi/">Hexo博客部署到腾讯云服务器</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://liujunzhou.top/deployer/">使用Git+Hooks实现Hexo站点自动部署到CentOS服务器上</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://cwyaml.github.io/2017/03/07/backup/">HEXO博客实现自动备份</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://bitmingw.com/2017/07/09/run-jupyter-notebook-server/">搭建 ipython/jupyter notebook 服务器</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://www.kylin.show/25251.html">hexo部署服务器之配置HTTPS</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://stackoverflow.com/questions/50734724/nginx-rewrite-location-to-another-port">NGINX rewrite location to another port</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/u014630987/article/details/78670258">如何在 hexo 中支持 Mathjax？</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Hexo</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见静态网站托管平台使用及多节点部署方案</title>
    <link href="/blog/hexo-static/"/>
    <url>/blog/hexo-static/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Vince<br>原文地址：<a href="https://i.vince.pub/p/hexo-static/">https://i.vince.pub/p/hexo-static/</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于 Hexo 来说，我们使用它来部署博客是因为无后端运维和高速渲染页面等优点。选择一个合适的托管平台对于博客来说十分重要，可以免费使用且稳定高速的平台是不存在的，我们总是需要做出妥协。我使用了 Github Pages、Coding Pages、Gitee Pages、Netlify 和 Vercel 来部署博客，以下为我的使用报告。</p><h2 id="常见托管平台"><a href="#常见托管平台" class="headerlink" title="常见托管平台"></a>常见托管平台</h2><p><img src="https://cdn.vince.pub/blog-file/photo/2fc062cb2.svg" alt="节点"></p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p><span class="label label-primary">免费</span><span class="label label-success">扩展性强</span><span class="label label-danger">无限制性</span></p><p>使用体验：可以与仓库无缝对接，高效部署，但是没用设置国内节点，在国内访问速度较慢，作为一个海外节点还是非常不错的。相对而言，使用 jsdelivr 来加速网站相关文件可以满足基本使用。查看 Github Status，Pages 服务会出现偶尔挂掉的情况，但多数仓库文档、演示等都选择了 Github Pages 服务。</p><p>使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。网站内容与仓库保存一致，自动推送。通过使用 Github Actions 具有较强扩展性。</p><h3 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h3><p><span class="label label-primary">免费</span><span class="label label-success">扩展性强</span><span class="label label-danger">无限制性</span></p><p>使用体验：Netlify 的节点设置在海外，但 Netlify 的服务速度尚可，国内部分地区可以到达高速服务。在使用 CDN 的情况下，把网站部署在 Netlify 是可以比较好的选择。Vuejs 和 Hexo 的官网都部署在 Netlify 上，其稳定性可想而知。Netlify 虽然拥有付费功能，但是基本上我们需要使用到的服务都免费。</p><p>使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。Netlify 支持 Github 或者 Gitlab 等账号登录，如果仓库已经是静态网站文件，每次 Push 到仓库 Netlify 都会自动部署。支持 Build Command，源文件也可以通过提供的环境自动编译或渲染，类似于一款 CI，与 Github Pages 功能相近。</p><h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p><span class="label label-primary">免费</span><span class="label label-success">扩展性强</span><span class="label label-danger">无限制性</span></p><p>使用体验：Vercel 的体验情况总体和 Netlify 相近，节点设置在海外，访问速度尚可。前身是 now.sh，作为一个高质量的静态托管平台，Vercel的使用体验非常好，是一个可选的优秀平台。</p><p>使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。支持 Github 或者 Gitlab 等账号登录，如果仓库已经是静态网站文件，每次 Push 到仓库都会自动部署。Vercel 打出了 free forever 的口号，也就是说在非商用的情况下，个人可以永久免费使用。支持设置环境并执行相关命令，自动部署不在话下。</p><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><p><span class="label label-primary">免费</span><span class="label label-success">一般扩展性</span><span class="label label-danger">限制性</span></p><p>使用体验：Coding 是腾讯系的一个国内托管平台，对于人数较少的团体实行免费制度。服务器节点部署在国内，在国内使用访问速度较快。也是国内开放程度比较高的一个代码托管平台了，静态网站功能 Coding 最近改版了一下，相对于之前来说更稳定了一些。</p><p>使用及扩展：提供二级域名，支持域名绑定及免费 SSL 证书。基于 Kubernetes 的持续部署，可以人我们体验到与 DevOps 体系紧密结合的持续部署能力。持续中提供静态网站托管，但是静态网站托管需要实名和绑定手机号。</p><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p><span class="label label-primary">免费（国内限制）</span><span class="label label-success">扩展性较低</span><span class="label label-danger">限制性强</span></p><p>使用体验：Gitee 是一个国内托管平台，对比 coding 来说较为封闭。静态托管功能上拥有较大限制，且无法自动部署，功能残缺。</p><p>使用及扩展：提供二级域名，非付费版不支持自动部署、域名绑定及免费 SSL 证书。如果强制使用 https，可能会造成样式文件失效等问题。</p><h3 id="TCB"><a href="#TCB" class="headerlink" title="TCB"></a>TCB</h3><p><span class="label label-primary">付费</span><span class="label label-success">扩展性高</span><span class="label label-danger">一般限制性</span></p><p>使用体验：TCB(Tencent CloudBase）采用 serverless 架构，提供静态托管服务。我的主站就是使用 TCB，相对而言因为付费了，所以效果较好，在全国各地有 CDN 节点，目前使用是因为腾讯的赞助计划，如果赞助计划失效了，价格过高可能会考虑切换平台。空间较大，流量较多，已经充当 CDN 使用了。</p><p>使用及扩展：提供二级域名，支持自动部署及 免费SSL 证书，但是 SSL 证书申请可能需要备案。扩展性较强，可以使用 CLI 工具或者 Tencent CloudBase Github Action 来部署。</p><h2 id="多节点部署方案"><a href="#多节点部署方案" class="headerlink" title="多节点部署方案"></a>多节点部署方案</h2><p><img src="https://cdn.vince.pub/blog-file/photo/2fc062cb1.png"></p><h3 id="几个仓库"><a href="#几个仓库" class="headerlink" title="几个仓库"></a>几个仓库</h3><h4 id="Hexo-源码仓库"><a href="#Hexo-源码仓库" class="headerlink" title="Hexo 源码仓库"></a>Hexo 源码仓库</h4><p>从图中可以看到使用了 <code>Blog-Source</code> 这个仓库为 Hexo 源码仓库，这个仓库有一个使用了两个 Github Actions，一个用来渲染博客文件并推送到 TCB 静态托管平台，一个用来渲染博客文件推送到各个 Git 仓库，理论上一个 Action 也可以完成这些任务，但是便于管理我选择了两个 Action。</p><p>推送至各个 Git 仓库</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Repo(Github,</span> <span class="hljs-string">Coding,</span> <span class="hljs-string">Gitee)</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]<br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span> <br>      <span class="hljs-attr">hTZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">init</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">update</span> <span class="hljs-string">--remote</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;10.x&quot;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">.yarnclean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-engines</span> <span class="hljs-string">--ignore-optional</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--silent</span> <span class="hljs-string">--ignore-scripts</span> <span class="hljs-string">--production=false</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">./public</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">vinceying</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">admin@vicne.pub</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$SSH_PRIVATE&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">tr</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;\r&#x27;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">e.coding.net</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">gitee.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;$GIT_NAME&quot;</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;$GIT_EMAIL&quot;</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></div></td></tr></table></figure><p>推送至 TCB</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Tencent</span> <span class="hljs-string">CloudBase</span><br><span class="hljs-attr">on:</span> <span class="hljs-string">push</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Souce</span> <span class="hljs-string">Repo</span> <span class="hljs-string">to</span> <span class="hljs-string">Tencent</span> <span class="hljs-string">CloudBase</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;10.x&#x27;</span><br>      <span class="hljs-comment"># NPM 环境及 Hexo 部署</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">NPM</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Clean</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./node_modules/.bin/hexo</span> <span class="hljs-string">clean</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">./node_modules/.bin/hexo</span> <span class="hljs-string">generate</span><br>      <span class="hljs-comment"># Deploy static to Tencent CloudBase</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">static</span> <span class="hljs-string">to</span> <span class="hljs-string">Tencent</span> <span class="hljs-string">CloudBase</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deployStatic</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">TencentCloudBase/cloudbase-action@v1.1.1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">secretId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_ID</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">secretKey:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">envId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ENV_ID</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">staticSrcPath:</span> <span class="hljs-string">public</span><br></code></pre></div></td></tr></table></figure><h4 id="Github-博客页面仓库"><a href="#Github-博客页面仓库" class="headerlink" title="Github 博客页面仓库"></a>Github 博客页面仓库</h4><p>这个作为使用 Github Pages 服务的仓库，同时在 Netlify 和 Vercel 的选择为源仓库，在每次推送至本仓库时，Netlify 和 Vercel 都会自动部署新文件。</p><h4 id="CDN-文件仓库"><a href="#CDN-文件仓库" class="headerlink" title="CDN 文件仓库"></a>CDN 文件仓库</h4><p>这个仓库作为管理和存放一些需要推送到 CDN 的文件，比如 css 文件、图片和视频等，首先是为了便于管理及通过 Github Actions推送 到 TCB，其次是为了使用 Jsdelivr CDN 服务作为备用 CDN。</p><h3 id="方案优点"><a href="#方案优点" class="headerlink" title="方案优点"></a>方案优点</h3><ul><li>高效自动化，利用 Github Actions,每次只要 Push 到 <code>Blog-Souce</code>和<code>Blog-file</code>仓库就可以全仓库和全节点同步。</li><li>便于管理文件，当主 CDN 失效后，直接替换 CDN 地址链接即可完成启用备用 CDN，且备份了文件。</li><li>多设备管理，当切换设备后，直接在不安装环境的情况下直接 Clone 即可管理博客，但调试方面还是需要安装环境。特别是在 Github 的云端 IDE-Codespace 正式发布后，可以完全通过仓库管理博客。</li></ul>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Hexo</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用 GitHub Actions 自动部署 Hexo 博客</title>
    <link href="/blog/actions-deploy/"/>
    <url>/blog/actions-deploy/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要讲如何将 GitHub Actions 应用于 Hexo 部署中，如果还不太熟悉 GitHub Actions 可以看<a href="https://zkqiang.cn/posts/e8ed6836/">这篇文章</a>，简单地说 Actions 就是在设定的时机触发创建一个虚拟云环境，然后执行一连串动作，从而实现自动部署的功能。</p><h2 id="创建工作流"><a href="#创建工作流" class="headerlink" title="创建工作流"></a>创建工作流</h2><p>首先要保证你的 Hexo 博客项目是全部提交到 GitHub 仓库中，然后在博客目录下创建 <code>.github/workflows/xxx.yml</code> 文件，文件名任意。</p><p>文件内容如下，根据自己的需求增删 step：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span>                      <span class="hljs-comment"># Actions 显示的名字，随意设置</span><br><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]                        <span class="hljs-comment"># 监听到 push 事件后触发</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span>              <span class="hljs-comment"># 拉取当前执行 Actions 仓库的指定分支</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">ref:</span> <span class="hljs-string">master</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">Submodule</span>      <span class="hljs-comment"># 如果仓库有 submodule，在这里更新，没有则删掉此步骤</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">init</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">submodule</span> <span class="hljs-string">update</span> <span class="hljs-string">--remote</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node</span>            <span class="hljs-comment"># 安装 Node 环境</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;10.x&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Generate</span>         <span class="hljs-comment"># 安装 Hexo 依赖并且生成静态文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-f</span> <span class="hljs-string">.yarnclean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">--frozen-lockfile</span> <span class="hljs-string">--ignore-engines</span> <span class="hljs-string">--ignore-optional</span> <span class="hljs-string">--non-interactive</span> <span class="hljs-string">--silent</span> <span class="hljs-string">--ignore-scripts</span> <span class="hljs-string">--production=false</span><br>        <span class="hljs-string">rm</span> <span class="hljs-string">-rf</span> <span class="hljs-string">./public</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span>           <span class="hljs-comment"># 部署步骤，这里以 hexo deploy 为例</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SSH_PRIVATE</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">GIT_NAME:</span> <span class="hljs-string">yourname</span><br>        <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">your@email.com</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>        <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$SSH_PRIVATE&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">tr</span> <span class="hljs-string">-d</span> <span class="hljs-string">&#x27;\r&#x27;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span><br>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;$GIT_NAME&quot;</span><br>        <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;$GIT_EMAIL&quot;</span><br>        <span class="hljs-string">yarn</span> <span class="hljs-string">run</span> <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span><br></code></pre></div></td></tr></table></figure><p>只要配置了 hexo deploy 的都可以通过上面这种方式部署，注意如果是在其他 Pages 部署（比如Coding Pages 或者 码云 Pages），<code>ssh-keyscan</code> 需要进行增改：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># github、gitee 和 coding 三种 Pages 的示例，根据需求替换上例中语句，需要注意的是 coding 是使用二级域名。</span><br><span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br><span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">gitee.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br><span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">e.coding.net</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br></code></pre></div></td></tr></table></figure><p>然后 <code>${{ secrets.SSH_PRIVATE }}</code> 这种调用方式，需要提前在下图中设置常量：</p><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/actions-deploy/1.png?w=1280&fmt=webp"></p><p>这样做可以避免敏感数据放在 yml 文件中被泄漏，即使你是私有仓库也建议这样做，因为设置的常量是无法被二次查看的，就算你账号被盗也不用担心。</p><h2 id="常用步骤配置"><a href="#常用步骤配置" class="headerlink" title="常用步骤配置"></a>常用步骤配置</h2><p>以上是以部署 hexo deploy 为例，下面再提供几种其他常见的部署配置，注意修改你自己的变量参数。</p><h3 id="阿里云-OSS"><a href="#阿里云-OSS" class="headerlink" title="阿里云 OSS"></a>阿里云 OSS</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">OSS</span><br>  <span class="hljs-attr">env:</span><br>    <span class="hljs-attr">OSS_AccessKeyID:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACCESS_KEY_ID</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">OSS_AccessKeySecret:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACCESS_KEY_SECRET</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">OSS_EndPoint:</span> <span class="hljs-string">oss-ap-southeast-1.aliyuncs.com</span><br>    <span class="hljs-attr">OSS_Bucket:</span> <span class="hljs-string">fluid-dev</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>    <span class="hljs-string">wget</span> <span class="hljs-string">-q</span> <span class="hljs-string">http://gosspublic.alicdn.com/ossutil/1.6.10/ossutil64</span><br>    <span class="hljs-string">chmod</span> <span class="hljs-string">+x</span> <span class="hljs-string">./ossutil64</span><br>    <span class="hljs-string">./ossutil64</span> <span class="hljs-string">config</span> <span class="hljs-string">-e</span> <span class="hljs-string">$OSS_EndPoint</span> <span class="hljs-string">-i</span> <span class="hljs-string">$OSS_AccessKeyID</span> <span class="hljs-string">-k</span> <span class="hljs-string">$OSS_AccessKeySecret</span> <span class="hljs-string">-L</span> <span class="hljs-string">CH</span><br>    <span class="hljs-string">./ossutil64</span> <span class="hljs-string">rm</span> <span class="hljs-string">-r</span> <span class="hljs-string">-f</span> <span class="hljs-string">oss://$OSS_Bucket/</span><br>    <span class="hljs-string">./ossutil64</span> <span class="hljs-string">cp</span> <span class="hljs-string">-r</span> <span class="hljs-string">-f</span> <span class="hljs-string">./public</span> <span class="hljs-string">oss://$OSS_Bucket/</span><br></code></pre></div></td></tr></table></figure><h3 id="腾讯云-COS"><a href="#腾讯云-COS" class="headerlink" title="腾讯云 COS"></a>腾讯云 COS</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">COS</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">zkqiang/tencent-cos-action@v0.1.0</span><br>  <span class="hljs-attr">with:</span><br>    <span class="hljs-attr">args:</span> <span class="hljs-string">delete</span> <span class="hljs-string">-r</span> <span class="hljs-string">-f</span> <span class="hljs-string">/</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">upload</span> <span class="hljs-string">-r</span> <span class="hljs-string">./public/</span> <span class="hljs-string">/</span><br>    <span class="hljs-attr">secret_id:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_ID</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">secret_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">bucket:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.BUCKET</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">region:</span> <span class="hljs-string">ap-shanghai</span><br></code></pre></div></td></tr></table></figure><h3 id="腾讯云开发"><a href="#腾讯云开发" class="headerlink" title="腾讯云开发"></a>腾讯云开发</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Tencent</span> <span class="hljs-string">CloudBase</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">TencentCloudBase/cloudbase-action@v1.1.1</span><br>  <span class="hljs-attr">with:</span><br>    <span class="hljs-attr">secretId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_ID</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">secretKey:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SECRET_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">envId:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ENV_ID</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">staticSrcPath:</span> <span class="hljs-string">./public</span><br></code></pre></div></td></tr></table></figure><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>如果是直接部署在服务器上，需要通过 FTP/SFTP 协议来完成上传操作，因此确保你的服务器开启了 FTP 服务。如果使用 FTP-Deploy-Action 的话，需要注意的是因为 <code>./public</code> 是在流程中生成的文件，需要添加  <code>.git-ftp-include</code> 文件后方可推送，具体请查看相关 <a href="https://github.com/SamKirkland/FTP-Deploy-Action#build-and-publish-reactangularvue-website/">README</a> 中的相关内容。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">Server</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">SamKirkland/FTP-Deploy-Action@3.1.1</span><br>  <span class="hljs-attr">with:</span><br>    <span class="hljs-attr">ftp-server:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.FTP_SERVER</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-comment"># eg: ftp://ftp.xxx.com:22/mypath</span><br>    <span class="hljs-attr">ftp-username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.FTP_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">ftp-password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.FTP_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">local-dir:</span> <span class="hljs-string">./public</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>示例</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭配 Fluid 如何优雅的写一篇文章</title>
    <link href="/blog/fluid-write/"/>
    <url>/blog/fluid-write/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Vince<br>原文地址：<a href="https://i.vince.pub/p/fluid-write/">https://i.vince.pub/p/fluid-write/</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fluid 是一款很十分优雅的主题，那么写一篇优雅的文章搭配它呢？以下会从几个方面来简述，主要还是做几个推荐。</p><h2 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h2><h3 id="熟悉-Markdown-语法"><a href="#熟悉-Markdown-语法" class="headerlink" title="熟悉 Markdown 语法"></a>熟悉 Markdown 语法</h3><p>对于使用 Hexo 的大多数人来说，相信对 Markdown 的语法不会陌生。熟练掌握 Markdown 语法对我们的写作拥有极大的帮助，这里用少用的表格和脚注来举个例子。至于为什么有些公式、流程图无法渲染，是因为 <strong>Markdown 追求简洁式写作，默认渲染器不支持复杂渲染。</strong></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table><thead><tr><th>站点</th><th align="center">地址</th><th align="right">介绍</th></tr></thead><tbody><tr><td>Fluid Docs</td><td align="center"><a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></td><td align="right">Fluid 官方文档</td></tr><tr><td>Hexo-theme-fluid</td><td align="center"><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></td><td align="right">Fluid Github Repo</td></tr><tr><td>Fluid Blog</td><td align="center"><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></td><td align="right">Fluid 官方博客</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">站点|地址|介绍<br>--|:--:|--:<br>Fluid Docs|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com<span class="hljs-regexp">/docs/</span>|Fluid 官方文档<br>Hexo-theme-fluid|https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid|Fluid Github Repo<br>Fluid Blog|https:<span class="hljs-regexp">//</span>hexo.fluid-dev.com/|Fluid 官方博客<br></code></pre></div></td></tr></table></figure><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>默认渲染器下正常显示，不同渲染器显示效果不同，写法如下：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">脚注演示[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">脚注内容演示</span><br></code></pre></div></td></tr></table></figure><h3 id="善用-HTML"><a href="#善用-HTML" class="headerlink" title="善用 HTML"></a>善用 HTML</h3><p>我们可以在 Markdown 中插入一些简单的 HTML 代码或 CSS 片段来获得更多扩展，使得文章内容更具有多样性。以下演示几个简单功能。</p><p><a id="demo">跳转位置演示（跳转位置设置点）</a></p><h4 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h4><p><span  style="color: #519D9E; ">#519D9E颜色演示</span></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: #519D9E; &quot;</span>&gt;</span>#519D9E颜色演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h4><p><span  style="font-size:0.7em;">0.7em 文字大小演示</span></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:0.7em;&quot;</span>&gt;</span>0.7em 文字大小演示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="文字位置"><a href="#文字位置" class="headerlink" title="文字位置"></a>文字位置</h4><p style="text-align:center">内容居中演示</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span>内容居中演示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> # 可以修改 text-align 参数来设置文字位置。<br></code></pre></div></td></tr></table></figure><hr><h4 id="页内跳转"><a href="#页内跳转" class="headerlink" title="页内跳转"></a>页内跳转</h4><p><a href="#demo">点击到达跳转位置演示</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;#demo&quot;</span>&gt;点击到达跳转位置演示&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在需要跳转的地方添加此代码。</span><br>&lt;<span class="hljs-keyword">a</span> id=<span class="hljs-string">&quot;demo&quot;</span>&gt;跳转位置演示（跳转位置设置点）&lt;/<span class="hljs-keyword">a</span>&gt; <span class="hljs-comment"># 在跳转位置添加次代码。</span><br></code></pre></div></td></tr></table></figure><hr><h4 id="综合演示"><a href="#综合演示" class="headerlink" title="综合演示"></a>综合演示</h4><p style="text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;">综合演示<br>优雅使用 Fluid 写文章</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;&quot;</span>&gt;</span><br>综合演示<br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>优雅使用 Fluid 写文章<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h4 id="iframe-页面镶套"><a href="#iframe-页面镶套" class="headerlink" title="iframe 页面镶套"></a>iframe 页面镶套</h4><p>iframe 页面镶套可以帮助我们更好的展示一个页面。比如以下演示页面。</p><iframe src="https://hexo.fluid-dev.com/" width="100%" height="650" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="0" id="topFrame"></iframe><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://hexo.fluid-dev.com/&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attribute">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span>  <span class="hljs-attribute">noresize</span>=<span class="hljs-string">&quot;noresize&quot;</span> <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></div></td></tr></table></figure><p>一些参数说明，<code>width=&quot;100%&quot;</code> 为宽度自适应，高度请根据实际需求跳转，<strong>注意移动端页面是否匹配。</strong> <code>scrolling</code> 为滚动条参数。<code>frameborder</code> 为边框参数。<code>noresize</code> 属性规定用户无法调整框架的大小。</p><h4 id="details-标签"><a href="#details-标签" class="headerlink" title="details 标签"></a>details 标签</h4><p>用于展示代码较多需要折叠或折叠相关内容，以下为演示。<code>summary</code> 填写显示名称。</p><details><summary>Demo</summary><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure></details><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>好友申请备注：fluid<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>提问之前请先仔细查阅用户文档<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/wechat.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;wechat&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">details</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="善用-Tag-组件"><a href="#善用-Tag-组件" class="headerlink" title="善用 Tag 组件"></a>善用 Tag 组件</h3><p>Fluid 内置了许多 Tag 组件，包含便签、行内标签（已知不会出现间隔，谨慎使用）、勾选框、按钮和组图，可以使用这些组件来丰富文章内容，具体点击查看官方文档查看，**<a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">点击跳转到 Fluid Doc</a>**。</p><h2 id="配图"><a href="#配图" class="headerlink" title="配图"></a>配图</h2><p>众所周知，<strong>博客好不好看，配图占一半</strong>。这里给大家推荐几个我常用找配图的地方。<strong>另外，请遵循相关网站的版权协议。</strong></p><h3 id="Wallpaper-Hub"><a href="#Wallpaper-Hub" class="headerlink" title="Wallpaper Hub"></a>Wallpaper Hub</h3><p><img src="https://cdn.vince.pub/blog-file/photo/2020-04-17_175244.png" alt="Wallpaper Hub"></p><p><strong><a href="https://wallpaperhub.app/">点击跳转到 Wallpaper Hub</a></strong></p><h3 id="Wallhaven"><a href="#Wallhaven" class="headerlink" title="Wallhaven"></a>Wallhaven</h3><p><img src="https://cdn.vince.pub/blog-file/photo/2020-04-17_174841.png" alt="Wallhaven"></p><p><strong><a href="https://wallhaven.cc/">点击跳转到 Wallhaven</a></strong></p><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="Unsplash"></a>Unsplash</h3><p><img src="https://cdn.vince.pub/blog-file/photo/2020-05-14_000557.png" alt="Unsplash"></p><p><strong><a href="https://unsplash.com/">点击跳转到 Unsplash</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Rainbow 展示随机的英语句子</title>
    <link href="/blog/hexo-rainbow/"/>
    <url>/blog/hexo-rainbow/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：吃白饭<br>原文地址：<a href="https://eatrice.top/post/Rainbow/">https://eatrice.top/post/Rainbow/</a></p>          </div><p>访问 <a href="https://rainbow.eatrice.top/">Rainbow</a> 吧！</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Rainbow - 一朵彩虹是 <code>EatRiceTeam</code>建立的一个旨在收集优美英语句子的一套网站。演示网站地址为：<a href="https://rainbow.eatrice.top/">https://rainbow.eatrice.top/</a></p><p>我们希望能够与大家分享我们在日常的学习生活中遇到的优美的英语句子，希望它能像彩虹一样，美丽天空，温暖人心。</p><p>其由<code>C#</code>开发，基于<code>ASP.NET Core 2.2</code>框架。包括<code>Web API</code>提供导出<code>JSON</code>的数据接口，和基于<code>MVC</code>的动态展示网站。</p><h2 id="关于Rainbow"><a href="#关于Rainbow" class="headerlink" title="关于Rainbow"></a>关于Rainbow</h2><p>Rainbow 收集的英语句子的要求为：</p><ol><li>读起来感觉很优美的文章句子段落或诗歌节选；</li><li>含义特别丰富且引人深思的鸡汤或哲学句子；</li><li>句子奇怪，但意义完整且显得很有个性的电影台词；</li><li>你特别喜欢，且引起你感情上共鸣的英语歌词。</li></ol><p>Rainbow 创建的初衷是替代我们的个人网站目前正在使用的 一言 ，我们希望自己能够自己定义一句话的意思和表现形式。目前句子库不是特别丰富，收集的资源有限，所以欢迎大家投稿，并发表自己的看法。</p><h2 id="给Rainbow投稿"><a href="#给Rainbow投稿" class="headerlink" title="给Rainbow投稿"></a>给Rainbow投稿</h2><p>我们希望找到小伙伴们和我们一起充实我们的句子库，希望大家能够将自己珍藏的句子分享给我们：</p><p><strong>投稿要求</strong>：</p><ol><li>提供完整的句子</li><li>提供句子的作者</li><li>提供句子的来源，如书名、文章名、电影名、歌曲名等。</li></ol><p>投稿方式：</p><ol><li><p><a href="mailto:qiqi@eatrice.top">EatRice的邮箱：qiqi@eatrice.top</a></p></li><li><p><a href="dipper.ruru@gmail.com">Courir的邮箱：dipper.ruru@gmail.com</a></p></li><li><p>在本页下方留言</p></li><li><p>好友QQ或微信直接发送</p></li></ol><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="数据接口"><a href="#数据接口" class="headerlink" title="数据接口"></a>数据接口</h3><p>目前语句库饱含了三种类型的语句：reading、movies、songs</p><p>需要从语句库中随机获得语句的<code>Json</code>格式的接口：<code>https://api.eatrice.top/</code></p><p>需要按照三个单独分类请求语句的接口：<br><code>https://api.eatrice.top/reading/</code><br><code>https://api.eatrice.top/movies/</code><br><code>https://api.eatrice.top/songs/</code></p><p>获取所有的句子接口：<code>https://api.eatrice.top/GetAll/</code></p><p>需要根据语句ID请求语句的接口：<code>https://api.eatrice.top/?ID=10001</code><br>ID编号从10001开始增加，若该ID不存在则随机返回语句，同<code>https://api.eatrice.top/</code></p><p>返回的数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;Content&quot;</span>: <span class="hljs-string">&quot;Because I am your mom,It counts the most because I know you the most.&quot;</span>,<br>    <span class="hljs-attr">&quot;Author&quot;</span>: <span class="hljs-string">&quot;Stephen Chbosky&quot;</span>,<br>    <span class="hljs-attr">&quot;Source&quot;</span>: <span class="hljs-string">&quot;Wonder&quot;</span>,<br>    <span class="hljs-attr">&quot;ID&quot;</span>: <span class="hljs-string">&quot;10009&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中，<code>Content</code>为句子内容<br><code>Author</code>为句子作者<br><code>Source</code>为句子来源<br><code>ID</code>为句子ID</p><h3 id="展示网站"><a href="#展示网站" class="headerlink" title="展示网站"></a>展示网站</h3><p>展示网站为 Rainbow 提供展示界面。和说明文档。</p><p>Rainbow的展示网站为：<a href="https://rainbow.eatrice.top/">https://rainbow.eatrice.top/</a><br>欢迎大家访问和提供意见😊😊😊。</p><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hexo-rainbow/1.png?w=1280&fmt=webp" alt="效果图"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在需要添加 <code>rainbow</code> 的地方添加一个占位符:</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;rainbow&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;&#x27;</span>&gt;</span>🌈 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在申明div之后，搭配数据请求脚本</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">fetch(<span class="hljs-string">&#x27;https://api.eatrice.top&#x27;</span>)</span><br><span class="javascript">  .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json())</span><br><span class="javascript">  .then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> rainbow = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;rainbow&#x27;</span>);</span><br>    rainbow.innerHTML = data.Content;<br><span class="javascript">    rainbow.href = <span class="hljs-string">&quot;https://rainbow.eatrice.top/?ID=&quot;</span> + data.ID;</span><br>  &#125;)<br><span class="javascript">  .catch(<span class="hljs-built_in">console</span>.error)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>就能在网站上看到你的 rainbow 啦！</p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>项目已在<code>github</code>上开源</p><ul><li>项目地址：<a href="https://github.com/QiQiWan/rainbow/">https://github.com/QiQiWan/rainbow/</a></li><li>项目仓库：<a href="https://github.com/QiQiWan/rainbow/">git@github.com:QiQiWan/rainbow.git</a></li></ul><h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h2><p><a href="https://eatrice.top/">EatRice-https://eatrice.top</a><br><a href="https://ruru.eatrice.top/">上屋顶看北斗七星-https://ruru.eatrice.top</a></p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 暗黑模式</title>
    <link href="/blog/hexo-darkmode/"/>
    <url>/blog/hexo-darkmode/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：Royce<br>原文地址：<a href="https://royce2003.top/posts/41212.html">https://royce2003.top/posts/41212.html</a></p>          </div><div class="note note-warning">            <p>Fluid 开发组注：主题最新版本已支持暗色模式，本文仅用于学习交流。</p>          </div><p>大概花了一个晚上搞暗黑模式，之后陆续优化了下<br>目前博客已经基本上适配完成了<br>目前是三种方案（优先级递减）</p><ol><li>媒体查询</li><li>定时开启</li><li>localStorage/sessionStorage 查询</li></ol><p><code>媒体查询</code>，判断系统是否处于暗黑模式，支持大部分系统<br>Win10 需要浏览器开启软件深色模式<br>Android 同理，需要浏览器支持手机开启夜间模式的时候将自身切换到神色模式，目前 Chrome 支持，Edge 不支持，其他没测<br>iOS、MacOS 上的 Safari 也支持</p><p><code>定时开启</code>，在规定时间自动开启，如果在该时间段内取消了暗黑模式，能一直保持</p><p><code>localStorage/sessionStorage 查询</code>，能一直保持某一个模式的依赖</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>在 <code>\themes\fluid\layout\layout.ejs</code> 中找到 <code>&lt;body&gt;</code>，在其之后加入如下代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dark&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;switchDarkMode()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> isNight = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() &gt;= <span class="hljs-number">22</span> || <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getHours() &lt; <span class="hljs-number">7</span>; <span class="hljs-comment">// 指定时间</span></span><br><span class="javascript">  <span class="hljs-comment">// 依次判断 系统暗黑模式 指定时间 缓存 dark</span></span><br><span class="javascript">  <span class="hljs-keyword">if</span>( matchMedia(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).matches || isNight || <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;dark&#x27;</span>) === <span class="hljs-string">&#x27;1&#x27;</span>) &#123;</span><br><span class="javascript">    <span class="hljs-keyword">if</span>(!(isNight&amp;&amp;<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;noDark&#x27;</span>) === <span class="hljs-string">&#x27;1&#x27;</span>)) &#123;</span><br><span class="javascript">      <span class="hljs-built_in">document</span>.body.classList.add(<span class="hljs-string">&#x27;dark&#x27;</span>);</span><br>    &#125;<br>  &#125;<br><span class="javascript">  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;dark&#x27;</span>).innerHTML = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;body&quot;</span>).classList.contains(<span class="hljs-string">&quot;dark&quot;</span>)?<span class="hljs-string">&quot;🌙&quot;</span>:<span class="hljs-string">&quot;🌞&quot;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><div class="note note-danger">            <p>注意！一定紧跟在 <code>body</code> 标签之后，否则会出现闪烁</p>          </div><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><p>在自定义 JS 中把下面代码加进去，直接加到 <code>&lt;/body&gt;</code> 之前也行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//点击事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">switchDarkMode</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> ($(<span class="hljs-string">&#x27;body&#x27;</span>).hasClass(<span class="hljs-string">&#x27;dark&#x27;</span>)) &#123;<br>$(<span class="hljs-string">&quot;#dark&quot;</span>).html(<span class="hljs-string">&quot;🌞&quot;</span>);<br><span class="hljs-built_in">document</span>.body.classList.remove(<span class="hljs-string">&#x27;dark&#x27;</span>);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;noDark&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;dark&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>$(<span class="hljs-string">&quot;#dark&quot;</span>).html(<span class="hljs-string">&quot;🌙&quot;</span>); <br><span class="hljs-built_in">document</span>.body.classList.add(<span class="hljs-string">&#x27;dark&#x27;</span>);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;dark&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&#x27;noDark&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>在自定义 CSS 中加入代码</p><div class="note note-primary">            <p>可以用 <code>stylus</code>，能少些写<br>但是引入时记得后缀还是 <code>.css</code> 不要变</p>          </div><p>下面是我的样式代码，基本覆盖所有内容<br>有配上些注释，根据自身情况修改，注意缩进</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-comment">/* 切换按钮 */</span><br>#dark<br>  <span class="hljs-attribute">cursor</span> pointer<br>  <span class="hljs-attribute">position</span> fixed<br>  <span class="hljs-attribute">right</span> <span class="hljs-number">40px</span><br>  <span class="hljs-attribute">bottom</span> <span class="hljs-number">98px</span><br>  <span class="hljs-attribute">width</span> <span class="hljs-number">16px</span><br>  <span class="hljs-attribute">height</span> <span class="hljs-number">14px</span><br>  <span class="hljs-attribute">z-index</span> <span class="hljs-number">100</span><br>  <span class="hljs-attribute">font-size</span> <span class="hljs-number">20px</span><br><br><span class="hljs-comment">/*暗黑模式*/</span><br>.dark<br>  <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br><br>  <span class="hljs-comment">/* 背景遮罩 */</span><br>  .<span class="hljs-attribute">mask</span><br>    background-color rgba(0,0,0,.7) !important<br><br>  <span class="hljs-comment">/* 主体 */</span><br>  <span class="hljs-selector-id">#board</span> <br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br>  <br>  <span class="hljs-selector-tag">img</span>  <br>    <span class="hljs-attribute">filter</span> brightness(<span class="hljs-number">50%</span>) // 图片亮度<br><br>  p<br>  <span class="hljs-selector-class">.index-info</span> <span class="hljs-selector-tag">a</span>  <br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span> !important<br><br>  .markdown-body<br>    <span class="hljs-selector-tag">h1</span>,<span class="hljs-selector-tag">h2</span>,<span class="hljs-selector-tag">h3</span>,<span class="hljs-selector-tag">h4</span>,<span class="hljs-selector-tag">h5</span>,<span class="hljs-selector-tag">h6</span>,s,<span class="hljs-selector-tag">li</span>  <br>      <span class="hljs-attribute">color</span>:<span class="hljs-number">#a09c9c</span> !important<br>    <br><br>  <span class="hljs-comment">/* 顶栏 */</span><br>  .navbar-col-show<br>  <span class="hljs-selector-class">.top-nav-collapse</span>  <br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br>    <br>  <span class="hljs-selector-class">.navbar</span> <span class="hljs-selector-tag">a</span>  <br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span> !important<br>    <br>  <span class="hljs-selector-class">.animated-icon</span> <span class="hljs-selector-tag">span</span>   <span class="hljs-comment">/* 手机端 */</span><br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#a09c9c</span><br><br><br>  <span class="hljs-comment">/* page-number */</span><br>  <span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-tag">a</span>:hover<br>  <span class="hljs-selector-class">.pagination</span> <span class="hljs-selector-class">.current</span>  <br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#6b6b6b</span>73;<br><br><br>  <span class="hljs-comment">/* 打字机 */</span><br>  #subtitle<br>  <span class="hljs-selector-class">.dark</span>.typed-<span class="hljs-attribute">cursor</span>--blink<br>  .scroll-down-arrow<br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#dfdfdf</span><br><br><br>  <span class="hljs-comment">/* back to top */</span><br>  #scroll-<span class="hljs-attribute">top</span>-button<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br><br>    i<br>      <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br>    <br><br>  <span class="hljs-comment">/* Toc */</span><br>  <span class="hljs-selector-class">.tocbot-list</span> a<br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br><br>  .tocbot-active-link<br>  <span class="hljs-selector-tag">footer</span> <span class="hljs-selector-tag">a</span>:hover<br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#1abc9c</span> !important<br><br><br>  <span class="hljs-comment">/* footer */</span><br>  footer<br>  <span class="hljs-selector-tag">footer</span> a<br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br>    <br><br>  <span class="hljs-comment">/* 归档页 */</span><br>  .list-group-item<br>    <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br>    <br>  <span class="hljs-selector-class">.list-group-item</span>:hover<br>  <span class="hljs-selector-class">.tagcloud</span> <span class="hljs-selector-tag">a</span>:hover<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#46484d</span><br><br><br>  <span class="hljs-comment">/* 友链页 */</span><br>  .links<br>    <span class="hljs-selector-class">.card</span>  <br>      <span class="hljs-attribute">background-color</span> <span class="hljs-number">#282c34</span><br>        <br>    <span class="hljs-selector-class">.card-body</span>:hover  <br>      <span class="hljs-attribute">background-color</span> <span class="hljs-number">#46484d</span><br>        <br>    .link-title<br>    <span class="hljs-selector-class">.link-intro</span>  <br>      <span class="hljs-attribute">color</span> <span class="hljs-number">#a09c9c</span><br>    <br><br>  <span class="hljs-comment">/* note标签 配色有点丑 */</span><br>  .note-info<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#3b5359</span><br>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#006d80</span><br><br>  .note-danger<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#783f42</span><br>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#670009</span><br><br>  .note-success<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#2a3e2e</span><br>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#005915</span><br><br>  .note-warning<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#5b543e</span><br>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#846500</span><br><br>  .note-primary<br>    <span class="hljs-attribute">background-color</span> <span class="hljs-number">#455a6f</span><br>    <span class="hljs-attribute">border-color</span> <span class="hljs-number">#004188</span><br></code></pre></div></td></tr></table></figure><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>仔细观察刚刚的 js 代码，在其中用到了 localStorage<br>相当于一个标记，除非被手动清除，否则将会永久保存。</p><p>下面是支持该特性的最低版本</p><p><img src="https://rmt.dogedoge.com/fetch/royce/storage/darkmode/01.png?w=1280&fmt=webp"></p><p>可以在浏览器控制台中查看他们的值</p><p><img src="https://rmt.dogedoge.com/fetch/royce/storage/darkmode/02.png?w=1280&fmt=webp"></p><hr><p>参考 <a href="https://crosschannel.cc/daily/hexo%E6%B7%BB%E5%8A%A0%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F.html">https://crosschannel.cc/daily/hexo添加暗色模式.html</a></p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给 Hexo 博客添加 PWA 支持</title>
    <link href="/blog/hexo-pwa/"/>
    <url>/blog/hexo-pwa/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>本文由 Fluid 用户授权转载，版权归原作者所有。</p><p>本文作者：吃白饭<br>原文地址：<a href="https://eatrice.top/post/%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0PWA%E6%94%AF%E6%8C%81/">https://eatrice.top/post/给hexo博客添加PWA支持/</a></p>          </div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>PWA（Progressive Web App）的中文名叫做「渐进式网页应用」，早在2014年， W3C 公布过 Service Worker 的相关草案，但是其在生产环境被 Chrome 支持是在 2015 年。因此，如果我们把 PWA 的关键技术之一 Service Worker 的出现作为 PWA 的诞生时间，那就应该是 2015 年。</p><p>自 2015 年以来，PWA 相关的技术不断升级优化，在用户体验和用户留存两方面都提供了非常好的解决方案。PWA 可以将 Web 和 App 各自的优势融合在一起：渐进式、可响应、可离线、实现类似 App 的交互、即时更新、安全、可以被搜索引擎检索、可推送、可安装、可链接。[1]</p><p>由于 Hexo 为静态博客，因此不需要具备推送功能（其实是我没搞懂）。因此PWA的特性包括其渐进式、可离线，可以作为提高网站体验和提高网站家在速度的一个方法。因此下面将从其主要内容和hexo如何安装两个方面以“吃白饭的休伯利安号”为例来简单演示一遍安装过程。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h3><p>什么是渐进式，即将传统的web应用，应用现代的技术和方法使之在能够有桌面应用一般的体验，即为渐进式web应用。渐进式web应用可以同时运行在传统的浏览器上，像普通的网站一样进行浏览和操作；其同时也可以运行在现代功能完善的浏览器中，可以使其具备更多的效果和功能。比较常见的有<strong>可安装</strong>，即在支持的浏览器和操作系统上可以生成访问图标，通过图标可以可桌面应用一样访问应用；<strong>消息推送</strong>，即访问应用时服务器端可以通过应用的后台进程主动向客户端推送消息，类似于桌面应用的消息队列。</p><h3 id="可离线"><a href="#可离线" class="headerlink" title="可离线"></a>可离线</h3><p>支持应用离线访问，即正常访问应用时，后台进程会自动缓存内容，下次访问时应用优先从缓存区读取数据，然后是进行web请求。因此可离线实质上充当了web代理服务器的职责，先是将正常请求代理到缓存区，再是将缓存区不足的文件进行正常的网络请求，通过此方法实现了离线的目标。根据可离线的规律，应用在一次访问缓存之后二次访问即可断网。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Web-app-manifest"><a href="#Web-app-manifest" class="headerlink" title="Web app manifest"></a>Web app manifest</h3><p>首先要实现PWA的可安装性，需要有一个清单文件<code>manifest.json</code>。<code>manifest.json</code>是一个简单的<code>json</code>文件，它描述了我们的图标在主屏幕上如何显示，以及图标点击进去的启动页是什么，自动生成<code>manifest.json</code>的工具：<a href="https://app-manifest.firebaseapp.com/">manifest.json生成工具</a>（需要梯子），本站的JSON格式如下所示：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;吃白饭的休伯利安号&quot;</span>,<br>  <span class="hljs-attr">&quot;short_name&quot;</span>: <span class="hljs-string">&quot;吃白饭博客&quot;</span>,<br>  <span class="hljs-attr">&quot;theme_color&quot;</span>: <span class="hljs-string">&quot;#3a311c&quot;</span>,<br>  <span class="hljs-attr">&quot;background_color&quot;</span>: <span class="hljs-string">&quot;#3a311c&quot;</span>,<br>  <span class="hljs-attr">&quot;display&quot;</span>: <span class="hljs-string">&quot;standalone&quot;</span>,<br>  <span class="hljs-attr">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">&quot;start_url&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>  <span class="hljs-attr">&quot;icons&quot;</span>: [<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-72x72.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;72x72&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-96x96.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;96x96&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-128x128.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;128x128&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-144x144.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;144x144&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-152x152.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;152x152&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-192x192.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;192x192&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-384x384.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;384x384&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;src&quot;</span>: <span class="hljs-string">&quot;/images/icons/icon-512x512.png&quot;</span>,<br>      <span class="hljs-attr">&quot;sizes&quot;</span>: <span class="hljs-string">&quot;512x512&quot;</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;image/png&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">&quot;splash_pages&quot;</span>: <span class="hljs-literal">null</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>其中：</p><blockquote><ul><li>start_url 可以设置启动网址</li><li>icons 可以设置各个分辨率下页面的图标，适配不同的尺寸的路径</li><li>background_color 会设置背景颜色， Chrome 在网络应用启动后会立即使用此颜色，这一颜色将保留在屏幕上，直至网络应用首次呈现为止。</li><li>theme_color 会设置主题颜色</li><li>display 设置启动样式</li></ul></blockquote><p>配置好<code>manifest.json</code>后进行调试，打开浏览器的控制台如下图所示，即文件配置成功。</p><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hexo-pwa/1.png?w=1280&fmt=webp"></p><h3 id="离线使用"><a href="#离线使用" class="headerlink" title="离线使用"></a>离线使用</h3><p>离线使用依赖<code>Service Work</code>，其本质是一段运行在并行于主进程的后台进程上，他不参与web交互功能，主要职责是和服务器交互，和指示缓存的内容。其详细的生命周期和原理文档详见：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers">Using Service Workers</a>。可以通过文档中的生命周期对这段后台脚本进行深度开发。</p><p>Hexo 为静态博客，因此只需要实现离线使用即可，不需要进行消息推送，因此可以使用固定服务注册脚本，在 Hexo 中服务注册脚本有着专门的插件进行生成：</p><table><thead><tr><th>hexo-offline</th><th>hexo-pwa</th><th>hexo-service-worker</th></tr></thead><tbody><tr><td>Hexo 的离线插件不包括安装</td><td>百度出的PWA综合插件，支持同时生成manifest.json，有很多的配置项</td><td>和hexo-offline类似</td></tr></tbody></table><p>三个插件的原理相同，通过注册SW服务，配合<code>manifest.json</code>，文件达到<strong>可安装</strong>和<strong>可离线</strong>的功能，本站使用的是<code>hexo-service-worker</code>插件，下面是插件使用的细节：</p><ol><li>首先安装<code>hexo-service-worker</code>插件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install --save hexo-service-worker<br></code></pre></div></td></tr></table></figure><ol start="2"><li>在 Hexo 的全局配置文件<code>config.yml</code>中添加配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># offline config passed to sw-precache.</span><br><span class="hljs-attr">service_worker:</span><br>  <span class="hljs-attr">maximumFileSizeToCacheInBytes:</span> <span class="hljs-number">5242880</span><br>  <span class="hljs-attr">staticFileGlobs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">public/index.html</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">public/img/favcion.png</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">public/manifest.json</span><br>  <span class="hljs-attr">stripPrefix:</span> <span class="hljs-string">public</span><br>  <span class="hljs-attr">verbose:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">runtimeCaching:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">urlPattern:</span> <span class="hljs-string">/**/*</span><br>      <span class="hljs-attr">handler:</span> <span class="hljs-string">cacheFirst</span><br>      <span class="hljs-attr">options:</span><br>        <span class="hljs-attr">origin:</span> <span class="hljs-string">eatrice.top</span><br></code></pre></div></td></tr></table></figure><p>其中</p><blockquote><ul><li>maximumFileSizeToCacheInBytes 为最大缓存大小，字节数</li><li>staticFileGlobs 关键的文件路径</li><li>stripPrefix 网站文件的根路径绝对位置</li><li>runtimeCaching 缓存选项</li><li>urlPattern 文件的正则匹配</li><li>handler 缓存模式</li><li>origin 网站访问域名(代理域名)</li></ul></blockquote><p>如此支持离线的PWA即配置成功。若要使用其他两个插件进行配置可以参考：</p><ul><li><a href="https://blog.naaln.com/2017/09/hexo-with-pwa/">hexo-offline 插件配置</a></li><li><a href="http://wsyks.github.io/2018/12/17/hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEPWA/#%E5%AE%89%E8%A3%85hexo-pwa">hexo-pwa 插件配置</a></li></ul><p>然后执行生成发布。使用新版的chrome访问网站，打开控制台的<code>Audits</code>点击生成报告，就能看到网站是否支持PWA啦，如下图所示：</p><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hexo-pwa/2.png?w=1280&fmt=webp"></p><p>发布之后可以先访问一下网站的一些页面，然后就可以拿把大剪子网线访问你的网站啦~</p><p>关于消息推送，还没太搞明白其中的原理，自己的博客也用不到，所以就不仔细讨论啦。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]: <a href="https://www.sysgeek.cn/progressive-web-apps/">什么是「渐进式 Web 应用」，PWA 应用程序解析</a></p>]]></content>
    
    
    <categories>
      
      <category>功能增强</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>花里胡哨</tag>
      
      <tag>用户经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Fluid</title>
    <link href="/blog/hello-fluid/"/>
    <url>/blog/hello-fluid/</url>
    
    <content type="html"><![CDATA[<blockquote><p>欢迎体验 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> ，这是一款 Material Design 风格的 Hexo 主题，以简约的设计帮助你专注于写作，本篇文章可预览主题的样式及功能。</p></blockquote><a id="more"></a><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>文章大部分使用的是 github-markdown 样式，并加入了一些 Material 风格。</p><h3 id="H3-标题"><a href="#H3-标题" class="headerlink" title="H3 标题"></a>H3 标题</h3><h4 id="H4-标题"><a href="#H4-标题" class="headerlink" title="H4 标题"></a>H4 标题</h4><p><strong>粗体</strong></p><p><em>斜体</em></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>行内代码：<code>$ hexo new post &quot;My New Post&quot;</code></p><p>代码高亮使用的是 highlight.js，支持 185 种语言和 91 种高亮样式：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>):</span><br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> a &lt; n:<br>        print(a, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        a, b = b, a+b<br>    print()<br>fib(<span class="hljs-number">1000</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Map <span class="hljs-keyword">struct</span> &#123;<br>    mu Mutex<br>    read atomic.Value<br>    dirty <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*entry<br>    misses <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Header 1</th><th>Header 2</th><th>Header 3</th></tr></thead><tbody><tr><td>Key 1</td><td>Value 1</td><td>Comment 1</td></tr><tr><td>Key 2</td><td>Value 2</td><td>Comment 2</td></tr><tr><td>Key 3</td><td>Value 3</td><td>Comment 3</td></tr></tbody></table><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Fluid 相较于其他主题的优势：</p><ol><li>设计遵循简洁至上，同时具有轻快的体验，和优雅的颜值；</li><li>提供大量定制化配置项，使每个用户使用该主题都能具有独特的样式；</li><li>响应式页面，适配手机、平板等设备；</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Fluid 功能特性：</p><ul><li>图片懒加载</li><li>自定义代码高亮方案</li><li>内置多语言</li><li>支持多款评论插件</li><li>支持使用数据文件存放配置</li><li>自定义静态资源 CDN</li><li>内置文章搜索</li><li>页脚备案信息</li><li>网页访问统计</li><li>支持 LaTeX 数学公式</li><li>支持 mermaid 流程图</li><li>音乐播放器</li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://rmt.dogedoge.com/fetch/fluid/storage/post.png?w=1280&fmt=webp"></p><h2 id="LaTex"><a href="#LaTex" class="headerlink" title="LaTex"></a>LaTex</h2><p>基于 MathJax 引擎：</p><p>$$<br>\Gamma _ { \epsilon } ( x ) = [ 1- e ^ { - 2\pi \epsilon } ] ^ { 1- x } \prod _ { n = 0} ^ { \infty } \frac { 1- \operatorname{exp} ( - 2\pi \epsilon ( n + 1) ) } { 1- \operatorname{exp} ( - 2\pi \epsilon ( x + n ) ) }<br>$$</p><p>$$<br>\left( \begin{array} c t ^ { \prime } \ x ^ { \prime } \ y ^ { \prime } \ z ^ { \prime } \end{array} \right) = \left( \begin{array} { c c c c } { \gamma } &amp; { - \gamma \beta } &amp; { 0 } &amp; { 0 } \ { - \gamma \beta } &amp; { \gamma } &amp; { 0 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 1 } &amp; { 0 } \ { 0 } &amp; { 0 } &amp; { 0 } &amp; { 1 } \end{array} \right) \left( \begin{array} c t \ x \ y \ z \end{array} \right)<br>$$</p><p>$$<br>6 \mathrm { CO } _ { 2 } + 6 \mathrm { H } _ { 2 } \mathrm { O } \rightarrow \mathrm { C } _ { 6 } \mathrm { H } _ { 12 } \mathrm { O } _ { 6 } + 6 \mathrm { O } _ { 2 }<br>$$</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>基于 mermaid 语法：</p><pre><code class=" mermaid">sequenceDiagramparticipant Aliceparticipant BobAlice-&gt;&gt;John: Hello John, how are you?loop Healthcheck    John-&gt;&gt;John: Fight against hypochondriaendNote right of John: Rational thoughts &lt;br&#x2F;&gt;prevail...John--&gt;&gt;Alice: Great!John-&gt;&gt;Bob: How about you?Bob--&gt;&gt;John: Jolly good!</code></pre><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><h2 id="内置-Tag-插件"><a href="#内置-Tag-插件" class="headerlink" title="内置 Tag 插件"></a>内置 Tag 插件</h2><p>内置了一些 Tag 插件，用于实现 Markdown 不容易生成的样式，具体使用方式请见 <a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">用户指南</a>。</p><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><div class="note note-info">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-warning">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><div class="note note-primary">            <p>这里可以写文字 或者 <code>markdown</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><span class="label label-info">行内标签</span> <span class="label label-warning">行内标签</span> <span class="label label-primary">行内标签</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><div>            <input type="checkbox" disabled checked="checked">主要是解决一些 Renderer 不支持勾选          </div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><a class="btn" href="javascript:;"  target="_blank">支持链接</a><h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div><div class="group-image-wrap"><img src="https://rmt.dogedoge.com/fetch/fluid/storage/hello-fluid/cover.png?w=480&fmt=webp"></div></div></div><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>以下是脚注演示<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="脚注演示">[1]</span></a></sup>：</p><p>如果你有 Fluid 主题或 Hexo 博客相关的文章，可以通过 Pull Request 方式投稿<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="投稿具体详见https://github.com/fluid-dev/hexo-fluid-blog">[2]</span></a></sup>。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>脚注演示<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>投稿具体详见<a href="https://github.com/fluid-dev/hexo-fluid-blog">https://github.com/fluid-dev/hexo-fluid-blog</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>主题示例</category>
      
    </categories>
    
    
    <tags>
      
      <tag>示例</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
